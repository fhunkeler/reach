/*!
 * The MIT License (MIT)
 * 
 * Copyright (c) 2015 Webcom
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["Reach"] = factory();
	else
		root["Reach"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';Object.defineProperty(exports,"__esModule",{value:true});exports.Reach=undefined;var _classCallCheck2=__webpack_require__(1),_classCallCheck3=_interopRequireDefault(_classCallCheck2),_createClass2=__webpack_require__(2),_createClass3=_interopRequireDefault(_createClass2),_adapter=__webpack_require__(21),_adapter2=_interopRequireDefault(_adapter),_actions=__webpack_require__(98),_actions2=_interopRequireDefault(_actions),_datarefs=__webpack_require__(99),_datarefs2=_interopRequireDefault(_datarefs),_reach=__webpack_require__(100),_reach2=_interopRequireDefault(_reach),_room=__webpack_require__(102),_room2=_interopRequireDefault(_room),_webrtcmngr=__webpack_require__(104),_webrtcmngr2=_interopRequireDefault(_webrtcmngr);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var Reach=exports.Reach=function(){function Reach(){var url=arguments.length<=0||arguments[0]===undefined?'http://webcom.orange.com/base/webrtc':arguments[0];(0,_classCallCheck3.default)(this,Reach);this.datarefs=(0,_datarefs2.default)(url);this.webrtcmngr=(0,_webrtcmngr2.default)(this.datarefs);this.webrtcmngr.setWebrtcManger(this.webrtcmngr);}(0,_createClass3.default)(Reach,[{key:'Room',value:function Room(){for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}return _room2.default.apply(undefined,args.concat([this.datarefs,this.webrtcmngr]));}},{key:'Reach',value:function Reach(){for(var _len2=arguments.length,args=Array(_len2),_key2=0;_key2<_len2;_key2++){args[_key2]=arguments[_key2];}return _reach2.default.apply(undefined,args.concat([this.datarefs]));}}],[{key:'version',get:function get(){return ('1.1.0');}},{key:'actions',get:function get(){return _actions2.default;}}]);return Reach;}();module.exports=Reach;

/***/ },
/* 1 */
/***/ function(module, exports) {

	"use strict";
	
	exports.__esModule = true;
	
	exports.default = function (instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	};

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	var _defineProperty = __webpack_require__(3);
	
	var _defineProperty2 = _interopRequireDefault(_defineProperty);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];
	      descriptor.enumerable = descriptor.enumerable || false;
	      descriptor.configurable = true;
	      if ("value" in descriptor) descriptor.writable = true;
	      (0, _defineProperty2.default)(target, descriptor.key, descriptor);
	    }
	  }
	
	  return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);
	    if (staticProps) defineProperties(Constructor, staticProps);
	    return Constructor;
	  };
	}();

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(4), __esModule: true };

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(5);
	var $Object = __webpack_require__(8).Object;
	module.exports = function defineProperty(it, key, desc){
	  return $Object.defineProperty(it, key, desc);
	};

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(6);
	// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
	$export($export.S + $export.F * !__webpack_require__(16), 'Object', {defineProperty: __webpack_require__(12).f});

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	var global    = __webpack_require__(7)
	  , core      = __webpack_require__(8)
	  , ctx       = __webpack_require__(9)
	  , hide      = __webpack_require__(11)
	  , PROTOTYPE = 'prototype';
	
	var $export = function(type, name, source){
	  var IS_FORCED = type & $export.F
	    , IS_GLOBAL = type & $export.G
	    , IS_STATIC = type & $export.S
	    , IS_PROTO  = type & $export.P
	    , IS_BIND   = type & $export.B
	    , IS_WRAP   = type & $export.W
	    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
	    , expProto  = exports[PROTOTYPE]
	    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]
	    , key, own, out;
	  if(IS_GLOBAL)source = name;
	  for(key in source){
	    // contains in native
	    own = !IS_FORCED && target && target[key] !== undefined;
	    if(own && key in exports)continue;
	    // export native or passed
	    out = own ? target[key] : source[key];
	    // prevent global pollution for namespaces
	    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
	    // bind timers to global for call from export context
	    : IS_BIND && own ? ctx(out, global)
	    // wrap global constructors for prevent change them in library
	    : IS_WRAP && target[key] == out ? (function(C){
	      var F = function(a, b, c){
	        if(this instanceof C){
	          switch(arguments.length){
	            case 0: return new C;
	            case 1: return new C(a);
	            case 2: return new C(a, b);
	          } return new C(a, b, c);
	        } return C.apply(this, arguments);
	      };
	      F[PROTOTYPE] = C[PROTOTYPE];
	      return F;
	    // make static versions for prototype methods
	    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
	    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
	    if(IS_PROTO){
	      (exports.virtual || (exports.virtual = {}))[key] = out;
	      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
	      if(type & $export.R && expProto && !expProto[key])hide(expProto, key, out);
	    }
	  }
	};
	// type bitmap
	$export.F = 1;   // forced
	$export.G = 2;   // global
	$export.S = 4;   // static
	$export.P = 8;   // proto
	$export.B = 16;  // bind
	$export.W = 32;  // wrap
	$export.U = 64;  // safe
	$export.R = 128; // real proto method for `library` 
	module.exports = $export;

/***/ },
/* 7 */
/***/ function(module, exports) {

	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global = module.exports = typeof window != 'undefined' && window.Math == Math
	  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
	if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef

/***/ },
/* 8 */
/***/ function(module, exports) {

	var core = module.exports = {version: '2.4.0'};
	if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	// optional / simple context binding
	var aFunction = __webpack_require__(10);
	module.exports = function(fn, that, length){
	  aFunction(fn);
	  if(that === undefined)return fn;
	  switch(length){
	    case 1: return function(a){
	      return fn.call(that, a);
	    };
	    case 2: return function(a, b){
	      return fn.call(that, a, b);
	    };
	    case 3: return function(a, b, c){
	      return fn.call(that, a, b, c);
	    };
	  }
	  return function(/* ...args */){
	    return fn.apply(that, arguments);
	  };
	};

/***/ },
/* 10 */
/***/ function(module, exports) {

	module.exports = function(it){
	  if(typeof it != 'function')throw TypeError(it + ' is not a function!');
	  return it;
	};

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	var dP         = __webpack_require__(12)
	  , createDesc = __webpack_require__(20);
	module.exports = __webpack_require__(16) ? function(object, key, value){
	  return dP.f(object, key, createDesc(1, value));
	} : function(object, key, value){
	  object[key] = value;
	  return object;
	};

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	var anObject       = __webpack_require__(13)
	  , IE8_DOM_DEFINE = __webpack_require__(15)
	  , toPrimitive    = __webpack_require__(19)
	  , dP             = Object.defineProperty;
	
	exports.f = __webpack_require__(16) ? Object.defineProperty : function defineProperty(O, P, Attributes){
	  anObject(O);
	  P = toPrimitive(P, true);
	  anObject(Attributes);
	  if(IE8_DOM_DEFINE)try {
	    return dP(O, P, Attributes);
	  } catch(e){ /* empty */ }
	  if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');
	  if('value' in Attributes)O[P] = Attributes.value;
	  return O;
	};

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(14);
	module.exports = function(it){
	  if(!isObject(it))throw TypeError(it + ' is not an object!');
	  return it;
	};

/***/ },
/* 14 */
/***/ function(module, exports) {

	module.exports = function(it){
	  return typeof it === 'object' ? it !== null : typeof it === 'function';
	};

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = !__webpack_require__(16) && !__webpack_require__(17)(function(){
	  return Object.defineProperty(__webpack_require__(18)('div'), 'a', {get: function(){ return 7; }}).a != 7;
	});

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	// Thank's IE8 for his funny defineProperty
	module.exports = !__webpack_require__(17)(function(){
	  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;
	});

/***/ },
/* 17 */
/***/ function(module, exports) {

	module.exports = function(exec){
	  try {
	    return !!exec();
	  } catch(e){
	    return true;
	  }
	};

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(14)
	  , document = __webpack_require__(7).document
	  // in old IE typeof document.createElement is 'object'
	  , is = isObject(document) && isObject(document.createElement);
	module.exports = function(it){
	  return is ? document.createElement(it) : {};
	};

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	// 7.1.1 ToPrimitive(input [, PreferredType])
	var isObject = __webpack_require__(14);
	// instead of the ES6 spec version, we didn't implement @@toPrimitive case
	// and the second argument - flag - preferred type is a string
	module.exports = function(it, S){
	  if(!isObject(it))return it;
	  var fn, val;
	  if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
	  if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;
	  if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
	  throw TypeError("Can't convert object to primitive value");
	};

/***/ },
/* 20 */
/***/ function(module, exports) {

	module.exports = function(bitmap, value){
	  return {
	    enumerable  : !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable    : !(bitmap & 4),
	    value       : value
	  };
	};

/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';var _promise=__webpack_require__(22),_promise2=_interopRequireDefault(_promise),_stringify=__webpack_require__(75),_stringify2=_interopRequireDefault(_stringify),_keys=__webpack_require__(77),_keys2=_interopRequireDefault(_keys),_typeof2=__webpack_require__(81),_typeof3=_interopRequireDefault(_typeof2);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}window.getUserMedia=null;window.attachMediaStream=null;window.detachMediaStream=null;window.reattachMediaStream=null;window.webrtcDetectedBrowser=null;var webrtcDetectedVersion=null,webrtcMinimumVersion=null,webrtcUtils={log:function log(){if(true){return;}console.log.apply(console,arguments);},extractVersion:function extractVersion(uastring,expr,pos){var match=uastring.match(expr);return match&&match.length>=pos&&parseInt(match[pos],10);}};function trace(text){if(text[text.length-1]==='\n'){text=text.substring(0,text.length-1);}if(window.performance){var now=(window.performance.now()/1000).toFixed(3);webrtcUtils.log(now+': '+text);}else {webrtcUtils.log(text);}}if((typeof window==='undefined'?'undefined':(0,_typeof3.default)(window))==='object'){if(window.HTMLMediaElement&&!('srcObject' in window.HTMLMediaElement.prototype)){Object.defineProperty(window.HTMLMediaElement.prototype,'srcObject',{get:function get(){return 'mozSrcObject' in this?this.mozSrcObject:this._srcObject;},set:function set(stream){if('mozSrcObject' in this){if(stream){this.mozSrcObject=stream;}else {this.mozSrcObject="";}}else {if(stream){this._srcObject=stream;this.src=URL.createObjectURL(stream);}else {this._srcObject="";this.src="";}}}});}getUserMedia=window.navigator&&window.navigator.getUserMedia;}detachMediaStream=function detachMediaStream(element){if(element){if(typeof element.srcObject!=='undefined'){element.srcObject=null;}else if(typeof element.mozSrcObject!=='undefined'){element.mozSrcObject="";}else if(typeof element.src!=='undefined'){element.src="";}else {console.log('Error attaching stream to element.');}}};attachMediaStream=function attachMediaStream(element,stream){console.log("(ReachSDK::adapt::attachMediaStream1)");element.srcObject=stream;element.autoplay=true;if(element.play&&typeof element.play=='function'){element.play();}};reattachMediaStream=function reattachMediaStream(to,from){to.srcObject=from.srcObject;to.autoplay=true;if(to.play&&typeof to.play=='function'){to.play();}};if(typeof window==='undefined'||!window.navigator){webrtcUtils.log('This does not appear to be a browser');webrtcDetectedBrowser='not a browser';}else if(navigator.mozGetUserMedia){webrtcUtils.log('This appears to be Firefox');webrtcDetectedBrowser='firefox';webrtcDetectedVersion=webrtcUtils.extractVersion(navigator.userAgent,/Firefox\/([0-9]+)\./,1);webrtcMinimumVersion=31;if(!window.RTCPeerConnection){window.RTCPeerConnection=function(pcConfig,pcConstraints){if(webrtcDetectedVersion<38){if(pcConfig&&pcConfig.iceServers){var newIceServers=[];for(var i=0;i<pcConfig.iceServers.length;i++){var server=pcConfig.iceServers[i];if(server.hasOwnProperty('urls')){for(var j=0;j<server.urls.length;j++){var newServer={url:server.urls[j]};if(server.urls[j].indexOf('turn')===0){newServer.username=server.username;newServer.credential=server.credential;}newIceServers.push(newServer);}}else {newIceServers.push(pcConfig.iceServers[i]);}}pcConfig.iceServers=newIceServers;}}return new mozRTCPeerConnection(pcConfig,pcConstraints);};window.RTCPeerConnection.prototype=mozRTCPeerConnection.prototype;if(mozRTCPeerConnection.generateCertificate){Object.defineProperty(window.RTCPeerConnection,'generateCertificate',{get:function get(){if(arguments.length){return mozRTCPeerConnection.generateCertificate.apply(null,arguments);}else {return mozRTCPeerConnection.generateCertificate;}}});}window.RTCSessionDescription=mozRTCSessionDescription;window.RTCIceCandidate=mozRTCIceCandidate;}getUserMedia=function getUserMedia(constraints,onSuccess,onError){var constraintsToFF37=function constraintsToFF37(c){if((typeof c==='undefined'?'undefined':(0,_typeof3.default)(c))!=='object'||c.require){return c;}var require=[];(0,_keys2.default)(c).forEach(function(key){if(key==='require'||key==='advanced'||key==='mediaSource'){return;}var r=c[key]=(0,_typeof3.default)(c[key])==='object'?c[key]:{ideal:c[key]};if(r.min!==undefined||r.max!==undefined||r.exact!==undefined){require.push(key);}if(r.exact!==undefined){if(typeof r.exact==='number'){r.min=r.max=r.exact;}else {c[key]=r.exact;}delete r.exact;}if(r.ideal!==undefined){c.advanced=c.advanced||[];var oc={};if(typeof r.ideal==='number'){oc[key]={min:r.ideal,max:r.ideal};}else {oc[key]=r.ideal;}c.advanced.push(oc);delete r.ideal;if(!(0,_keys2.default)(r).length){delete c[key];}}});if(require.length){c.require=require;}return c;};if(webrtcDetectedVersion<38){webrtcUtils.log('spec: '+(0,_stringify2.default)(constraints));if(constraints.audio){constraints.audio=constraintsToFF37(constraints.audio);}if(constraints.video){constraints.video=constraintsToFF37(constraints.video);}webrtcUtils.log('ff37: '+(0,_stringify2.default)(constraints));}return navigator.mozGetUserMedia(constraints,onSuccess,onError);};navigator.getUserMedia=getUserMedia;if(!navigator.mediaDevices){navigator.mediaDevices={getUserMedia:requestUserMedia,addEventListener:function addEventListener(){},removeEventListener:function removeEventListener(){}};}navigator.mediaDevices.enumerateDevices=navigator.mediaDevices.enumerateDevices||function(){return new _promise2.default(function(resolve){var infos=[{kind:'audioinput',deviceId:'default',label:'',groupId:''},{kind:'videoinput',deviceId:'default',label:'',groupId:''}];resolve(infos);});};if(webrtcDetectedVersion<41){var orgEnumerateDevices=navigator.mediaDevices.enumerateDevices.bind(navigator.mediaDevices);navigator.mediaDevices.enumerateDevices=function(){return orgEnumerateDevices().then(undefined,function(e){if(e.name==='NotFoundError'){return [];}throw e;});};}}else if(navigator.webkitGetUserMedia&&window.webkitRTCPeerConnection){webrtcUtils.log('This appears to be Chrome');webrtcDetectedBrowser='chrome';webrtcDetectedVersion=webrtcUtils.extractVersion(navigator.userAgent,/Chrom(e|ium)\/([0-9]+)\./,2);webrtcMinimumVersion=38;window.RTCPeerConnection=function(pcConfig,pcConstraints){if(pcConfig&&pcConfig.iceTransportPolicy){pcConfig.iceTransports=pcConfig.iceTransportPolicy;}var pc=new webkitRTCPeerConnection(pcConfig,pcConstraints),origGetStats=pc.getStats.bind(pc);pc.getStats=function(selector,successCallback,errorCallback){var self=this,args=arguments;if(arguments.length>0&&typeof selector==='function'){return origGetStats(selector,successCallback);}var fixChromeStats=function fixChromeStats(response){var standardReport={},reports=response.result();reports.forEach(function(report){var standardStats={id:report.id,timestamp:report.timestamp,type:report.type};report.names().forEach(function(name){standardStats[name]=report.stat(name);});standardReport[standardStats.id]=standardStats;});return standardReport;};if(arguments.length>=2){var successCallbackWrapper=function successCallbackWrapper(response){args[1](fixChromeStats(response));};return origGetStats.apply(this,[successCallbackWrapper,arguments[0]]);}return new _promise2.default(function(resolve,reject){if(args.length===1&&selector===null){origGetStats.apply(self,[function(response){resolve.apply(null,[fixChromeStats(response)]);},reject]);}else {origGetStats.apply(self,[resolve,reject]);}});};return pc;};window.RTCPeerConnection.prototype=webkitRTCPeerConnection.prototype;if(webkitRTCPeerConnection.generateCertificate){Object.defineProperty(window.RTCPeerConnection,'generateCertificate',{get:function get(){if(arguments.length){return webkitRTCPeerConnection.generateCertificate.apply(null,arguments);}else {return webkitRTCPeerConnection.generateCertificate;}}});}['createOffer','createAnswer'].forEach(function(method){var nativeMethod=webkitRTCPeerConnection.prototype[method];webkitRTCPeerConnection.prototype[method]=function(){var self=this;if(arguments.length<1||arguments.length===1&&(0,_typeof3.default)(arguments[0])==='object'){var opts=arguments.length===1?arguments[0]:undefined;return new _promise2.default(function(resolve,reject){nativeMethod.apply(self,[resolve,reject,opts]);});}else {return nativeMethod.apply(this,arguments);}};});['setLocalDescription','setRemoteDescription','addIceCandidate'].forEach(function(method){var nativeMethod=webkitRTCPeerConnection.prototype[method];webkitRTCPeerConnection.prototype[method]=function(){var args=arguments,self=this;return new _promise2.default(function(resolve,reject){nativeMethod.apply(self,[args[0],function(){resolve();if(args.length>=2){args[1].apply(null,[]);}},function(err){reject(err);if(args.length>=3){args[2].apply(null,[err]);}}]);});};});var constraintsToChrome=function constraintsToChrome(c){if((typeof c==='undefined'?'undefined':(0,_typeof3.default)(c))!=='object'||c.mandatory||c.optional){return c;}var cc={};(0,_keys2.default)(c).forEach(function(key){if(key==='require'||key==='advanced'||key==='mediaSource'){return;}var r=(0,_typeof3.default)(c[key])==='object'?c[key]:{ideal:c[key]};if(r.exact!==undefined&&typeof r.exact==='number'){r.min=r.max=r.exact;}var oldname=function oldname(prefix,name){if(prefix){return prefix+name.charAt(0).toUpperCase()+name.slice(1);}return name==='deviceId'?'sourceId':name;};if(r.ideal!==undefined){cc.optional=cc.optional||[];var oc={};if(typeof r.ideal==='number'){oc[oldname('min',key)]=r.ideal;cc.optional.push(oc);oc={};oc[oldname('max',key)]=r.ideal;cc.optional.push(oc);}else {oc[oldname('',key)]=r.ideal;cc.optional.push(oc);}}if(r.exact!==undefined&&typeof r.exact!=='number'){cc.mandatory=cc.mandatory||{};cc.mandatory[oldname('',key)]=r.exact;}else {['min','max'].forEach(function(mix){if(r[mix]!==undefined){cc.mandatory=cc.mandatory||{};cc.mandatory[oldname(mix,key)]=r[mix];}});}});if(c.advanced){cc.optional=(cc.optional||[]).concat(c.advanced);}return cc;};getUserMedia=function getUserMedia(constraints,onSuccess,onError){if(constraints.audio){constraints.audio=constraintsToChrome(constraints.audio);}if(constraints.video){constraints.video=constraintsToChrome(constraints.video);}webrtcUtils.log('chrome: '+(0,_stringify2.default)(constraints));return navigator.webkitGetUserMedia(constraints,onSuccess,onError);};navigator.getUserMedia=getUserMedia;if(!navigator.mediaDevices){navigator.mediaDevices={getUserMedia:requestUserMedia,enumerateDevices:function enumerateDevices(){return new _promise2.default(function(resolve){var kinds={audio:'audioinput',video:'videoinput'};return MediaStreamTrack.getSources(function(devices){resolve(devices.map(function(device){return {label:device.label,kind:kinds[device.kind],deviceId:device.id,groupId:''};}));});});}};}if(!navigator.mediaDevices.getUserMedia){navigator.mediaDevices.getUserMedia=function(constraints){return requestUserMedia(constraints);};}else {var origGetUserMedia=navigator.mediaDevices.getUserMedia.bind(navigator.mediaDevices);navigator.mediaDevices.getUserMedia=function(c){webrtcUtils.log('spec:   '+(0,_stringify2.default)(c));c.audio=constraintsToChrome(c.audio);c.video=constraintsToChrome(c.video);webrtcUtils.log('chrome: '+(0,_stringify2.default)(c));return origGetUserMedia(c);};}if(typeof navigator.mediaDevices.addEventListener==='undefined'){navigator.mediaDevices.addEventListener=function(){webrtcUtils.log('Dummy mediaDevices.addEventListener called.');};}if(typeof navigator.mediaDevices.removeEventListener==='undefined'){navigator.mediaDevices.removeEventListener=function(){webrtcUtils.log('Dummy mediaDevices.removeEventListener called.');};}attachMediaStream=function attachMediaStream(element,stream){console.log("(ReachSDK::adapt::attachMediaStream2)");if(webrtcDetectedVersion>=43){element.srcObject=stream;element.autoplay=true;}else if(typeof element.src!=='undefined'){element.src=URL.createObjectURL(stream);element.autoplay=true;}else {webrtcUtils.log('Error attaching stream to element.');}};reattachMediaStream=function reattachMediaStream(to,from){if(webrtcDetectedVersion>=43){to.srcObject=from.srcObject;}else {to.src=from.src;}to.autoplay=true;if(to.play&&typeof to.play=='function'){to.play();}};}else if(navigator.mediaDevices&&navigator.userAgent.match(/Edge\/(\d+).(\d+)$/)){webrtcUtils.log('This appears to be Edge');webrtcDetectedBrowser='edge';webrtcDetectedVersion=webrtcUtils.extractVersion(navigator.userAgent,/Edge\/(\d+).(\d+)$/,2);webrtcMinimumVersion=10547;if(window.RTCIceGatherer){var generateIdentifier=function generateIdentifier(){return Math.random().toString(36).substr(2,10);},localCName=generateIdentifier(),SDPUtils={};SDPUtils.splitLines=function(blob){return blob.trim().split('\n').map(function(line){return line.trim();});};SDPUtils.splitSections=function(blob){var parts=blob.split('\r\nm=');return parts.map(function(part,index){return (index>0?'m='+part:part).trim()+'\r\n';});};SDPUtils.matchPrefix=function(blob,prefix){return SDPUtils.splitLines(blob).filter(function(line){return line.indexOf(prefix)===0;});};SDPUtils.parseCandidate=function(line){var parts;if(line.indexOf('a=candidate:')===0){parts=line.substring(12).split(' ');}else {parts=line.substring(10).split(' ');}var candidate={foundation:parts[0],component:parts[1],protocol:parts[2].toLowerCase(),priority:parseInt(parts[3],10),ip:parts[4],port:parseInt(parts[5],10),type:parts[7]};for(var i=8;i<parts.length;i+=2){switch(parts[i]){case 'raddr':candidate.relatedAddress=parts[i+1];break;case 'rport':candidate.relatedPort=parseInt(parts[i+1],10);break;case 'tcptype':candidate.tcpType=parts[i+1];break;default:break;}}return candidate;};SDPUtils.writeCandidate=function(candidate){var sdp=[];sdp.push(candidate.foundation);sdp.push(candidate.component);sdp.push(candidate.protocol.toUpperCase());sdp.push(candidate.priority);sdp.push(candidate.ip);sdp.push(candidate.port);var type=candidate.type;sdp.push('typ');sdp.push(type);if(type!=='host'&&candidate.relatedAddress&&candidate.relatedPort){sdp.push('raddr');sdp.push(candidate.relatedAddress);sdp.push('rport');sdp.push(candidate.relatedPort);}if(candidate.tcpType&&candidate.protocol.toLowerCase()==='tcp'){sdp.push('tcptype');sdp.push(candidate.tcpType);}return 'candidate:'+sdp.join(' ');};SDPUtils.parseRtpMap=function(line){var parts=line.substr(9).split(' '),parsed={payloadType:parseInt(parts.shift(),10)};parts=parts[0].split('/');parsed.name=parts[0];parsed.clockRate=parseInt(parts[1],10);parsed.numChannels=parts.length===3?parseInt(parts[2],10):1;return parsed;};SDPUtils.writeRtpMap=function(codec){var pt=codec.payloadType;if(codec.preferredPayloadType!==undefined){pt=codec.preferredPayloadType;}return 'a=rtpmap:'+pt+' '+codec.name+'/'+codec.clockRate+(codec.numChannels!==1?'/'+codec.numChannels:'')+'\r\n';};SDPUtils.parseFmtp=function(line){var parsed={},kv,parts=line.substr(line.indexOf(' ')+1).split(';');for(var j=0;j<parts.length;j++){kv=parts[j].trim().split('=');parsed[kv[0].trim()]=kv[1];}return parsed;};SDPUtils.writeFtmp=function(codec){var line='',pt=codec.payloadType;if(codec.preferredPayloadType!==undefined){pt=codec.preferredPayloadType;}if(codec.parameters&&codec.parameters.length){var params=[];(0,_keys2.default)(codec.parameters).forEach(function(param){params.push(param+'='+codec.parameters[param]);});line+='a=fmtp:'+pt+' '+params.join(';')+'\r\n';}return line;};SDPUtils.parseRtcpFb=function(line){var parts=line.substr(line.indexOf(' ')+1).split(' ');return {type:parts.shift(),parameter:parts.join(' ')};};SDPUtils.writeRtcpFb=function(codec){var lines='',pt=codec.payloadType;if(codec.preferredPayloadType!==undefined){pt=codec.preferredPayloadType;}if(codec.rtcpFeedback&&codec.rtcpFeedback.length){codec.rtcpFeedback.forEach(function(fb){lines+='a=rtcp-fb:'+pt+' '+fb.type+' '+fb.parameter+'\r\n';});}return lines;};SDPUtils.parseSsrcMedia=function(line){var sp=line.indexOf(' '),parts={ssrc:line.substr(7,sp-7)},colon=line.indexOf(':',sp);if(colon>-1){parts.attribute=line.substr(sp+1,colon-sp-1);parts.value=line.substr(colon+1);}else {parts.attribute=line.substr(sp+1);}return parts;};SDPUtils.getDtlsParameters=function(mediaSection,sessionpart){var lines=SDPUtils.splitLines(mediaSection);lines=lines.concat(SDPUtils.splitLines(sessionpart));var fpLine=lines.filter(function(line){return line.indexOf('a=fingerprint:')===0;})[0].substr(14),dtlsParameters={role:'auto',fingerprints:[{algorithm:fpLine.split(' ')[0],value:fpLine.split(' ')[1]}]};return dtlsParameters;};SDPUtils.writeDtlsParameters=function(params,setupType){var sdp='a=setup:'+setupType+'\r\n';params.fingerprints.forEach(function(fp){sdp+='a=fingerprint:'+fp.algorithm+' '+fp.value+'\r\n';});return sdp;};SDPUtils.getIceParameters=function(mediaSection,sessionpart){var lines=SDPUtils.splitLines(mediaSection);lines=lines.concat(SDPUtils.splitLines(sessionpart));var iceParameters={usernameFragment:lines.filter(function(line){return line.indexOf('a=ice-ufrag:')===0;})[0].substr(12),password:lines.filter(function(line){return line.indexOf('a=ice-pwd:')===0;})[0].substr(10)};return iceParameters;};SDPUtils.writeIceParameters=function(params){return 'a=ice-ufrag:'+params.usernameFragment+'\r\n'+'a=ice-pwd:'+params.password+'\r\n';};SDPUtils.parseRtpParameters=function(mediaSection){var description={codecs:[],headerExtensions:[],fecMechanisms:[],rtcp:[]},lines=SDPUtils.splitLines(mediaSection),mline=lines[0].split(' ');for(var i=3;i<mline.length;i++){var pt=mline[i],rtpmapline=SDPUtils.matchPrefix(mediaSection,'a=rtpmap:'+pt+' ')[0];if(rtpmapline){var codec=SDPUtils.parseRtpMap(rtpmapline),fmtps=SDPUtils.matchPrefix(mediaSection,'a=fmtp:'+pt+' ');codec.parameters=fmtps.length?SDPUtils.parseFmtp(fmtps[0]):{};codec.rtcpFeedback=SDPUtils.matchPrefix(mediaSection,'a=rtcp-fb:'+pt+' ').map(SDPUtils.parseRtcpFb);description.codecs.push(codec);}}return description;};SDPUtils.writeRtpDescription=function(kind,caps){var sdp='';sdp+='m='+kind+' ';sdp+=caps.codecs.length>0?'9':'0';sdp+=' UDP/TLS/RTP/SAVPF ';sdp+=caps.codecs.map(function(codec){if(codec.preferredPayloadType!==undefined){return codec.preferredPayloadType;}return codec.payloadType;}).join(' ')+'\r\n';sdp+='c=IN IP4 0.0.0.0\r\n';sdp+='a=rtcp:9 IN IP4 0.0.0.0\r\n';caps.codecs.forEach(function(codec){sdp+=SDPUtils.writeRtpMap(codec);sdp+=SDPUtils.writeFtmp(codec);sdp+=SDPUtils.writeRtcpFb(codec);});sdp+='a=rtcp-mux\r\n';return sdp;};SDPUtils.writeSessionBoilerplate=function(){return 'v=0\r\n'+'o=thisisadapterortc 8169639915646943137 2 IN IP4 127.0.0.1\r\n'+'s=-\r\n'+'t=0 0\r\n';};SDPUtils.writeMediaSection=function(transceiver,caps,type,stream){var sdp=SDPUtils.writeRtpDescription(transceiver.kind,caps);sdp+=SDPUtils.writeIceParameters(transceiver.iceGatherer.getLocalParameters());sdp+=SDPUtils.writeDtlsParameters(transceiver.dtlsTransport.getLocalParameters(),type==='offer'?'actpass':'active');sdp+='a=mid:'+transceiver.mid+'\r\n';if(transceiver.rtpSender&&transceiver.rtpReceiver){sdp+='a=sendrecv\r\n';}else if(transceiver.rtpSender){sdp+='a=sendonly\r\n';}else if(transceiver.rtpReceiver){sdp+='a=recvonly\r\n';}else {sdp+='a=inactive\r\n';}if(transceiver.rtpSender){var msid='msid:'+stream.id+' '+transceiver.rtpSender.track.id+'\r\n';sdp+='a='+msid;sdp+='a=ssrc:'+transceiver.sendSsrc+' '+msid;}sdp+='a=ssrc:'+transceiver.sendSsrc+' cname:'+localCName+'\r\n';return sdp;};SDPUtils.getDirection=function(mediaSection,sessionpart){var lines=SDPUtils.splitLines(mediaSection);for(var i=0;i<lines.length;i++){switch(lines[i]){case 'a=sendrecv':case 'a=sendonly':case 'a=recvonly':case 'a=inactive':return lines[i].substr(2);}}if(sessionpart){return SDPUtils.getDirection(sessionpart);}return 'sendrecv';};if(!window.RTCIceCandidate){window.RTCIceCandidate=function(args){return args;};}if(!window.RTCSessionDescription){window.RTCSessionDescription=function(args){return args;};}window.RTCPeerConnection=function(config){var self=this;this.onicecandidate=null;this.onaddstream=null;this.onremovestream=null;this.onsignalingstatechange=null;this.oniceconnectionstatechange=null;this.onnegotiationneeded=null;this.ondatachannel=null;this.localStreams=[];this.remoteStreams=[];this.getLocalStreams=function(){return self.localStreams;};this.getRemoteStreams=function(){return self.remoteStreams;};this.localDescription=new RTCSessionDescription({type:'',sdp:''});this.remoteDescription=new RTCSessionDescription({type:'',sdp:''});this.signalingState='stable';this.iceConnectionState='new';this.iceOptions={gatherPolicy:'all',iceServers:[]};if(config&&config.iceTransportPolicy){switch(config.iceTransportPolicy){case 'all':case 'relay':this.iceOptions.gatherPolicy=config.iceTransportPolicy;break;case 'none':throw new TypeError('iceTransportPolicy "none" not supported');}}if(config&&config.iceServers){config.iceServers.forEach(function(server){if(server.urls){var url;if(typeof server.urls==='string'){url=server.urls;}else {url=server.urls[0];}if(url.indexOf('transport=udp')!==-1){self.iceServers.push({username:server.username,credential:server.credential,urls:url});}}});}this.transceivers=[];this._localIceCandidatesBuffer=[];};window.RTCPeerConnection.prototype._emitBufferedCandidates=function(){var self=this;this._localIceCandidatesBuffer.forEach(function(event){if(self.onicecandidate!==null){self.onicecandidate(event);}});this._localIceCandidatesBuffer=[];};window.RTCPeerConnection.prototype.addStream=function(stream){this.localStreams.push(stream.clone());this._maybeFireNegotiationNeeded();};window.RTCPeerConnection.prototype.removeStream=function(stream){var idx=this.localStreams.indexOf(stream);if(idx>-1){this.localStreams.splice(idx,1);this._maybeFireNegotiationNeeded();}};window.RTCPeerConnection.prototype._getCommonCapabilities=function(localCapabilities,remoteCapabilities){var commonCapabilities={codecs:[],headerExtensions:[],fecMechanisms:[]};localCapabilities.codecs.forEach(function(lCodec){for(var i=0;i<remoteCapabilities.codecs.length;i++){var rCodec=remoteCapabilities.codecs[i];if(lCodec.name.toLowerCase()===rCodec.name.toLowerCase()&&lCodec.clockRate===rCodec.clockRate&&lCodec.numChannels===rCodec.numChannels){commonCapabilities.codecs.push(rCodec);break;}}});localCapabilities.headerExtensions.forEach(function(lHeaderExtension){for(var i=0;i<remoteCapabilities.headerExtensions.length;i++){var rHeaderExtension=remoteCapabilities.headerExtensions[i];if(lHeaderExtension.uri===rHeaderExtension.uri){commonCapabilities.headerExtensions.push(rHeaderExtension);break;}}});return commonCapabilities;};window.RTCPeerConnection.prototype._createIceAndDtlsTransports=function(mid,sdpMLineIndex){var self=this,iceGatherer=new RTCIceGatherer(self.iceOptions),iceTransport=new RTCIceTransport(iceGatherer);iceGatherer.onlocalcandidate=function(evt){var event={};event.candidate={sdpMid:mid,sdpMLineIndex:sdpMLineIndex};var cand=evt.candidate;if(!cand||(0,_keys2.default)(cand).length===0){if(iceGatherer.state===undefined){iceGatherer.state='completed';}event.candidate.candidate='candidate:1 1 udp 1 0.0.0.0 9 typ endOfCandidates';}else {cand.component=iceTransport.component==='RTCP'?2:1;event.candidate.candidate=SDPUtils.writeCandidate(cand);}var complete=self.transceivers.every(function(transceiver){return transceiver.iceGatherer&&transceiver.iceGatherer.state==='completed';});if(self.onicecandidate!==null){if(self.localDescription&&self.localDescription.type===''){self._localIceCandidatesBuffer.push(event);if(complete){self._localIceCandidatesBuffer.push({});}}else {self.onicecandidate(event);if(complete){self.onicecandidate({});}}}};iceTransport.onicestatechange=function(){self._updateConnectionState();};var dtlsTransport=new RTCDtlsTransport(iceTransport);dtlsTransport.ondtlsstatechange=function(){self._updateConnectionState();};dtlsTransport.onerror=function(){dtlsTransport.state='failed';self._updateConnectionState();};return {iceGatherer:iceGatherer,iceTransport:iceTransport,dtlsTransport:dtlsTransport};};window.RTCPeerConnection.prototype._transceive=function(transceiver,send,recv){var params=this._getCommonCapabilities(transceiver.localCapabilities,transceiver.remoteCapabilities);if(send&&transceiver.rtpSender){params.encodings=[{ssrc:transceiver.sendSsrc}];params.rtcp={cname:localCName,ssrc:transceiver.recvSsrc};transceiver.rtpSender.send(params);}if(recv&&transceiver.rtpReceiver){params.encodings=[{ssrc:transceiver.recvSsrc}];params.rtcp={cname:transceiver.cname,ssrc:transceiver.sendSsrc};transceiver.rtpReceiver.receive(params);}};window.RTCPeerConnection.prototype.setLocalDescription=function(description){var self=this;if(description.type==='offer'){if(!this._pendingOffer){}else {this.transceivers=this._pendingOffer;delete this._pendingOffer;}}else if(description.type==='answer'){var sections=SDPUtils.splitSections(self.remoteDescription.sdp),sessionpart=sections.shift();sections.forEach(function(mediaSection,sdpMLineIndex){var transceiver=self.transceivers[sdpMLineIndex],iceGatherer=transceiver.iceGatherer,iceTransport=transceiver.iceTransport,dtlsTransport=transceiver.dtlsTransport,localCapabilities=transceiver.localCapabilities,remoteCapabilities=transceiver.remoteCapabilities,rejected=mediaSection.split('\n',1)[0].split(' ',2)[1]==='0';if(!rejected){var remoteIceParameters=SDPUtils.getIceParameters(mediaSection,sessionpart);iceTransport.start(iceGatherer,remoteIceParameters,'controlled');var remoteDtlsParameters=SDPUtils.getDtlsParameters(mediaSection,sessionpart);dtlsTransport.start(remoteDtlsParameters);var params=self._getCommonCapabilities(localCapabilities,remoteCapabilities);self._transceive(transceiver,params.codecs.length>0,false);}});}this.localDescription=description;switch(description.type){case 'offer':this._updateSignalingState('have-local-offer');break;case 'answer':this._updateSignalingState('stable');break;default:throw new TypeError('unsupported type "'+description.type+'"');}var hasCallback=arguments.length>1&&typeof arguments[1]==='function';if(hasCallback){var cb=arguments[1];window.setTimeout(function(){cb();self._emitBufferedCandidates();},0);}var p=_promise2.default.resolve();p.then(function(){if(!hasCallback){window.setTimeout(self._emitBufferedCandidates.bind(self),0);}});return p;};window.RTCPeerConnection.prototype.setRemoteDescription=function(description){var self=this,stream=new MediaStream(),sections=SDPUtils.splitSections(description.sdp),sessionpart=sections.shift();sections.forEach(function(mediaSection,sdpMLineIndex){var lines=SDPUtils.splitLines(mediaSection),mline=lines[0].substr(2).split(' '),kind=mline[0],rejected=mline[1]==='0',direction=SDPUtils.getDirection(mediaSection,sessionpart),transceiver,iceGatherer,iceTransport,dtlsTransport,rtpSender,rtpReceiver,sendSsrc,recvSsrc,localCapabilities,remoteCapabilities=SDPUtils.parseRtpParameters(mediaSection),remoteIceParameters,remoteDtlsParameters;if(!rejected){remoteIceParameters=SDPUtils.getIceParameters(mediaSection,sessionpart);remoteDtlsParameters=SDPUtils.getDtlsParameters(mediaSection,sessionpart);}var mid=SDPUtils.matchPrefix(mediaSection,'a=mid:')[0].substr(6),cname,remoteSsrc=SDPUtils.matchPrefix(mediaSection,'a=ssrc:').map(function(line){return SDPUtils.parseSsrcMedia(line);}).filter(function(obj){return obj.attribute==='cname';})[0];if(remoteSsrc){recvSsrc=parseInt(remoteSsrc.ssrc,10);cname=remoteSsrc.value;}if(description.type==='offer'){var transports=self._createIceAndDtlsTransports(mid,sdpMLineIndex);localCapabilities=RTCRtpReceiver.getCapabilities(kind);sendSsrc=(2*sdpMLineIndex+2)*1001;rtpReceiver=new RTCRtpReceiver(transports.dtlsTransport,kind);stream.addTrack(rtpReceiver.track);if(self.localStreams.length>0&&self.localStreams[0].getTracks().length>=sdpMLineIndex){var localtrack=self.localStreams[0].getTracks()[sdpMLineIndex];rtpSender=new RTCRtpSender(localtrack,transports.dtlsTransport);}self.transceivers[sdpMLineIndex]={iceGatherer:transports.iceGatherer,iceTransport:transports.iceTransport,dtlsTransport:transports.dtlsTransport,localCapabilities:localCapabilities,remoteCapabilities:remoteCapabilities,rtpSender:rtpSender,rtpReceiver:rtpReceiver,kind:kind,mid:mid,cname:cname,sendSsrc:sendSsrc,recvSsrc:recvSsrc};self._transceive(self.transceivers[sdpMLineIndex],false,direction==='sendrecv'||direction==='sendonly');}else if(description.type==='answer'&&!rejected){transceiver=self.transceivers[sdpMLineIndex];iceGatherer=transceiver.iceGatherer;iceTransport=transceiver.iceTransport;dtlsTransport=transceiver.dtlsTransport;rtpSender=transceiver.rtpSender;rtpReceiver=transceiver.rtpReceiver;sendSsrc=transceiver.sendSsrc;localCapabilities=transceiver.localCapabilities;self.transceivers[sdpMLineIndex].recvSsrc=recvSsrc;self.transceivers[sdpMLineIndex].remoteCapabilities=remoteCapabilities;self.transceivers[sdpMLineIndex].cname=cname;iceTransport.start(iceGatherer,remoteIceParameters,'controlling');dtlsTransport.start(remoteDtlsParameters);self._transceive(transceiver,direction==='sendrecv'||direction==='recvonly',direction==='sendrecv'||direction==='sendonly');if(rtpReceiver&&(direction==='sendrecv'||direction==='sendonly')){stream.addTrack(rtpReceiver.track);}else {delete transceiver.rtpReceiver;}}});this.remoteDescription=description;switch(description.type){case 'offer':this._updateSignalingState('have-remote-offer');break;case 'answer':this._updateSignalingState('stable');break;default:throw new TypeError('unsupported type "'+description.type+'"');}window.setTimeout(function(){if(self.onaddstream!==null&&stream.getTracks().length){self.remoteStreams.push(stream);window.setTimeout(function(){self.onaddstream({stream:stream});},0);}},0);if(arguments.length>1&&typeof arguments[1]==='function'){window.setTimeout(arguments[1],0);}return _promise2.default.resolve();};window.RTCPeerConnection.prototype.close=function(){this.transceivers.forEach(function(transceiver){if(transceiver.iceTransport){transceiver.iceTransport.stop();}if(transceiver.dtlsTransport){transceiver.dtlsTransport.stop();}if(transceiver.rtpSender){transceiver.rtpSender.stop();}if(transceiver.rtpReceiver){transceiver.rtpReceiver.stop();}});this._updateSignalingState('closed');};window.RTCPeerConnection.prototype._updateSignalingState=function(newState){this.signalingState=newState;if(this.onsignalingstatechange!==null){this.onsignalingstatechange();}};window.RTCPeerConnection.prototype._maybeFireNegotiationNeeded=function(){if(this.onnegotiationneeded!==null){this.onnegotiationneeded();}};window.RTCPeerConnection.prototype._updateConnectionState=function(){var self=this,newState,states={'new':0,closed:0,connecting:0,checking:0,connected:0,completed:0,failed:0};this.transceivers.forEach(function(transceiver){states[transceiver.iceTransport.state]++;states[transceiver.dtlsTransport.state]++;});states.connected+=states.completed;newState='new';if(states.failed>0){newState='failed';}else if(states.connecting>0||states.checking>0){newState='connecting';}else if(states.disconnected>0){newState='disconnected';}else if(states.new>0){newState='new';}else if(states.connecting>0||states.completed>0){newState='connected';}if(newState!==self.iceConnectionState){self.iceConnectionState=newState;if(this.oniceconnectionstatechange!==null){this.oniceconnectionstatechange();}}};window.RTCPeerConnection.prototype.createOffer=function(){var self=this;if(this._pendingOffer){throw new Error('createOffer called while there is a pending offer.');}var offerOptions;if(arguments.length===1&&typeof arguments[0]!=='function'){offerOptions=arguments[0];}else if(arguments.length===3){offerOptions=arguments[2];}var tracks=[],numAudioTracks=0,numVideoTracks=0;if(this.localStreams.length){numAudioTracks=this.localStreams[0].getAudioTracks().length;numVideoTracks=this.localStreams[0].getVideoTracks().length;}if(offerOptions){if(offerOptions.mandatory||offerOptions.optional){throw new TypeError('Legacy mandatory/optional constraints not supported.');}if(offerOptions.offerToReceiveAudio!==undefined){numAudioTracks=offerOptions.offerToReceiveAudio;}if(offerOptions.offerToReceiveVideo!==undefined){numVideoTracks=offerOptions.offerToReceiveVideo;}}if(this.localStreams.length){this.localStreams[0].getTracks().forEach(function(track){tracks.push({kind:track.kind,track:track,wantReceive:track.kind==='audio'?numAudioTracks>0:numVideoTracks>0});if(track.kind==='audio'){numAudioTracks--;}else if(track.kind==='video'){numVideoTracks--;}});}while(numAudioTracks>0||numVideoTracks>0){if(numAudioTracks>0){tracks.push({kind:'audio',wantReceive:true});numAudioTracks--;}if(numVideoTracks>0){tracks.push({kind:'video',wantReceive:true});numVideoTracks--;}}var sdp=SDPUtils.writeSessionBoilerplate(),transceivers=[];tracks.forEach(function(mline,sdpMLineIndex){var track=mline.track,kind=mline.kind,mid=generateIdentifier(),transports=self._createIceAndDtlsTransports(mid,sdpMLineIndex),localCapabilities=RTCRtpSender.getCapabilities(kind),rtpSender,rtpReceiver,sendSsrc=(2*sdpMLineIndex+1)*1001;if(track){rtpSender=new RTCRtpSender(track,transports.dtlsTransport);}if(mline.wantReceive){rtpReceiver=new RTCRtpReceiver(transports.dtlsTransport,kind);}transceivers[sdpMLineIndex]={iceGatherer:transports.iceGatherer,iceTransport:transports.iceTransport,dtlsTransport:transports.dtlsTransport,localCapabilities:localCapabilities,remoteCapabilities:null,rtpSender:rtpSender,rtpReceiver:rtpReceiver,kind:kind,mid:mid,sendSsrc:sendSsrc,recvSsrc:null};var transceiver=transceivers[sdpMLineIndex];sdp+=SDPUtils.writeMediaSection(transceiver,transceiver.localCapabilities,'offer',self.localStreams[0]);});this._pendingOffer=transceivers;var desc=new RTCSessionDescription({type:'offer',sdp:sdp});if(arguments.length&&typeof arguments[0]==='function'){window.setTimeout(arguments[0],0,desc);}return _promise2.default.resolve(desc);};window.RTCPeerConnection.prototype.createAnswer=function(){var self=this,answerOptions;if(arguments.length===1&&typeof arguments[0]!=='function'){answerOptions=arguments[0];}else if(arguments.length===3){answerOptions=arguments[2];}var sdp=SDPUtils.writeSessionBoilerplate();this.transceivers.forEach(function(transceiver){var commonCapabilities=self._getCommonCapabilities(transceiver.localCapabilities,transceiver.remoteCapabilities);sdp+=SDPUtils.writeMediaSection(transceiver,commonCapabilities,'answer',self.localStreams[0]);});var desc=new RTCSessionDescription({type:'answer',sdp:sdp});if(arguments.length&&typeof arguments[0]==='function'){window.setTimeout(arguments[0],0,desc);}return _promise2.default.resolve(desc);};window.RTCPeerConnection.prototype.addIceCandidate=function(candidate){var mLineIndex=candidate.sdpMLineIndex;if(candidate.sdpMid){for(var i=0;i<this.transceivers.length;i++){if(this.transceivers[i].mid===candidate.sdpMid){mLineIndex=i;break;}}}var transceiver=this.transceivers[mLineIndex];if(transceiver){var cand=(0,_keys2.default)(candidate.candidate).length>0?SDPUtils.parseCandidate(candidate.candidate):{};if(cand.protocol==='tcp'&&cand.port===0){return;}if(cand.component!=='1'){return;}if(cand.type==='endOfCandidates'){cand={};}transceiver.iceTransport.addRemoteCandidate(cand);}if(arguments.length>1&&typeof arguments[1]==='function'){window.setTimeout(arguments[1],0);}return _promise2.default.resolve();};window.RTCPeerConnection.prototype.getStats=function(){var promises=[];this.transceivers.forEach(function(transceiver){['rtpSender','rtpReceiver','iceGatherer','iceTransport','dtlsTransport'].forEach(function(method){if(transceiver[method]){promises.push(transceiver[method].getStats());}});});var cb=arguments.length>1&&typeof arguments[1]==='function'&&arguments[1];return new _promise2.default(function(resolve){var results={};_promise2.default.all(promises).then(function(res){res.forEach(function(result){(0,_keys2.default)(result).forEach(function(id){results[id]=result[id];});});if(cb){window.setTimeout(cb,0,results);}resolve(results);});});};}}else {webrtcUtils.log('Browser does not appear to be WebRTC-capable');}if((typeof window==='undefined'?'undefined':(0,_typeof3.default)(window))==='object'&&window.RTCPeerConnection&&!('ontrack' in window.RTCPeerConnection.prototype)){Object.defineProperty(window.RTCPeerConnection.prototype,'ontrack',{get:function get(){return this._ontrack;},set:function set(f){var self=this;if(this._ontrack){this.removeEventListener('track',this._ontrack);this.removeEventListener('addstream',this._ontrackpoly);}this.addEventListener('track',this._ontrack=f);this.addEventListener('addstream',this._ontrackpoly=function(e){if(webrtcDetectedBrowser==='chrome'){e.stream.addEventListener('addtrack',function(te){var event=new Event('track');event.track=te.track;event.receiver={track:te.track};event.streams=[e.stream];self.dispatchEvent(event);});}e.stream.getTracks().forEach(function(track){var event=new Event('track');event.track=track;event.receiver={track:track};event.streams=[e.stream];this.dispatchEvent(event);}.bind(this));}.bind(this));}});}function requestUserMedia(constraints){return new _promise2.default(function(resolve,reject){getUserMedia(constraints,resolve,reject);});}var webrtcTesting={};try{Object.defineProperty(webrtcTesting,'version',{set:function set(version){webrtcDetectedVersion=version;}});}catch(e){}if(true){var RTCPeerConnection,RTCIceCandidate,RTCSessionDescription;if(typeof window!=='undefined'){RTCPeerConnection=window.RTCPeerConnection;RTCIceCandidate=window.RTCIceCandidate;RTCSessionDescription=window.RTCSessionDescription;}module.exports={RTCPeerConnection:RTCPeerConnection,RTCIceCandidate:RTCIceCandidate,RTCSessionDescription:RTCSessionDescription,getUserMedia:getUserMedia,attachMediaStream:attachMediaStream,reattachMediaStream:reattachMediaStream,webrtcDetectedBrowser:webrtcDetectedBrowser,webrtcDetectedVersion:webrtcDetectedVersion,webrtcMinimumVersion:webrtcMinimumVersion,webrtcTesting:webrtcTesting,webrtcUtils:webrtcUtils};}else if(typeof require==='function'&&typeof define==='function'){define([],function(){return {RTCPeerConnection:window.RTCPeerConnection,RTCIceCandidate:window.RTCIceCandidate,RTCSessionDescription:window.RTCSessionDescription,getUserMedia:getUserMedia,detachMediaStream:detachMediaStream,attachMediaStream:attachMediaStream,reattachMediaStream:reattachMediaStream,webrtcDetectedBrowser:webrtcDetectedBrowser,webrtcDetectedVersion:webrtcDetectedVersion,webrtcMinimumVersion:webrtcMinimumVersion,webrtcTesting:webrtcTesting,webrtcUtils:webrtcUtils};});}

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(23), __esModule: true };

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(24);
	__webpack_require__(25);
	__webpack_require__(54);
	__webpack_require__(58);
	module.exports = __webpack_require__(8).Promise;

/***/ },
/* 24 */
/***/ function(module, exports) {



/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $at  = __webpack_require__(26)(true);
	
	// 21.1.3.27 String.prototype[@@iterator]()
	__webpack_require__(29)(String, 'String', function(iterated){
	  this._t = String(iterated); // target
	  this._i = 0;                // next index
	// 21.1.5.2.1 %StringIteratorPrototype%.next()
	}, function(){
	  var O     = this._t
	    , index = this._i
	    , point;
	  if(index >= O.length)return {value: undefined, done: true};
	  point = $at(O, index);
	  this._i += point.length;
	  return {value: point, done: false};
	});

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	var toInteger = __webpack_require__(27)
	  , defined   = __webpack_require__(28);
	// true  -> String#at
	// false -> String#codePointAt
	module.exports = function(TO_STRING){
	  return function(that, pos){
	    var s = String(defined(that))
	      , i = toInteger(pos)
	      , l = s.length
	      , a, b;
	    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;
	    a = s.charCodeAt(i);
	    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
	      ? TO_STRING ? s.charAt(i) : a
	      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
	  };
	};

/***/ },
/* 27 */
/***/ function(module, exports) {

	// 7.1.4 ToInteger
	var ceil  = Math.ceil
	  , floor = Math.floor;
	module.exports = function(it){
	  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
	};

/***/ },
/* 28 */
/***/ function(module, exports) {

	// 7.2.1 RequireObjectCoercible(argument)
	module.exports = function(it){
	  if(it == undefined)throw TypeError("Can't call method on  " + it);
	  return it;
	};

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var LIBRARY        = __webpack_require__(30)
	  , $export        = __webpack_require__(6)
	  , redefine       = __webpack_require__(31)
	  , hide           = __webpack_require__(11)
	  , has            = __webpack_require__(32)
	  , Iterators      = __webpack_require__(33)
	  , $iterCreate    = __webpack_require__(34)
	  , setToStringTag = __webpack_require__(50)
	  , getPrototypeOf = __webpack_require__(52)
	  , ITERATOR       = __webpack_require__(51)('iterator')
	  , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`
	  , FF_ITERATOR    = '@@iterator'
	  , KEYS           = 'keys'
	  , VALUES         = 'values';
	
	var returnThis = function(){ return this; };
	
	module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){
	  $iterCreate(Constructor, NAME, next);
	  var getMethod = function(kind){
	    if(!BUGGY && kind in proto)return proto[kind];
	    switch(kind){
	      case KEYS: return function keys(){ return new Constructor(this, kind); };
	      case VALUES: return function values(){ return new Constructor(this, kind); };
	    } return function entries(){ return new Constructor(this, kind); };
	  };
	  var TAG        = NAME + ' Iterator'
	    , DEF_VALUES = DEFAULT == VALUES
	    , VALUES_BUG = false
	    , proto      = Base.prototype
	    , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]
	    , $default   = $native || getMethod(DEFAULT)
	    , $entries   = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined
	    , $anyNative = NAME == 'Array' ? proto.entries || $native : $native
	    , methods, key, IteratorPrototype;
	  // Fix native
	  if($anyNative){
	    IteratorPrototype = getPrototypeOf($anyNative.call(new Base));
	    if(IteratorPrototype !== Object.prototype){
	      // Set @@toStringTag to native iterators
	      setToStringTag(IteratorPrototype, TAG, true);
	      // fix for some old engines
	      if(!LIBRARY && !has(IteratorPrototype, ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);
	    }
	  }
	  // fix Array#{values, @@iterator}.name in V8 / FF
	  if(DEF_VALUES && $native && $native.name !== VALUES){
	    VALUES_BUG = true;
	    $default = function values(){ return $native.call(this); };
	  }
	  // Define iterator
	  if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){
	    hide(proto, ITERATOR, $default);
	  }
	  // Plug for library
	  Iterators[NAME] = $default;
	  Iterators[TAG]  = returnThis;
	  if(DEFAULT){
	    methods = {
	      values:  DEF_VALUES ? $default : getMethod(VALUES),
	      keys:    IS_SET     ? $default : getMethod(KEYS),
	      entries: $entries
	    };
	    if(FORCED)for(key in methods){
	      if(!(key in proto))redefine(proto, key, methods[key]);
	    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
	  }
	  return methods;
	};

/***/ },
/* 30 */
/***/ function(module, exports) {

	module.exports = true;

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(11);

/***/ },
/* 32 */
/***/ function(module, exports) {

	var hasOwnProperty = {}.hasOwnProperty;
	module.exports = function(it, key){
	  return hasOwnProperty.call(it, key);
	};

/***/ },
/* 33 */
/***/ function(module, exports) {

	module.exports = {};

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var create         = __webpack_require__(35)
	  , descriptor     = __webpack_require__(20)
	  , setToStringTag = __webpack_require__(50)
	  , IteratorPrototype = {};
	
	// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
	__webpack_require__(11)(IteratorPrototype, __webpack_require__(51)('iterator'), function(){ return this; });
	
	module.exports = function(Constructor, NAME, next){
	  Constructor.prototype = create(IteratorPrototype, {next: descriptor(1, next)});
	  setToStringTag(Constructor, NAME + ' Iterator');
	};

/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	var anObject    = __webpack_require__(13)
	  , dPs         = __webpack_require__(36)
	  , enumBugKeys = __webpack_require__(48)
	  , IE_PROTO    = __webpack_require__(45)('IE_PROTO')
	  , Empty       = function(){ /* empty */ }
	  , PROTOTYPE   = 'prototype';
	
	// Create object with fake `null` prototype: use iframe Object with cleared prototype
	var createDict = function(){
	  // Thrash, waste and sodomy: IE GC bug
	  var iframe = __webpack_require__(18)('iframe')
	    , i      = enumBugKeys.length
	    , gt     = '>'
	    , iframeDocument;
	  iframe.style.display = 'none';
	  __webpack_require__(49).appendChild(iframe);
	  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
	  // createDict = iframe.contentWindow.Object;
	  // html.removeChild(iframe);
	  iframeDocument = iframe.contentWindow.document;
	  iframeDocument.open();
	  iframeDocument.write('<script>document.F=Object</script' + gt);
	  iframeDocument.close();
	  createDict = iframeDocument.F;
	  while(i--)delete createDict[PROTOTYPE][enumBugKeys[i]];
	  return createDict();
	};
	
	module.exports = Object.create || function create(O, Properties){
	  var result;
	  if(O !== null){
	    Empty[PROTOTYPE] = anObject(O);
	    result = new Empty;
	    Empty[PROTOTYPE] = null;
	    // add "__proto__" for Object.getPrototypeOf polyfill
	    result[IE_PROTO] = O;
	  } else result = createDict();
	  return Properties === undefined ? result : dPs(result, Properties);
	};

/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	var dP       = __webpack_require__(12)
	  , anObject = __webpack_require__(13)
	  , getKeys  = __webpack_require__(37);
	
	module.exports = __webpack_require__(16) ? Object.defineProperties : function defineProperties(O, Properties){
	  anObject(O);
	  var keys   = getKeys(Properties)
	    , length = keys.length
	    , i = 0
	    , P;
	  while(length > i)dP.f(O, P = keys[i++], Properties[P]);
	  return O;
	};

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.14 / 15.2.3.14 Object.keys(O)
	var $keys       = __webpack_require__(38)
	  , enumBugKeys = __webpack_require__(48);
	
	module.exports = Object.keys || function keys(O){
	  return $keys(O, enumBugKeys);
	};

/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	var has          = __webpack_require__(32)
	  , toIObject    = __webpack_require__(39)
	  , arrayIndexOf = __webpack_require__(42)(false)
	  , IE_PROTO     = __webpack_require__(45)('IE_PROTO');
	
	module.exports = function(object, names){
	  var O      = toIObject(object)
	    , i      = 0
	    , result = []
	    , key;
	  for(key in O)if(key != IE_PROTO)has(O, key) && result.push(key);
	  // Don't enum bug & hidden keys
	  while(names.length > i)if(has(O, key = names[i++])){
	    ~arrayIndexOf(result, key) || result.push(key);
	  }
	  return result;
	};

/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	// to indexed object, toObject with fallback for non-array-like ES3 strings
	var IObject = __webpack_require__(40)
	  , defined = __webpack_require__(28);
	module.exports = function(it){
	  return IObject(defined(it));
	};

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	// fallback for non-array-like ES3 and non-enumerable old V8 strings
	var cof = __webpack_require__(41);
	module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){
	  return cof(it) == 'String' ? it.split('') : Object(it);
	};

/***/ },
/* 41 */
/***/ function(module, exports) {

	var toString = {}.toString;
	
	module.exports = function(it){
	  return toString.call(it).slice(8, -1);
	};

/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	// false -> Array#indexOf
	// true  -> Array#includes
	var toIObject = __webpack_require__(39)
	  , toLength  = __webpack_require__(43)
	  , toIndex   = __webpack_require__(44);
	module.exports = function(IS_INCLUDES){
	  return function($this, el, fromIndex){
	    var O      = toIObject($this)
	      , length = toLength(O.length)
	      , index  = toIndex(fromIndex, length)
	      , value;
	    // Array#includes uses SameValueZero equality algorithm
	    if(IS_INCLUDES && el != el)while(length > index){
	      value = O[index++];
	      if(value != value)return true;
	    // Array#toIndex ignores holes, Array#includes - not
	    } else for(;length > index; index++)if(IS_INCLUDES || index in O){
	      if(O[index] === el)return IS_INCLUDES || index || 0;
	    } return !IS_INCLUDES && -1;
	  };
	};

/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	// 7.1.15 ToLength
	var toInteger = __webpack_require__(27)
	  , min       = Math.min;
	module.exports = function(it){
	  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
	};

/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	var toInteger = __webpack_require__(27)
	  , max       = Math.max
	  , min       = Math.min;
	module.exports = function(index, length){
	  index = toInteger(index);
	  return index < 0 ? max(index + length, 0) : min(index, length);
	};

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	var shared = __webpack_require__(46)('keys')
	  , uid    = __webpack_require__(47);
	module.exports = function(key){
	  return shared[key] || (shared[key] = uid(key));
	};

/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	var global = __webpack_require__(7)
	  , SHARED = '__core-js_shared__'
	  , store  = global[SHARED] || (global[SHARED] = {});
	module.exports = function(key){
	  return store[key] || (store[key] = {});
	};

/***/ },
/* 47 */
/***/ function(module, exports) {

	var id = 0
	  , px = Math.random();
	module.exports = function(key){
	  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
	};

/***/ },
/* 48 */
/***/ function(module, exports) {

	// IE 8- don't enum bug keys
	module.exports = (
	  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
	).split(',');

/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(7).document && document.documentElement;

/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	var def = __webpack_require__(12).f
	  , has = __webpack_require__(32)
	  , TAG = __webpack_require__(51)('toStringTag');
	
	module.exports = function(it, tag, stat){
	  if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});
	};

/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	var store      = __webpack_require__(46)('wks')
	  , uid        = __webpack_require__(47)
	  , Symbol     = __webpack_require__(7).Symbol
	  , USE_SYMBOL = typeof Symbol == 'function';
	
	var $exports = module.exports = function(name){
	  return store[name] || (store[name] =
	    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
	};
	
	$exports.store = store;

/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
	var has         = __webpack_require__(32)
	  , toObject    = __webpack_require__(53)
	  , IE_PROTO    = __webpack_require__(45)('IE_PROTO')
	  , ObjectProto = Object.prototype;
	
	module.exports = Object.getPrototypeOf || function(O){
	  O = toObject(O);
	  if(has(O, IE_PROTO))return O[IE_PROTO];
	  if(typeof O.constructor == 'function' && O instanceof O.constructor){
	    return O.constructor.prototype;
	  } return O instanceof Object ? ObjectProto : null;
	};

/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	// 7.1.13 ToObject(argument)
	var defined = __webpack_require__(28);
	module.exports = function(it){
	  return Object(defined(it));
	};

/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(55);
	var global        = __webpack_require__(7)
	  , hide          = __webpack_require__(11)
	  , Iterators     = __webpack_require__(33)
	  , TO_STRING_TAG = __webpack_require__(51)('toStringTag');
	
	for(var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++){
	  var NAME       = collections[i]
	    , Collection = global[NAME]
	    , proto      = Collection && Collection.prototype;
	  if(proto && !proto[TO_STRING_TAG])hide(proto, TO_STRING_TAG, NAME);
	  Iterators[NAME] = Iterators.Array;
	}

/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var addToUnscopables = __webpack_require__(56)
	  , step             = __webpack_require__(57)
	  , Iterators        = __webpack_require__(33)
	  , toIObject        = __webpack_require__(39);
	
	// 22.1.3.4 Array.prototype.entries()
	// 22.1.3.13 Array.prototype.keys()
	// 22.1.3.29 Array.prototype.values()
	// 22.1.3.30 Array.prototype[@@iterator]()
	module.exports = __webpack_require__(29)(Array, 'Array', function(iterated, kind){
	  this._t = toIObject(iterated); // target
	  this._i = 0;                   // next index
	  this._k = kind;                // kind
	// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
	}, function(){
	  var O     = this._t
	    , kind  = this._k
	    , index = this._i++;
	  if(!O || index >= O.length){
	    this._t = undefined;
	    return step(1);
	  }
	  if(kind == 'keys'  )return step(0, index);
	  if(kind == 'values')return step(0, O[index]);
	  return step(0, [index, O[index]]);
	}, 'values');
	
	// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
	Iterators.Arguments = Iterators.Array;
	
	addToUnscopables('keys');
	addToUnscopables('values');
	addToUnscopables('entries');

/***/ },
/* 56 */
/***/ function(module, exports) {

	module.exports = function(){ /* empty */ };

/***/ },
/* 57 */
/***/ function(module, exports) {

	module.exports = function(done, value){
	  return {value: value, done: !!done};
	};

/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var LIBRARY            = __webpack_require__(30)
	  , global             = __webpack_require__(7)
	  , ctx                = __webpack_require__(9)
	  , classof            = __webpack_require__(59)
	  , $export            = __webpack_require__(6)
	  , isObject           = __webpack_require__(14)
	  , anObject           = __webpack_require__(13)
	  , aFunction          = __webpack_require__(10)
	  , anInstance         = __webpack_require__(60)
	  , forOf              = __webpack_require__(61)
	  , setProto           = __webpack_require__(65).set
	  , speciesConstructor = __webpack_require__(68)
	  , task               = __webpack_require__(69).set
	  , microtask          = __webpack_require__(71)()
	  , PROMISE            = 'Promise'
	  , TypeError          = global.TypeError
	  , process            = global.process
	  , $Promise           = global[PROMISE]
	  , process            = global.process
	  , isNode             = classof(process) == 'process'
	  , empty              = function(){ /* empty */ }
	  , Internal, GenericPromiseCapability, Wrapper;
	
	var USE_NATIVE = !!function(){
	  try {
	    // correct subclassing with @@species support
	    var promise     = $Promise.resolve(1)
	      , FakePromise = (promise.constructor = {})[__webpack_require__(51)('species')] = function(exec){ exec(empty, empty); };
	    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
	    return (isNode || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise;
	  } catch(e){ /* empty */ }
	}();
	
	// helpers
	var sameConstructor = function(a, b){
	  // with library wrapper special case
	  return a === b || a === $Promise && b === Wrapper;
	};
	var isThenable = function(it){
	  var then;
	  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
	};
	var newPromiseCapability = function(C){
	  return sameConstructor($Promise, C)
	    ? new PromiseCapability(C)
	    : new GenericPromiseCapability(C);
	};
	var PromiseCapability = GenericPromiseCapability = function(C){
	  var resolve, reject;
	  this.promise = new C(function($$resolve, $$reject){
	    if(resolve !== undefined || reject !== undefined)throw TypeError('Bad Promise constructor');
	    resolve = $$resolve;
	    reject  = $$reject;
	  });
	  this.resolve = aFunction(resolve);
	  this.reject  = aFunction(reject);
	};
	var perform = function(exec){
	  try {
	    exec();
	  } catch(e){
	    return {error: e};
	  }
	};
	var notify = function(promise, isReject){
	  if(promise._n)return;
	  promise._n = true;
	  var chain = promise._c;
	  microtask(function(){
	    var value = promise._v
	      , ok    = promise._s == 1
	      , i     = 0;
	    var run = function(reaction){
	      var handler = ok ? reaction.ok : reaction.fail
	        , resolve = reaction.resolve
	        , reject  = reaction.reject
	        , domain  = reaction.domain
	        , result, then;
	      try {
	        if(handler){
	          if(!ok){
	            if(promise._h == 2)onHandleUnhandled(promise);
	            promise._h = 1;
	          }
	          if(handler === true)result = value;
	          else {
	            if(domain)domain.enter();
	            result = handler(value);
	            if(domain)domain.exit();
	          }
	          if(result === reaction.promise){
	            reject(TypeError('Promise-chain cycle'));
	          } else if(then = isThenable(result)){
	            then.call(result, resolve, reject);
	          } else resolve(result);
	        } else reject(value);
	      } catch(e){
	        reject(e);
	      }
	    };
	    while(chain.length > i)run(chain[i++]); // variable length - can't use forEach
	    promise._c = [];
	    promise._n = false;
	    if(isReject && !promise._h)onUnhandled(promise);
	  });
	};
	var onUnhandled = function(promise){
	  task.call(global, function(){
	    var value = promise._v
	      , abrupt, handler, console;
	    if(isUnhandled(promise)){
	      abrupt = perform(function(){
	        if(isNode){
	          process.emit('unhandledRejection', value, promise);
	        } else if(handler = global.onunhandledrejection){
	          handler({promise: promise, reason: value});
	        } else if((console = global.console) && console.error){
	          console.error('Unhandled promise rejection', value);
	        }
	      });
	      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
	      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
	    } promise._a = undefined;
	    if(abrupt)throw abrupt.error;
	  });
	};
	var isUnhandled = function(promise){
	  if(promise._h == 1)return false;
	  var chain = promise._a || promise._c
	    , i     = 0
	    , reaction;
	  while(chain.length > i){
	    reaction = chain[i++];
	    if(reaction.fail || !isUnhandled(reaction.promise))return false;
	  } return true;
	};
	var onHandleUnhandled = function(promise){
	  task.call(global, function(){
	    var handler;
	    if(isNode){
	      process.emit('rejectionHandled', promise);
	    } else if(handler = global.onrejectionhandled){
	      handler({promise: promise, reason: promise._v});
	    }
	  });
	};
	var $reject = function(value){
	  var promise = this;
	  if(promise._d)return;
	  promise._d = true;
	  promise = promise._w || promise; // unwrap
	  promise._v = value;
	  promise._s = 2;
	  if(!promise._a)promise._a = promise._c.slice();
	  notify(promise, true);
	};
	var $resolve = function(value){
	  var promise = this
	    , then;
	  if(promise._d)return;
	  promise._d = true;
	  promise = promise._w || promise; // unwrap
	  try {
	    if(promise === value)throw TypeError("Promise can't be resolved itself");
	    if(then = isThenable(value)){
	      microtask(function(){
	        var wrapper = {_w: promise, _d: false}; // wrap
	        try {
	          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
	        } catch(e){
	          $reject.call(wrapper, e);
	        }
	      });
	    } else {
	      promise._v = value;
	      promise._s = 1;
	      notify(promise, false);
	    }
	  } catch(e){
	    $reject.call({_w: promise, _d: false}, e); // wrap
	  }
	};
	
	// constructor polyfill
	if(!USE_NATIVE){
	  // 25.4.3.1 Promise(executor)
	  $Promise = function Promise(executor){
	    anInstance(this, $Promise, PROMISE, '_h');
	    aFunction(executor);
	    Internal.call(this);
	    try {
	      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
	    } catch(err){
	      $reject.call(this, err);
	    }
	  };
	  Internal = function Promise(executor){
	    this._c = [];             // <- awaiting reactions
	    this._a = undefined;      // <- checked in isUnhandled reactions
	    this._s = 0;              // <- state
	    this._d = false;          // <- done
	    this._v = undefined;      // <- value
	    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
	    this._n = false;          // <- notify
	  };
	  Internal.prototype = __webpack_require__(72)($Promise.prototype, {
	    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
	    then: function then(onFulfilled, onRejected){
	      var reaction    = newPromiseCapability(speciesConstructor(this, $Promise));
	      reaction.ok     = typeof onFulfilled == 'function' ? onFulfilled : true;
	      reaction.fail   = typeof onRejected == 'function' && onRejected;
	      reaction.domain = isNode ? process.domain : undefined;
	      this._c.push(reaction);
	      if(this._a)this._a.push(reaction);
	      if(this._s)notify(this, false);
	      return reaction.promise;
	    },
	    // 25.4.5.1 Promise.prototype.catch(onRejected)
	    'catch': function(onRejected){
	      return this.then(undefined, onRejected);
	    }
	  });
	  PromiseCapability = function(){
	    var promise  = new Internal;
	    this.promise = promise;
	    this.resolve = ctx($resolve, promise, 1);
	    this.reject  = ctx($reject, promise, 1);
	  };
	}
	
	$export($export.G + $export.W + $export.F * !USE_NATIVE, {Promise: $Promise});
	__webpack_require__(50)($Promise, PROMISE);
	__webpack_require__(73)(PROMISE);
	Wrapper = __webpack_require__(8)[PROMISE];
	
	// statics
	$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
	  // 25.4.4.5 Promise.reject(r)
	  reject: function reject(r){
	    var capability = newPromiseCapability(this)
	      , $$reject   = capability.reject;
	    $$reject(r);
	    return capability.promise;
	  }
	});
	$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
	  // 25.4.4.6 Promise.resolve(x)
	  resolve: function resolve(x){
	    // instanceof instead of internal slot check because we should fix it without replacement native Promise core
	    if(x instanceof $Promise && sameConstructor(x.constructor, this))return x;
	    var capability = newPromiseCapability(this)
	      , $$resolve  = capability.resolve;
	    $$resolve(x);
	    return capability.promise;
	  }
	});
	$export($export.S + $export.F * !(USE_NATIVE && __webpack_require__(74)(function(iter){
	  $Promise.all(iter)['catch'](empty);
	})), PROMISE, {
	  // 25.4.4.1 Promise.all(iterable)
	  all: function all(iterable){
	    var C          = this
	      , capability = newPromiseCapability(C)
	      , resolve    = capability.resolve
	      , reject     = capability.reject;
	    var abrupt = perform(function(){
	      var values    = []
	        , index     = 0
	        , remaining = 1;
	      forOf(iterable, false, function(promise){
	        var $index        = index++
	          , alreadyCalled = false;
	        values.push(undefined);
	        remaining++;
	        C.resolve(promise).then(function(value){
	          if(alreadyCalled)return;
	          alreadyCalled  = true;
	          values[$index] = value;
	          --remaining || resolve(values);
	        }, reject);
	      });
	      --remaining || resolve(values);
	    });
	    if(abrupt)reject(abrupt.error);
	    return capability.promise;
	  },
	  // 25.4.4.4 Promise.race(iterable)
	  race: function race(iterable){
	    var C          = this
	      , capability = newPromiseCapability(C)
	      , reject     = capability.reject;
	    var abrupt = perform(function(){
	      forOf(iterable, false, function(promise){
	        C.resolve(promise).then(capability.resolve, reject);
	      });
	    });
	    if(abrupt)reject(abrupt.error);
	    return capability.promise;
	  }
	});

/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	// getting tag from 19.1.3.6 Object.prototype.toString()
	var cof = __webpack_require__(41)
	  , TAG = __webpack_require__(51)('toStringTag')
	  // ES3 wrong here
	  , ARG = cof(function(){ return arguments; }()) == 'Arguments';
	
	// fallback for IE11 Script Access Denied error
	var tryGet = function(it, key){
	  try {
	    return it[key];
	  } catch(e){ /* empty */ }
	};
	
	module.exports = function(it){
	  var O, T, B;
	  return it === undefined ? 'Undefined' : it === null ? 'Null'
	    // @@toStringTag case
	    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
	    // builtinTag case
	    : ARG ? cof(O)
	    // ES3 arguments fallback
	    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
	};

/***/ },
/* 60 */
/***/ function(module, exports) {

	module.exports = function(it, Constructor, name, forbiddenField){
	  if(!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)){
	    throw TypeError(name + ': incorrect invocation!');
	  } return it;
	};

/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	var ctx         = __webpack_require__(9)
	  , call        = __webpack_require__(62)
	  , isArrayIter = __webpack_require__(63)
	  , anObject    = __webpack_require__(13)
	  , toLength    = __webpack_require__(43)
	  , getIterFn   = __webpack_require__(64)
	  , BREAK       = {}
	  , RETURN      = {};
	var exports = module.exports = function(iterable, entries, fn, that, ITERATOR){
	  var iterFn = ITERATOR ? function(){ return iterable; } : getIterFn(iterable)
	    , f      = ctx(fn, that, entries ? 2 : 1)
	    , index  = 0
	    , length, step, iterator, result;
	  if(typeof iterFn != 'function')throw TypeError(iterable + ' is not iterable!');
	  // fast case for arrays with default iterator
	  if(isArrayIter(iterFn))for(length = toLength(iterable.length); length > index; index++){
	    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
	    if(result === BREAK || result === RETURN)return result;
	  } else for(iterator = iterFn.call(iterable); !(step = iterator.next()).done; ){
	    result = call(iterator, f, step.value, entries);
	    if(result === BREAK || result === RETURN)return result;
	  }
	};
	exports.BREAK  = BREAK;
	exports.RETURN = RETURN;

/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	// call something on iterator step with safe closing on error
	var anObject = __webpack_require__(13);
	module.exports = function(iterator, fn, value, entries){
	  try {
	    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
	  // 7.4.6 IteratorClose(iterator, completion)
	  } catch(e){
	    var ret = iterator['return'];
	    if(ret !== undefined)anObject(ret.call(iterator));
	    throw e;
	  }
	};

/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	// check on default Array iterator
	var Iterators  = __webpack_require__(33)
	  , ITERATOR   = __webpack_require__(51)('iterator')
	  , ArrayProto = Array.prototype;
	
	module.exports = function(it){
	  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
	};

/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	var classof   = __webpack_require__(59)
	  , ITERATOR  = __webpack_require__(51)('iterator')
	  , Iterators = __webpack_require__(33);
	module.exports = __webpack_require__(8).getIteratorMethod = function(it){
	  if(it != undefined)return it[ITERATOR]
	    || it['@@iterator']
	    || Iterators[classof(it)];
	};

/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	// Works with __proto__ only. Old v8 can't work with null proto objects.
	/* eslint-disable no-proto */
	var isObject = __webpack_require__(14)
	  , anObject = __webpack_require__(13);
	var check = function(O, proto){
	  anObject(O);
	  if(!isObject(proto) && proto !== null)throw TypeError(proto + ": can't set as prototype!");
	};
	module.exports = {
	  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
	    function(test, buggy, set){
	      try {
	        set = __webpack_require__(9)(Function.call, __webpack_require__(66).f(Object.prototype, '__proto__').set, 2);
	        set(test, []);
	        buggy = !(test instanceof Array);
	      } catch(e){ buggy = true; }
	      return function setPrototypeOf(O, proto){
	        check(O, proto);
	        if(buggy)O.__proto__ = proto;
	        else set(O, proto);
	        return O;
	      };
	    }({}, false) : undefined),
	  check: check
	};

/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	var pIE            = __webpack_require__(67)
	  , createDesc     = __webpack_require__(20)
	  , toIObject      = __webpack_require__(39)
	  , toPrimitive    = __webpack_require__(19)
	  , has            = __webpack_require__(32)
	  , IE8_DOM_DEFINE = __webpack_require__(15)
	  , gOPD           = Object.getOwnPropertyDescriptor;
	
	exports.f = __webpack_require__(16) ? gOPD : function getOwnPropertyDescriptor(O, P){
	  O = toIObject(O);
	  P = toPrimitive(P, true);
	  if(IE8_DOM_DEFINE)try {
	    return gOPD(O, P);
	  } catch(e){ /* empty */ }
	  if(has(O, P))return createDesc(!pIE.f.call(O, P), O[P]);
	};

/***/ },
/* 67 */
/***/ function(module, exports) {

	exports.f = {}.propertyIsEnumerable;

/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	// 7.3.20 SpeciesConstructor(O, defaultConstructor)
	var anObject  = __webpack_require__(13)
	  , aFunction = __webpack_require__(10)
	  , SPECIES   = __webpack_require__(51)('species');
	module.exports = function(O, D){
	  var C = anObject(O).constructor, S;
	  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
	};

/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	var ctx                = __webpack_require__(9)
	  , invoke             = __webpack_require__(70)
	  , html               = __webpack_require__(49)
	  , cel                = __webpack_require__(18)
	  , global             = __webpack_require__(7)
	  , process            = global.process
	  , setTask            = global.setImmediate
	  , clearTask          = global.clearImmediate
	  , MessageChannel     = global.MessageChannel
	  , counter            = 0
	  , queue              = {}
	  , ONREADYSTATECHANGE = 'onreadystatechange'
	  , defer, channel, port;
	var run = function(){
	  var id = +this;
	  if(queue.hasOwnProperty(id)){
	    var fn = queue[id];
	    delete queue[id];
	    fn();
	  }
	};
	var listener = function(event){
	  run.call(event.data);
	};
	// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
	if(!setTask || !clearTask){
	  setTask = function setImmediate(fn){
	    var args = [], i = 1;
	    while(arguments.length > i)args.push(arguments[i++]);
	    queue[++counter] = function(){
	      invoke(typeof fn == 'function' ? fn : Function(fn), args);
	    };
	    defer(counter);
	    return counter;
	  };
	  clearTask = function clearImmediate(id){
	    delete queue[id];
	  };
	  // Node.js 0.8-
	  if(__webpack_require__(41)(process) == 'process'){
	    defer = function(id){
	      process.nextTick(ctx(run, id, 1));
	    };
	  // Browsers with MessageChannel, includes WebWorkers
	  } else if(MessageChannel){
	    channel = new MessageChannel;
	    port    = channel.port2;
	    channel.port1.onmessage = listener;
	    defer = ctx(port.postMessage, port, 1);
	  // Browsers with postMessage, skip WebWorkers
	  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
	  } else if(global.addEventListener && typeof postMessage == 'function' && !global.importScripts){
	    defer = function(id){
	      global.postMessage(id + '', '*');
	    };
	    global.addEventListener('message', listener, false);
	  // IE8-
	  } else if(ONREADYSTATECHANGE in cel('script')){
	    defer = function(id){
	      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function(){
	        html.removeChild(this);
	        run.call(id);
	      };
	    };
	  // Rest old browsers
	  } else {
	    defer = function(id){
	      setTimeout(ctx(run, id, 1), 0);
	    };
	  }
	}
	module.exports = {
	  set:   setTask,
	  clear: clearTask
	};

/***/ },
/* 70 */
/***/ function(module, exports) {

	// fast apply, http://jsperf.lnkit.com/fast-apply/5
	module.exports = function(fn, args, that){
	  var un = that === undefined;
	  switch(args.length){
	    case 0: return un ? fn()
	                      : fn.call(that);
	    case 1: return un ? fn(args[0])
	                      : fn.call(that, args[0]);
	    case 2: return un ? fn(args[0], args[1])
	                      : fn.call(that, args[0], args[1]);
	    case 3: return un ? fn(args[0], args[1], args[2])
	                      : fn.call(that, args[0], args[1], args[2]);
	    case 4: return un ? fn(args[0], args[1], args[2], args[3])
	                      : fn.call(that, args[0], args[1], args[2], args[3]);
	  } return              fn.apply(that, args);
	};

/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	var global    = __webpack_require__(7)
	  , macrotask = __webpack_require__(69).set
	  , Observer  = global.MutationObserver || global.WebKitMutationObserver
	  , process   = global.process
	  , Promise   = global.Promise
	  , isNode    = __webpack_require__(41)(process) == 'process';
	
	module.exports = function(){
	  var head, last, notify;
	
	  var flush = function(){
	    var parent, fn;
	    if(isNode && (parent = process.domain))parent.exit();
	    while(head){
	      fn   = head.fn;
	      head = head.next;
	      try {
	        fn();
	      } catch(e){
	        if(head)notify();
	        else last = undefined;
	        throw e;
	      }
	    } last = undefined;
	    if(parent)parent.enter();
	  };
	
	  // Node.js
	  if(isNode){
	    notify = function(){
	      process.nextTick(flush);
	    };
	  // browsers with MutationObserver
	  } else if(Observer){
	    var toggle = true
	      , node   = document.createTextNode('');
	    new Observer(flush).observe(node, {characterData: true}); // eslint-disable-line no-new
	    notify = function(){
	      node.data = toggle = !toggle;
	    };
	  // environments with maybe non-completely correct, but existent Promise
	  } else if(Promise && Promise.resolve){
	    var promise = Promise.resolve();
	    notify = function(){
	      promise.then(flush);
	    };
	  // for other environments - macrotask based on:
	  // - setImmediate
	  // - MessageChannel
	  // - window.postMessag
	  // - onreadystatechange
	  // - setTimeout
	  } else {
	    notify = function(){
	      // strange IE + webpack dev server bug - use .call(global)
	      macrotask.call(global, flush);
	    };
	  }
	
	  return function(fn){
	    var task = {fn: fn, next: undefined};
	    if(last)last.next = task;
	    if(!head){
	      head = task;
	      notify();
	    } last = task;
	  };
	};

/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	var hide = __webpack_require__(11);
	module.exports = function(target, src, safe){
	  for(var key in src){
	    if(safe && target[key])target[key] = src[key];
	    else hide(target, key, src[key]);
	  } return target;
	};

/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var global      = __webpack_require__(7)
	  , core        = __webpack_require__(8)
	  , dP          = __webpack_require__(12)
	  , DESCRIPTORS = __webpack_require__(16)
	  , SPECIES     = __webpack_require__(51)('species');
	
	module.exports = function(KEY){
	  var C = typeof core[KEY] == 'function' ? core[KEY] : global[KEY];
	  if(DESCRIPTORS && C && !C[SPECIES])dP.f(C, SPECIES, {
	    configurable: true,
	    get: function(){ return this; }
	  });
	};

/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	var ITERATOR     = __webpack_require__(51)('iterator')
	  , SAFE_CLOSING = false;
	
	try {
	  var riter = [7][ITERATOR]();
	  riter['return'] = function(){ SAFE_CLOSING = true; };
	  Array.from(riter, function(){ throw 2; });
	} catch(e){ /* empty */ }
	
	module.exports = function(exec, skipClosing){
	  if(!skipClosing && !SAFE_CLOSING)return false;
	  var safe = false;
	  try {
	    var arr  = [7]
	      , iter = arr[ITERATOR]();
	    iter.next = function(){ return {done: safe = true}; };
	    arr[ITERATOR] = function(){ return iter; };
	    exec(arr);
	  } catch(e){ /* empty */ }
	  return safe;
	};

/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(76), __esModule: true };

/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	var core  = __webpack_require__(8)
	  , $JSON = core.JSON || (core.JSON = {stringify: JSON.stringify});
	module.exports = function stringify(it){ // eslint-disable-line no-unused-vars
	  return $JSON.stringify.apply($JSON, arguments);
	};

/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(78), __esModule: true };

/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(79);
	module.exports = __webpack_require__(8).Object.keys;

/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.14 Object.keys(O)
	var toObject = __webpack_require__(53)
	  , $keys    = __webpack_require__(37);
	
	__webpack_require__(80)('keys', function(){
	  return function keys(it){
	    return $keys(toObject(it));
	  };
	});

/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	// most Object methods by ES6 should accept primitives
	var $export = __webpack_require__(6)
	  , core    = __webpack_require__(8)
	  , fails   = __webpack_require__(17);
	module.exports = function(KEY, exec){
	  var fn  = (core.Object || {})[KEY] || Object[KEY]
	    , exp = {};
	  exp[KEY] = exec(fn);
	  $export($export.S + $export.F * fails(function(){ fn(1); }), 'Object', exp);
	};

/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	var _iterator = __webpack_require__(82);
	
	var _iterator2 = _interopRequireDefault(_iterator);
	
	var _symbol = __webpack_require__(85);
	
	var _symbol2 = _interopRequireDefault(_symbol);
	
	var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default ? "symbol" : typeof obj; };
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {
	  return typeof obj === "undefined" ? "undefined" : _typeof(obj);
	} : function (obj) {
	  return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
	};

/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(83), __esModule: true };

/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(25);
	__webpack_require__(54);
	module.exports = __webpack_require__(84).f('iterator');

/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	exports.f = __webpack_require__(51);

/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(86), __esModule: true };

/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(87);
	__webpack_require__(24);
	__webpack_require__(96);
	__webpack_require__(97);
	module.exports = __webpack_require__(8).Symbol;

/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// ECMAScript 6 symbols shim
	var global         = __webpack_require__(7)
	  , has            = __webpack_require__(32)
	  , DESCRIPTORS    = __webpack_require__(16)
	  , $export        = __webpack_require__(6)
	  , redefine       = __webpack_require__(31)
	  , META           = __webpack_require__(88).KEY
	  , $fails         = __webpack_require__(17)
	  , shared         = __webpack_require__(46)
	  , setToStringTag = __webpack_require__(50)
	  , uid            = __webpack_require__(47)
	  , wks            = __webpack_require__(51)
	  , wksExt         = __webpack_require__(84)
	  , wksDefine      = __webpack_require__(89)
	  , keyOf          = __webpack_require__(90)
	  , enumKeys       = __webpack_require__(91)
	  , isArray        = __webpack_require__(93)
	  , anObject       = __webpack_require__(13)
	  , toIObject      = __webpack_require__(39)
	  , toPrimitive    = __webpack_require__(19)
	  , createDesc     = __webpack_require__(20)
	  , _create        = __webpack_require__(35)
	  , gOPNExt        = __webpack_require__(94)
	  , $GOPD          = __webpack_require__(66)
	  , $DP            = __webpack_require__(12)
	  , $keys          = __webpack_require__(37)
	  , gOPD           = $GOPD.f
	  , dP             = $DP.f
	  , gOPN           = gOPNExt.f
	  , $Symbol        = global.Symbol
	  , $JSON          = global.JSON
	  , _stringify     = $JSON && $JSON.stringify
	  , PROTOTYPE      = 'prototype'
	  , HIDDEN         = wks('_hidden')
	  , TO_PRIMITIVE   = wks('toPrimitive')
	  , isEnum         = {}.propertyIsEnumerable
	  , SymbolRegistry = shared('symbol-registry')
	  , AllSymbols     = shared('symbols')
	  , OPSymbols      = shared('op-symbols')
	  , ObjectProto    = Object[PROTOTYPE]
	  , USE_NATIVE     = typeof $Symbol == 'function'
	  , QObject        = global.QObject;
	// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
	var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;
	
	// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
	var setSymbolDesc = DESCRIPTORS && $fails(function(){
	  return _create(dP({}, 'a', {
	    get: function(){ return dP(this, 'a', {value: 7}).a; }
	  })).a != 7;
	}) ? function(it, key, D){
	  var protoDesc = gOPD(ObjectProto, key);
	  if(protoDesc)delete ObjectProto[key];
	  dP(it, key, D);
	  if(protoDesc && it !== ObjectProto)dP(ObjectProto, key, protoDesc);
	} : dP;
	
	var wrap = function(tag){
	  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
	  sym._k = tag;
	  return sym;
	};
	
	var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function(it){
	  return typeof it == 'symbol';
	} : function(it){
	  return it instanceof $Symbol;
	};
	
	var $defineProperty = function defineProperty(it, key, D){
	  if(it === ObjectProto)$defineProperty(OPSymbols, key, D);
	  anObject(it);
	  key = toPrimitive(key, true);
	  anObject(D);
	  if(has(AllSymbols, key)){
	    if(!D.enumerable){
	      if(!has(it, HIDDEN))dP(it, HIDDEN, createDesc(1, {}));
	      it[HIDDEN][key] = true;
	    } else {
	      if(has(it, HIDDEN) && it[HIDDEN][key])it[HIDDEN][key] = false;
	      D = _create(D, {enumerable: createDesc(0, false)});
	    } return setSymbolDesc(it, key, D);
	  } return dP(it, key, D);
	};
	var $defineProperties = function defineProperties(it, P){
	  anObject(it);
	  var keys = enumKeys(P = toIObject(P))
	    , i    = 0
	    , l = keys.length
	    , key;
	  while(l > i)$defineProperty(it, key = keys[i++], P[key]);
	  return it;
	};
	var $create = function create(it, P){
	  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
	};
	var $propertyIsEnumerable = function propertyIsEnumerable(key){
	  var E = isEnum.call(this, key = toPrimitive(key, true));
	  if(this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return false;
	  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
	};
	var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key){
	  it  = toIObject(it);
	  key = toPrimitive(key, true);
	  if(it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return;
	  var D = gOPD(it, key);
	  if(D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key]))D.enumerable = true;
	  return D;
	};
	var $getOwnPropertyNames = function getOwnPropertyNames(it){
	  var names  = gOPN(toIObject(it))
	    , result = []
	    , i      = 0
	    , key;
	  while(names.length > i){
	    if(!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META)result.push(key);
	  } return result;
	};
	var $getOwnPropertySymbols = function getOwnPropertySymbols(it){
	  var IS_OP  = it === ObjectProto
	    , names  = gOPN(IS_OP ? OPSymbols : toIObject(it))
	    , result = []
	    , i      = 0
	    , key;
	  while(names.length > i){
	    if(has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true))result.push(AllSymbols[key]);
	  } return result;
	};
	
	// 19.4.1.1 Symbol([description])
	if(!USE_NATIVE){
	  $Symbol = function Symbol(){
	    if(this instanceof $Symbol)throw TypeError('Symbol is not a constructor!');
	    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
	    var $set = function(value){
	      if(this === ObjectProto)$set.call(OPSymbols, value);
	      if(has(this, HIDDEN) && has(this[HIDDEN], tag))this[HIDDEN][tag] = false;
	      setSymbolDesc(this, tag, createDesc(1, value));
	    };
	    if(DESCRIPTORS && setter)setSymbolDesc(ObjectProto, tag, {configurable: true, set: $set});
	    return wrap(tag);
	  };
	  redefine($Symbol[PROTOTYPE], 'toString', function toString(){
	    return this._k;
	  });
	
	  $GOPD.f = $getOwnPropertyDescriptor;
	  $DP.f   = $defineProperty;
	  __webpack_require__(95).f = gOPNExt.f = $getOwnPropertyNames;
	  __webpack_require__(67).f  = $propertyIsEnumerable;
	  __webpack_require__(92).f = $getOwnPropertySymbols;
	
	  if(DESCRIPTORS && !__webpack_require__(30)){
	    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
	  }
	
	  wksExt.f = function(name){
	    return wrap(wks(name));
	  }
	}
	
	$export($export.G + $export.W + $export.F * !USE_NATIVE, {Symbol: $Symbol});
	
	for(var symbols = (
	  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
	  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
	).split(','), i = 0; symbols.length > i; )wks(symbols[i++]);
	
	for(var symbols = $keys(wks.store), i = 0; symbols.length > i; )wksDefine(symbols[i++]);
	
	$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
	  // 19.4.2.1 Symbol.for(key)
	  'for': function(key){
	    return has(SymbolRegistry, key += '')
	      ? SymbolRegistry[key]
	      : SymbolRegistry[key] = $Symbol(key);
	  },
	  // 19.4.2.5 Symbol.keyFor(sym)
	  keyFor: function keyFor(key){
	    if(isSymbol(key))return keyOf(SymbolRegistry, key);
	    throw TypeError(key + ' is not a symbol!');
	  },
	  useSetter: function(){ setter = true; },
	  useSimple: function(){ setter = false; }
	});
	
	$export($export.S + $export.F * !USE_NATIVE, 'Object', {
	  // 19.1.2.2 Object.create(O [, Properties])
	  create: $create,
	  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
	  defineProperty: $defineProperty,
	  // 19.1.2.3 Object.defineProperties(O, Properties)
	  defineProperties: $defineProperties,
	  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
	  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
	  // 19.1.2.7 Object.getOwnPropertyNames(O)
	  getOwnPropertyNames: $getOwnPropertyNames,
	  // 19.1.2.8 Object.getOwnPropertySymbols(O)
	  getOwnPropertySymbols: $getOwnPropertySymbols
	});
	
	// 24.3.2 JSON.stringify(value [, replacer [, space]])
	$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function(){
	  var S = $Symbol();
	  // MS Edge converts symbol values to JSON as {}
	  // WebKit converts symbol values to JSON as null
	  // V8 throws on boxed symbols
	  return _stringify([S]) != '[null]' || _stringify({a: S}) != '{}' || _stringify(Object(S)) != '{}';
	})), 'JSON', {
	  stringify: function stringify(it){
	    if(it === undefined || isSymbol(it))return; // IE8 returns string on undefined
	    var args = [it]
	      , i    = 1
	      , replacer, $replacer;
	    while(arguments.length > i)args.push(arguments[i++]);
	    replacer = args[1];
	    if(typeof replacer == 'function')$replacer = replacer;
	    if($replacer || !isArray(replacer))replacer = function(key, value){
	      if($replacer)value = $replacer.call(this, key, value);
	      if(!isSymbol(value))return value;
	    };
	    args[1] = replacer;
	    return _stringify.apply($JSON, args);
	  }
	});
	
	// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
	$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(11)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
	// 19.4.3.5 Symbol.prototype[@@toStringTag]
	setToStringTag($Symbol, 'Symbol');
	// 20.2.1.9 Math[@@toStringTag]
	setToStringTag(Math, 'Math', true);
	// 24.3.3 JSON[@@toStringTag]
	setToStringTag(global.JSON, 'JSON', true);

/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	var META     = __webpack_require__(47)('meta')
	  , isObject = __webpack_require__(14)
	  , has      = __webpack_require__(32)
	  , setDesc  = __webpack_require__(12).f
	  , id       = 0;
	var isExtensible = Object.isExtensible || function(){
	  return true;
	};
	var FREEZE = !__webpack_require__(17)(function(){
	  return isExtensible(Object.preventExtensions({}));
	});
	var setMeta = function(it){
	  setDesc(it, META, {value: {
	    i: 'O' + ++id, // object ID
	    w: {}          // weak collections IDs
	  }});
	};
	var fastKey = function(it, create){
	  // return primitive with prefix
	  if(!isObject(it))return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
	  if(!has(it, META)){
	    // can't set metadata to uncaught frozen object
	    if(!isExtensible(it))return 'F';
	    // not necessary to add metadata
	    if(!create)return 'E';
	    // add missing metadata
	    setMeta(it);
	  // return object ID
	  } return it[META].i;
	};
	var getWeak = function(it, create){
	  if(!has(it, META)){
	    // can't set metadata to uncaught frozen object
	    if(!isExtensible(it))return true;
	    // not necessary to add metadata
	    if(!create)return false;
	    // add missing metadata
	    setMeta(it);
	  // return hash weak collections IDs
	  } return it[META].w;
	};
	// add metadata on freeze-family methods calling
	var onFreeze = function(it){
	  if(FREEZE && meta.NEED && isExtensible(it) && !has(it, META))setMeta(it);
	  return it;
	};
	var meta = module.exports = {
	  KEY:      META,
	  NEED:     false,
	  fastKey:  fastKey,
	  getWeak:  getWeak,
	  onFreeze: onFreeze
	};

/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	var global         = __webpack_require__(7)
	  , core           = __webpack_require__(8)
	  , LIBRARY        = __webpack_require__(30)
	  , wksExt         = __webpack_require__(84)
	  , defineProperty = __webpack_require__(12).f;
	module.exports = function(name){
	  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
	  if(name.charAt(0) != '_' && !(name in $Symbol))defineProperty($Symbol, name, {value: wksExt.f(name)});
	};

/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	var getKeys   = __webpack_require__(37)
	  , toIObject = __webpack_require__(39);
	module.exports = function(object, el){
	  var O      = toIObject(object)
	    , keys   = getKeys(O)
	    , length = keys.length
	    , index  = 0
	    , key;
	  while(length > index)if(O[key = keys[index++]] === el)return key;
	};

/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	// all enumerable object keys, includes symbols
	var getKeys = __webpack_require__(37)
	  , gOPS    = __webpack_require__(92)
	  , pIE     = __webpack_require__(67);
	module.exports = function(it){
	  var result     = getKeys(it)
	    , getSymbols = gOPS.f;
	  if(getSymbols){
	    var symbols = getSymbols(it)
	      , isEnum  = pIE.f
	      , i       = 0
	      , key;
	    while(symbols.length > i)if(isEnum.call(it, key = symbols[i++]))result.push(key);
	  } return result;
	};

/***/ },
/* 92 */
/***/ function(module, exports) {

	exports.f = Object.getOwnPropertySymbols;

/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	// 7.2.2 IsArray(argument)
	var cof = __webpack_require__(41);
	module.exports = Array.isArray || function isArray(arg){
	  return cof(arg) == 'Array';
	};

/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
	var toIObject = __webpack_require__(39)
	  , gOPN      = __webpack_require__(95).f
	  , toString  = {}.toString;
	
	var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
	  ? Object.getOwnPropertyNames(window) : [];
	
	var getWindowNames = function(it){
	  try {
	    return gOPN(it);
	  } catch(e){
	    return windowNames.slice();
	  }
	};
	
	module.exports.f = function getOwnPropertyNames(it){
	  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
	};


/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
	var $keys      = __webpack_require__(38)
	  , hiddenKeys = __webpack_require__(48).concat('length', 'prototype');
	
	exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O){
	  return $keys(O, hiddenKeys);
	};

/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(89)('asyncIterator');

/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(89)('observable');

/***/ },
/* 98 */
/***/ function(module, exports) {

	'use strict';Object.defineProperty(exports,"__esModule",{value:true});exports.default={ACTION_TYPE_AUDIO:'audio',ACTION_TYPE_VIDEO:'video',ACTION_TYPE_CHAT:'chat',ACTION_TYPE_AUDIO_VIDEO:'audio-video',ACTION_TYPE_SCREEN_SHARING:'screen-sharing',ACTION_TYPE_CALL:'call'};

/***/ },
/* 99 */
/***/ function(module, exports) {

	'use strict';Object.defineProperty(exports,"__esModule",{value:true});exports.default=function(WEBCOMBASE_URL){var _datastore=null,_rooms=null,_reach=null,_webrtc=null,_sipPhoneNumbers=null;function _initChildren(){_rooms=_datastore.child('roomsList');_reach=_datastore.child('reach');_webrtc=_datastore.child('webrtc');_sipPhoneNumbers=_datastore.child('sipPhoneNumbers');}function _init(){_datastore=new Webcom(WEBCOMBASE_URL);_initChildren();}function _setWebcomBaseUrl(p_webcombase_url){_datastore=new Webcom(p_webcombase_url);_initChildren();}function _getWebcomBaseUrl(){if(_datastore){return _datastore.toString();}return undefined;}function _setDatastore(p_datastore){_datastore=p_datastore;_initChildren();}function _getDatastore(){return _datastore;}function _setRooms(p_rooms){_rooms=p_rooms;}function _getRooms(){return _rooms;}function _setReach(p_reach){_reach=p_reach;}function _getReach(){return _reach;}function _setWebrtc(p_webrtc){_webrtc=p_webrtc;}function _getWebrtc(){return _webrtc;}function _setSipPhoneNumbers(p_sipPhoneNumbers){_sipPhoneNumbers=p_sipPhoneNumbers;}function _getSipPhoneNumbers(){return _sipPhoneNumbers;}_init();return {setWebcomBaseUrl:_setWebcomBaseUrl,getWebcomBaseUrl:_getWebcomBaseUrl,setDatastore:_setDatastore,getDatastore:_getDatastore,setRooms:_setRooms,getRooms:_getRooms,setReach:_setReach,getReach:_getReach,setWebrtc:_setWebrtc,getWebrtc:_getWebrtc,setSipPhoneNumbers:_setSipPhoneNumbers,getSipPhoneNumbers:_getSipPhoneNumbers};};

/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _keys=__webpack_require__(77),_keys2=_interopRequireDefault(_keys),_stringify=__webpack_require__(75),_stringify2=_interopRequireDefault(_stringify),_utils=__webpack_require__(101),_utils2=_interopRequireDefault(_utils);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var INVITATION_ONGOING='ONGOING',INVITATION_ACCEPTED='ACCEPTED',INVITATION_REJECTED='REJECTED',INVITATION_CANCELED='CANCELED',DEVICE_STATUS_CONNECTED='CONNECTED',ROOM_STATUS_OPEN='OPEN',reach=function reach(p_me,datarefs){var me=p_me,dataref=datarefs.getReach(),onUserAddedCb=null,onUserChangedCb=null,onUserRemovedCb=null,newInviteCb=null,onRoomInviteChangedCb=null,mOutgoingInvites=[],mIncomingInvitation=[],automaticRejectTimeOut=null,automaticRejectReason=null,mDeviceId=null;function init(){mDeviceId=dataref.child('userList/'+me+'/connectedList/'+_utils2.default.appInstanceId);mDeviceId.onDisconnect().remove();mDeviceId.child('status').set(DEVICE_STATUS_CONNECTED);try{(function(){var description=mDeviceId.child('description');if(_utils2.default.appInstanceId){description.child('appInstanceId').set(_utils2.default.appInstanceId);}var navigatorData={},properties=['appCodeName','appName','appVersion','buildID','cookieEnabled','language','onLine','oscpu','platform','product','productSub','securityPolicy','userAgent','vendor','vendorSub'];properties.forEach(function(property){if(navigator[property]){navigatorData[property]=navigator[property];}});description.child('navigator').set(navigatorData);})();}catch(e){console.error('(ReachSDK::reach::init)failed to get information about device. error='+e);}dataref.child('userList/'+me+'/wasInsideReach').set(true);}function _isConnected(p_userId,p_cb){console.log('(ReachSDK::reach::_isConnected)userId: '+p_userId);dataref.child('userList/'+p_userId+'/connectedList').once('value',function(snapshot){if(p_cb&&typeof p_cb=='function'){p_cb(snapshot.val()!==null);}});}function _isRegistered(p_userId,p_cb){console.log('(ReachSDK::reach::_isRegistered)userId: '+p_userId);dataref.child('userList/'+p_userId+'/wasInsideReach').once('value',function(snapshot){if(p_cb&&typeof p_cb=='function'){p_cb(snapshot.val()!==null);}});}function _setConnectedStatus(p_status){if(mDeviceId){mDeviceId.child('status').set(p_status);}}function _setOnUserAdded(p_cb){if(onUserAddedCb){dataref.child('userList').off('child_added',onUserAddedCb);onUserAddedCb=null;}if(p_cb&&typeof p_cb=='function'){onUserAddedCb=function onUserAddedCb(snapshot){console.log('(ReachSDK::reach::onUserAddedCb) '+snapshot.name()+'='+(0,_stringify2.default)(snapshot.val()));var obj={};obj[snapshot.name()]=snapshot.val();p_cb(obj);};dataref.child('userList').on('child_added',onUserAddedCb);}}function _setOnUserChanged(p_cb){if(onUserChangedCb){dataref.child('userList').off('child_changed',onUserChangedCb);onUserChangedCb=null;}if(p_cb&&typeof p_cb=='function'){onUserChangedCb=function onUserChangedCb(snapshot){console.log('(ReachSDK::reach::onUserChangedCb) '+snapshot.name()+'='+(0,_stringify2.default)(snapshot.val()));var obj={};obj[snapshot.name()]=snapshot.val();p_cb(obj);};dataref.child('userList').on('child_changed',onUserChangedCb);}}function _setOnUserRemoved(p_cb){if(onUserRemovedCb){dataref.child('userList').off('child_removed',onUserRemovedCb);onUserRemovedCb=null;}if(p_cb&&typeof p_cb=='function'){onUserRemovedCb=function onUserRemovedCb(snapshot){console.log('(ReachSDK::reach::onUserRemovedCb) '+snapshot.name()+'='+(0,_stringify2.default)(snapshot.val()));var obj={};obj[snapshot.name()]=snapshot.val();p_cb(obj);};dataref.child('userList').on('child_removed',onUserRemovedCb);}}function _setOnNewRoomInvitation(p_onNewRoomInviteCb){if(newInviteCb){dataref.child('invitationList/'+me).off('child_added',newInviteCb);newInviteCb=null;}if(p_onNewRoomInviteCb&&typeof p_onNewRoomInviteCb=='function'){newInviteCb=function newInviteCb(snapshot){if(snapshot.val().status===INVITATION_ONGOING){(function(){console.log('(ReachSDK::reach::_setOnNewRoomInvitation)new Invite received,id) '+snapshot.name()+',content='+(0,_stringify2.default)(snapshot.val()));var invitationId=snapshot.name();if(!mIncomingInvitation){mIncomingInvitation=[];}if(mIncomingInvitation[invitationId]){if(mIncomingInvitation[invitationId].timeout){clearTimeout(mIncomingInvitation[invitationId].timeout);}delete mIncomingInvitation[invitationId];}mIncomingInvitation[invitationId]={};var obj={};obj[invitationId]=snapshot.val();p_onNewRoomInviteCb(obj);var invitationRef=dataref.child('invitationList/'+me+'/'+invitationId);if(automaticRejectTimeOut){mIncomingInvitation[invitationId].timeout=setTimeout(function(){if(automaticRejectTimeOut){console.log('(ReachSDK::reach::_setOnNewRoomInvitation)automatic reject of Invite received='+(0,_stringify2.default)(snapshot.val()));invitationRef.onDisconnect().cancel();if(automaticRejectReason){invitationRef.update({timestamp_end:Webcom.ServerValue.TIMESTAMP,status:INVITATION_REJECTED,status_info:automaticRejectReason});}else {invitationRef.update({timestamp_end:Webcom.ServerValue.TIMESTAMP,status:INVITATION_REJECTED});}}},automaticRejectTimeOut);}invitationRef.once('child_changed',function(snapshot){if(snapshot&&snapshot.name()==='status'){snapshot.ref().parent().once('value',function(snapshot2){var cb_invitationId=void 0,cb_obj_content=void 0;if(snapshot2){cb_invitationId=snapshot.ref().parent().name();cb_obj_content=snapshot2.val();var cb_obj={};cb_obj[cb_invitationId]=cb_obj_content;if(mIncomingInvitation&&mIncomingInvitation[cb_invitationId]&&mIncomingInvitation[cb_invitationId].timeout){clearTimeout(mIncomingInvitation[cb_invitationId].timeout);}console.log('(ReachSDK::reach::_setOnNewRoomInvitation)Invite changed,id=) '+cb_invitationId+', new content='+(0,_stringify2.default)(cb_obj_content));if(cb_obj&&onRoomInviteChangedCb){onRoomInviteChangedCb(cb_obj);}delete mIncomingInvitation[cb_invitationId];}});}});})();}};dataref.child('invitationList/'+me).on('child_added',newInviteCb);}}function _setOnRoomInvitationChanged(p_onRoomInviteChangedCb){if(onRoomInviteChangedCb){onRoomInviteChangedCb=null;}if(p_onRoomInviteChangedCb&&typeof p_onRoomInviteChangedCb=='function'){onRoomInviteChangedCb=p_onRoomInviteChangedCb;}}function _setNewRoomInvitationTimeout(p_timeout,p_reason){if(automaticRejectTimeOut){automaticRejectTimeOut=null;}if(automaticRejectReason){automaticRejectReason=null;}if(p_timeout&&p_timeout===parseInt(p_timeout,10)&&p_timeout>0){console.log('(ReachSDK::reach::_setNewRoomInvitationTimeout)timeout='+p_timeout);automaticRejectTimeOut=p_timeout;}if(p_reason){automaticRejectReason=p_reason;}}function _isUserPresentInRoom(p_roomId,p_user,p_cb){console.log('(ReachSDK::reach::_isUserPresentInRoom)p_roomId='+p_roomId+' p_user='+p_user);if(!(p_roomId&&typeof p_roomId=='string')){console.error('(ReachSDK::reach::_isUserPresentInRoom)parameter p_roomid is incorrect. Expecting non empty string');return;}if(!(p_user&&typeof p_user=='string')){console.error('(ReachSDK::reach::_isUserPresentInRoom)parameter p_user is incorrect. Expecting non empty string');return;}if(!(p_cb&&typeof p_cb=='function')){console.error('(ReachSDK::reach::_isUserPresentInRoom)parameter p_cb is incorrect. if defined, expecting a function');return;}datarefs.getRooms().child(p_roomId+'/participantList/'+p_user+'/wasInsideRoom').once('value',function(snapshot){var wasPresent=snapshot.val()!==null;console.log('(ReachSDK::reach::_isUserPresentInRoom)p_roomId='+p_roomId+',p_user='+p_user+',result='+wasPresent);p_cb(wasPresent,p_roomId,p_user);});}function _cancelInvitation(p_roomId,p_guestIds,p_cb){if(!(p_roomId&&typeof p_roomId=='string')){console.error('(ReachSDK::reach::_cancelInvitation)parameter p_roomid is incorrect. Expecting non empty string');return;}if(p_guestIds&&!p_guestIds instanceof Array){console.error('(ReachSDK::reach::_cancelInvitation)parameter p_guestIds is incorrect. Expecting an Array');return;}console.log(' (ReachSDK::reach::_cancelInvitation)p_roomId='+p_roomId+', p_guestIds='+(0,_stringify2.default)(p_guestIds));if(mOutgoingInvites&&mOutgoingInvites[p_roomId]){if(p_guestIds){p_guestIds.forEach(function(guestId,i){if(!(guestId&&typeof guestId=='string')){console.error('(ReachSDK::reach::inviteToRoom)parameter p_guestIds['+i+'] is incorrect. Expecting non empty string');}else if(mOutgoingInvites[p_roomId][guestId]){if(mOutgoingInvites[p_roomId][guestId].InviteDataref){mOutgoingInvites[p_roomId][guestId].InviteDataref.onDisconnect().cancel();if(mOutgoingInvites[p_roomId][guestId].InviteChangedCb&&typeof mOutgoingInvites[p_roomId][guestId].InviteChangedCb=='function'){mOutgoingInvites[p_roomId][guestId].InviteDataref.off('child_changed',mOutgoingInvites[p_roomId][guestId].InviteChangedCb);}mOutgoingInvites[p_roomId][guestId].InviteDataref.once('value',function(dataSnapshot){var cb_status=void 0,cb_guestId=void 0,cb_roomId=void 0;if(dataSnapshot&&dataSnapshot.val()){cb_status=dataSnapshot.val().status;cb_roomId=dataSnapshot.val().room;cb_guestId=dataSnapshot.ref().parent().name();if(cb_status&&cb_status===INVITATION_ONGOING){mOutgoingInvites[cb_roomId][cb_guestId].InviteDataref.update({timestamp_end:Webcom.ServerValue.TIMESTAMP,status:INVITATION_CANCELED});if(mOutgoingInvites[cb_roomId][cb_guestId].statusChangedCb&&typeof mOutgoingInvites[cb_roomId][cb_guestId].statusChangedCb=='function'){mOutgoingInvites[cb_roomId][cb_guestId].statusChangedCb(cb_roomId,cb_guestId,INVITATION_CANCELED);}console.log('(ReachSDK::reach::_cancelInvitation)deleting Invite to room '+cb_roomId+' for invitee '+cb_guestId);}else {console.warn('(ReachSDK::reach::_cancelInvitation)cannot delete intivation to room '+cb_roomId+' for guest '+cb_guestId+' Invitation has been removed/rejected/accepted');}}delete mOutgoingInvites[p_roomId][guestId];if(p_cb&&typeof p_cb=='function'){p_cb(guestId);}});}else {delete mOutgoingInvites[p_roomId][guestId];if(p_cb&&typeof p_cb=='function'){p_cb(guestId);}}}else {if(p_cb&&typeof p_cb=='function'){p_cb(guestId);}}});}else {(0,_keys2.default)(mOutgoingInvites[p_roomId]).forEach(function(invitee){_cancelInvitation(p_roomId,[invitee],p_cb);});}}else {console.warn('(ReachSDK::reach::_cancelInvitation) Invite to room '+p_roomId+' not found');}}function _inviteToRoom(p_roomId,p_guestIds,p_topic,p_statusChangedCb){if(!(p_roomId&&typeof p_roomId=='string')){console.error('(ReachSDK::reach::inviteToRoom)parameter p_roomid is incorrect. Expecting non empty string');return;}if(!(p_topic&&typeof p_topic=='string')){console.error('(ReachSDK::reach::inviteToRoom)parameter p_topic is incorrect. Expecting non empty string');return;}if(p_statusChangedCb&&typeof p_statusChangedCb!='function'){console.warn('(ReachSDK::reach::inviteToRoom)parameter p_statusChangedCb is incorrect. if defined, expecting a function');}if(!(p_guestIds&&p_guestIds instanceof Array)){console.error('(ReachSDK::reach::inviteToRoom)parameter p_guestIds is incorrect. Expecting an Array');return;}datarefs.getRooms().child(p_roomId).child('commonDataList').update({status:ROOM_STATUS_OPEN,owner:me});var _isUserPresentInRoomCb=function _isUserPresentInRoomCb(isAlreadyPresent,p_roomId2,p_guestId2){if(!isAlreadyPresent){datarefs.getRooms().child(p_roomId2+'/participantList/'+p_guestId2).update({connected:false,wasInsideRoom:false});}},_InviteChangedCb=function _InviteChangedCb(snapshot){console.log('(ReachSDK::reach::inviteToRoom::_InviteChangedCb)');if(snapshot&&snapshot.name()==='status'){var cb_guestId2=snapshot.ref().parent().parent().name();console.log('(ReachSDK::reach::inviteToRoom::_InviteChangedCb)cb_guestId2='+cb_guestId2);if(mOutgoingInvites&&mOutgoingInvites[p_roomId]&&mOutgoingInvites[p_roomId][cb_guestId2]&&mOutgoingInvites[p_roomId][cb_guestId2].InviteChangedCb){mOutgoingInvites[p_roomId][cb_guestId2].InviteDataref.off('child_changed',mOutgoingInvites[p_roomId][cb_guestId2].InviteChangedCb);}snapshot.ref().parent().once('value',function(snapshot2){var cb_status=void 0,cb_guestId=void 0,cb_roomId=void 0,cb_status_info=void 0;if(snapshot2){cb_status=snapshot2.val().status;cb_roomId=snapshot2.val().room;cb_status_info=snapshot2.val().status_info;cb_guestId=snapshot2.ref().parent().name();console.log('(ReachSDK::reach::inviteToRoom::_InviteChangedCb)roomId='+cb_roomId+' invitee='+cb_guestId+' new invitation status='+cb_status+' status info='+cb_status_info);if(mOutgoingInvites&&mOutgoingInvites[cb_roomId]&&mOutgoingInvites[cb_roomId][cb_guestId]&&mOutgoingInvites[cb_roomId][cb_guestId].InviteDataref){mOutgoingInvites[cb_roomId][cb_guestId].InviteDataref.onDisconnect().cancel();if(mOutgoingInvites[cb_roomId][cb_guestId].statusChangedCb&&typeof mOutgoingInvites[cb_roomId][cb_guestId].statusChangedCb=='function'){mOutgoingInvites[cb_roomId][cb_guestId].statusChangedCb(cb_roomId,cb_guestId,cb_status,cb_status_info);}else {console.warn('(ReachSDK::reach::inviteToRoom::_InviteChangedCb)cannot retrieve mathing p_statusChangedCb');}delete mOutgoingInvites[cb_roomId][cb_guestId];}else {console.warn('(ReachSDK::reach::inviteToRoom::_InviteChangedCb)cannot retrieve mathing mOutgoingInvite');}}else {console.warn('(ReachSDK::reach::inviteToRoom::_InviteChangedCb)cannot retrieve invitation');}});}};p_guestIds.forEach(function(mGuestId,i){if(!(mGuestId&&typeof mGuestId=='string')){console.error('(ReachSDK::reach::inviteToRoom)parameter p_guestIds['+i+'] is incorrect. Expecting non empty string');}else {console.log('(ReachSDK::reach::inviteToRoom)roomId='+p_roomId+' invitee='+mGuestId.toString());if(mOutgoingInvites[p_roomId]&&mOutgoingInvites[p_roomId][mGuestId]){_cancelInvitation(p_roomId,[mGuestId],function(p_guestId){if(p_guestId&&p_guestId===mGuestId){_inviteToRoom(p_roomId,[p_guestId],p_topic,p_statusChangedCb);}});return;}if(!mOutgoingInvites[p_roomId]){mOutgoingInvites[p_roomId]=[];}mOutgoingInvites[p_roomId][mGuestId]={};_isUserPresentInRoom(p_roomId,mGuestId,_isUserPresentInRoomCb);mOutgoingInvites[p_roomId][mGuestId].InviteDataref=dataref.child('invitationList').child(mGuestId).push({from:me,room:p_roomId,timestamp_creation:Webcom.ServerValue.TIMESTAMP,topic:p_topic,status:INVITATION_ONGOING});console.log('(ReachSDK::reach::inviteToRoom)InviteDataref='+mOutgoingInvites[p_roomId][mGuestId].InviteDataref.toString());mOutgoingInvites[p_roomId][mGuestId].InviteChangedCb=_InviteChangedCb;mOutgoingInvites[p_roomId][mGuestId].InviteDataref.on('child_changed',mOutgoingInvites[p_roomId][mGuestId].InviteChangedCb);mOutgoingInvites[p_roomId][mGuestId].statusChangedCb=p_statusChangedCb;mOutgoingInvites[p_roomId][mGuestId].InviteDataref.onDisconnect().update({timestamp_end:Webcom.ServerValue.TIMESTAMP,status:INVITATION_CANCELED});}});}function _acceptInvitation(p_invitation){var inviteId=(0,_keys2.default)(p_invitation)[0];if(!inviteId){console.error('(ReachSDK::reach::_acceptInvitation)parameter p_invitation is incorrect. cannot get invitation Id');return;}if(!p_invitation[inviteId]){console.error('(ReachSDK::reach::_acceptInvitation)parameter p_invitation is incorrect. cannot get invitation data');return;}dataref.child('invitationList/'+me+'/'+inviteId).once('value',function(dataSnapshot){var cb_status=void 0,cb_guestId=void 0,cb_invitationId=void 0;if(dataSnapshot&&dataSnapshot.val()){cb_invitationId=dataSnapshot.name();cb_status=dataSnapshot.val().status;cb_guestId=dataSnapshot.ref().parent().name();if(cb_status&&cb_status===INVITATION_ONGOING){console.log('(ReachSDK::reach::_acceptInvitation)inviteId='+inviteId+',data='+(0,_stringify2.default)(p_invitation[inviteId]));dataref.child('invitationList/'+cb_guestId+'/'+cb_invitationId).update({timestamp_end:Webcom.ServerValue.TIMESTAMP,status:INVITATION_ACCEPTED});}else {console.warn('(ReachSDK::reach::_acceptInvitation)inviteId='+cb_invitationId+',data='+(0,_stringify2.default)(p_invitation[inviteId])+', cannot be accepted. It has been removed or canceled');}}});}function _rejectInvitation(p_invitation,p_reason){var inviteId=(0,_keys2.default)(p_invitation)[0];if(!inviteId){console.error('(ReachSDK::reach::_rejectInvitation)parameter p_invitation is incorrect. cannot get invitation Id');return;}if(!p_invitation[inviteId]){console.error('(ReachSDK::reach::_rejectInvitation)parameter p_invitation is incorrect. cannot get invitation data');return;}dataref.child('invitationList/'+me+'/'+inviteId).once('value',function(dataSnapshot){var cb_status=void 0,cb_guestId=void 0,cb_invitationId=void 0;if(dataSnapshot&&dataSnapshot.val()){cb_invitationId=dataSnapshot.name();cb_status=dataSnapshot.val().status;cb_guestId=dataSnapshot.ref().parent().name();if(cb_status&&cb_status===INVITATION_ONGOING){console.log('(ReachSDK::reach::_rejectInvitation)inviteId='+inviteId+',data='+(0,_stringify2.default)(p_invitation[inviteId]));if(p_reason){dataref.child('invitationList/'+cb_guestId+'/'+cb_invitationId).update({timestamp_end:Webcom.ServerValue.TIMESTAMP,status_info:p_reason,status:INVITATION_REJECTED});}else {dataref.child('invitationList/'+cb_guestId+'/'+cb_invitationId).update({timestamp_end:Webcom.ServerValue.TIMESTAMP,status:INVITATION_REJECTED});}}else {console.warn('(ReachSDK::reach::_rejectInvitation)inviteId='+cb_invitationId+',data='+(0,_stringify2.default)(p_invitation[inviteId])+', cannot be rejected. It has been removed or canceled');}}});}function _isRoomActive(p_invitation,p_cb){if(p_invitation&&p_cb&&typeof p_cb=='function'){(function(){var inviteId=(0,_keys2.default)(p_invitation)[0];console.log('(ReachSDK::reach::_isRoomActive)inviteId='+inviteId);var roomId=p_invitation[inviteId].room;datarefs.getRooms().child(roomId+'/commonDataList/status').once('value',function(snapshot){var opened=snapshot&&snapshot.val()&&snapshot.val()===ROOM_STATUS_OPEN;console.log('(ReachSDK::reach::_isRoomActive)inviteId='+inviteId+' result='+opened);p_cb(opened);});})();}}function _archiveInvitations(p_userId,p_cb){console.log('(ReachSDK::reach::_archiveInvitations)userId='+p_userId);dataref.child('invitationList/'+me).once('value',function(snapshot){if(snapshot&&snapshot.hasChildren()){(function(){var nbChildren=snapshot.numChildren(),nbChildrenProcessed=0;snapshot.forEach(function(childSnapshot){if(childSnapshot&&childSnapshot.val()){console.log('(ReachSDK::reach::_archiveInvitations)userId='+p_userId+' inviteId='+childSnapshot.name());if(childSnapshot.val().status===INVITATION_REJECTED||childSnapshot.val().status===INVITATION_CANCELED){dataref.child('invitationListHistory/'+p_userId+'/'+childSnapshot.name()).update(childSnapshot.val());childSnapshot.ref().remove();nbChildrenProcessed++;if(nbChildrenProcessed>=nbChildren&&p_cb&&typeof p_cb=='function'){p_cb();}}else {var inviteData={};inviteData[childSnapshot.name()]=childSnapshot.val();_isRoomActive(inviteData,function(isActive){if(isActive){nbChildrenProcessed++;if(nbChildrenProcessed>=nbChildren&&p_cb&&typeof p_cb=='function'){p_cb();}}else {if(childSnapshot.val().status===INVITATION_ONGOING){var newValue=childSnapshot.val();newValue.status=INVITATION_CANCELED;dataref.child('invitationListHistory/'+p_userId+'/'+childSnapshot.name()).set(newValue);}else {dataref.child('invitationListHistory/'+p_userId+'/'+childSnapshot.name()).set(childSnapshot.val());}childSnapshot.ref().remove();nbChildrenProcessed++;if(nbChildrenProcessed>=nbChildren&&p_cb&&typeof p_cb=='function'){p_cb();}}});}}else {if(p_cb&&typeof p_cb=='function'){p_cb();}}});})();}else {if(p_cb&&typeof p_cb=='function'){p_cb();}}});}function _close(){console.log('(ReachSDK::reach::_close)');if(newInviteCb){dataref.child('invitationList').child(me).off('child_added',newInviteCb);newInviteCb=null;}if(onUserAddedCb){dataref.child('userList').off('child_added',onUserAddedCb);onUserAddedCb=null;}if(onUserChangedCb){dataref.child('userList').off('child_changed',onUserChangedCb);onUserChangedCb=null;}if(onUserRemovedCb){dataref.child('userList').off('child_removed',onUserRemovedCb);onUserRemovedCb=null;}if(mOutgoingInvites){mOutgoingInvites.forEach(function(roomId){mOutgoingInvites[roomId].forEach(function(invitee){if(invitee.InviteDataref){invitee.InviteDataref.onDisconnect().cancel();invitee.InviteDataref.update({status:INVITATION_CANCELED,timestamp_end:Webcom.ServerValue.TIMESTAMP});}});});mOutgoingInvites=[];}if(automaticRejectTimeOut){automaticRejectTimeOut=null;}if(automaticRejectReason){automaticRejectReason=null;}if(mDeviceId){mDeviceId.remove();mDeviceId=null;}}function _isUserPresent(roomId,userId,callback){console.log('(ReachSDK::reach::_isUserPresent) userId='+userId);if(!(userId&&typeof userId=='string')){console.error('(ReachSDK::reach::_isUserPresent)parameter userId is incorrect. Expecting non empty string');return;}if(!(callback&&typeof callback=='function')){console.error('(ReachSDK::reach::_isUserPresent)parameter callback is incorrect. if defined, expecting a function');return;}datarefs.getRooms().child(roomId+'/participantList/'+userId+'/connected').once('value',function(snapshot){var isConnected=snapshot.val();console.log('(ReachSDK::reach::_isUserPresent)userId='+userId+',result='+isConnected);callback(!!isConnected);});}init();return {getMe:function getMe(){return me;},isConnected:_isConnected,isRegistered:_isRegistered,setConnectedStatus:_setConnectedStatus,setOnUserAdded:_setOnUserAdded,setOnUserChanged:_setOnUserChanged,setOnUserRemoved:_setOnUserRemoved,inviteToRoom:_inviteToRoom,cancelInvitation:_cancelInvitation,setOnNewRoomInvitation:_setOnNewRoomInvitation,setOnRoomInvitationChanged:_setOnRoomInvitationChanged,setNewRoomInvitationTimeout:_setNewRoomInvitationTimeout,archiveMyInvitations:function archiveMyInvitations(p_cb){return _archiveInvitations(me,p_cb);},acceptInvitation:_acceptInvitation,rejectInvitation:_rejectInvitation,on:function on(p_evt,p_cb){switch(p_evt){case 'newRoomInvitation':_setOnNewRoomInvitation(p_cb);break;case 'roomInvitationChanged':_setOnRoomInvitationChanged(p_cb);break;case 'userAdded':_setOnUserAdded(p_cb);break;case 'userChanged':_setOnUserChanged(p_cb);break;case 'userRemoved':_setOnUserRemoved(p_cb);break;default:console.error('reach.set: no such event');return -1;}},close:_close,isUserPresent:_isUserPresent};};exports.default=reach;

/***/ },
/* 101 */
/***/ function(module, exports) {

	"use strict";Object.defineProperty(exports,"__esModule",{value:true});var utils=function(){function s4(){return Math.floor((1+Math.random())*0x10000).toString(16).substring(1);}function _guid(){return ""+s4()+s4()+"-"+s4()+"-"+s4()+"-"+s4()+"-"+s4()+s4()+s4();}var _appInstanceId=_guid();return {appInstanceId:_appInstanceId};}();exports.default=utils;

/***/ },
/* 102 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _keys=__webpack_require__(77),_keys2=_interopRequireDefault(_keys),_stringify=__webpack_require__(75),_stringify2=_interopRequireDefault(_stringify);exports.default=function(p_me,p_roomId,datarefs,webrtcmngr){var roomId=p_roomId,me=p_me,dataref=datarefs.getRooms().child(roomId),roomWebrtcStacks={},mAvailableStreams=[],mStreams=[],mMutedStreams=[],remoteUnpublishedCb=null,instantMessageListCb=null,publishedMediaListCb=null,publishedMediaListCbForAvailableStream=null,unPublishedMediaListCb=null,unPublishedMediaListCbForAvailableStream=null,participantListJoinAddedCb=null,participantListJoinChangedCb=null,participantListLeaveCb=null;function _addAvailableStream(data){console.log('(ReachSDK::room['+roomId+']::_addAvailableStream)data='+(0,_stringify2.default)(data));mAvailableStreams.push(data);}function _removeAvailableStream(streamId){console.log('(ReachSDK::room['+roomId+']::_removeAvailableStream)streamId='+streamId);if(mAvailableStreams&&streamId){for(var i=mAvailableStreams.length-1;i>=0;i--){if(mAvailableStreams[i]&&(0,_keys2.default)(mAvailableStreams[i])[0]&&(0,_keys2.default)(mAvailableStreams[i])[0]===streamId){delete mAvailableStreams[i];}}}}function initWebcomListener(){if(!publishedMediaListCbForAvailableStream){publishedMediaListCbForAvailableStream=function publishedMediaListCbForAvailableStream(snapshot){var obj={},name=snapshot.name(),value=snapshot.val();console.log('(ReachSDK::room['+roomId+']::onPublishedStreamForAvailableStream)stream='+(0,_stringify2.default)(value));obj[name]=value;obj[name].roomId=roomId;_addAvailableStream(obj);};dataref.child('publishedMediaList').on('child_added',publishedMediaListCbForAvailableStream);}if(!unPublishedMediaListCbForAvailableStream){unPublishedMediaListCbForAvailableStream=function unPublishedMediaListCbForAvailableStream(snapshot){var streamId=snapshot.name();console.log('(ReachSDK::room['+roomId+']::onUnPublishedStreamForAvailableStream)stream='+streamId);_removeAvailableStream(streamId);};dataref.child('publishedMediaList').on('child_removed',unPublishedMediaListCbForAvailableStream);}}function init(){dataref.child('participantList/'+me).update({connected:true,wasInsideRoom:true});dataref.child('participantList/'+me+'/connected').onDisconnect().set(false);initWebcomListener();}function _getRoomId(){return roomId;}function _getMe(){return me;}function _setOnParticipantJoin(p_cb){var participantListRef=dataref.child('participantList');if(participantListJoinAddedCb){participantListRef.off('child_added',participantListJoinAddedCb);participantListJoinAddedCb=null;}if(participantListJoinChangedCb){participantListRef.off('child_changed',participantListJoinChangedCb);participantListJoinChangedCb=null;}if(p_cb&&typeof p_cb=='function'){participantListJoinAddedCb=function participantListJoinAddedCb(snapshot){var user=snapshot.name();if(snapshot.val()&&snapshot.val().connected&&snapshot.val().wasInsideRoom){console.log('(ReachSDK::room['+roomId+']::_setOnParticipantJoin) user has joined: '+user);p_cb(user);}};participantListRef.on('child_added',participantListJoinAddedCb);participantListJoinChangedCb=function participantListJoinChangedCb(snapshot){var user=snapshot.name();if(snapshot.val()&&snapshot.val().connected&&snapshot.val().wasInsideRoom){console.log('(ReachSDK::room['+roomId+']::_setOnParticipantJoin) user has joined: '+user);p_cb(user);}};participantListRef.on('child_changed',participantListJoinChangedCb);}else {console.error('(ReachSDK::room['+roomId+']::_setOnParticipantJoin)parameter incorrect. Expected function');}}function _setOnParticipantLeave(p_cb){if(participantListLeaveCb){dataref.child('participantList').off('child_changed',participantListLeaveCb);participantListLeaveCb=null;}if(p_cb&&typeof p_cb=='function'){participantListLeaveCb=function participantListLeaveCb(snapshot){var user=snapshot.name();if(snapshot.val()&&!snapshot.val().connected&&snapshot.val().wasInsideRoom){console.log('(ReachSDK::room['+roomId+']::_setOnParticipantLeave) user has left: '+user);p_cb(user);}};dataref.child('participantList').on('child_changed',participantListLeaveCb);}else {console.error('(ReachSDK::room['+roomId+']::_setOnParticipantLeave)parameter incorrect. Expected function');}}function _sendInstantMessage(p_message){if(p_message!==''){console.log('(ReachSDK::room['+roomId+']::sendInstantMessage)message='+p_message);dataref.child('instantMessageList').push({from:me,message:p_message,timestamp:Webcom.ServerValue.TIMESTAMP});}}function _setOnInstantMessage(p_cb){if(instantMessageListCb){dataref.child('instantMessageList').off('child_added',instantMessageListCb);instantMessageListCb=null;}if(p_cb&&typeof p_cb=='function'){instantMessageListCb=function instantMessageListCb(snapshot){var obj=snapshot.val();console.log('(ReachSDK::room['+roomId+']::_setOnInstantMessage)receive InstantMessage='+(0,_stringify2.default)(obj));p_cb(obj);};dataref.child('instantMessageList').on('child_added',instantMessageListCb);}else {console.error('(ReachSDK::room['+roomId+']::_setOnInstantMessage)parameter incorrect. Expected function');}}function _publishStream(streamId,localVid,p_actionType,getLocalStreamCb){console.log('(ReachSDK::room['+roomId+']::publishStream)roomId='+roomId+',streamId='+streamId+',me='+me+',actionType='+p_actionType);if(!(streamId&&typeof streamId=='string')){console.error('(ReachSDK::reach::inviteToRoom)parameter streamId is incorrect. Expecting non empty string');return;}var localDataRef=dataref.child('publishedMediaList').child(streamId),remoteDataRef=localDataRef.child('subscribersList'),pubAndSubscribe=function pubAndSubscribe(){localDataRef.set({from:me,appInstanceId:_utils2.default.appInstanceId,actionType:p_actionType});localDataRef.onDisconnect().remove();var addSubscribersListCb=function addSubscribersListCb(snapshot){var remoteAppInstanceId=snapshot.name(),data=snapshot.val(),_subscriberId=data.userId,_peercoId=data.peercoId,_peercoRef=data.peercoRef,isAudioMute=mMutedStreams[streamId]&&mMutedStreams[streamId].audio,isVideoMute=mMutedStreams[streamId]&&mMutedStreams[streamId].video,streamStackId=streamId+'_pub';console.log('(ReachSDK::room['+roomId+']::publishStream::addSubscribersListCb)subscriber '+_subscriberId+' to stream '+streamId+' added '+(0,_stringify2.default)(data));if(!roomWebrtcStacks[streamStackId]){roomWebrtcStacks[streamStackId]=[];}var mStackId=webrtcmngr.createWebrtc(localVid,remoteAppInstanceId,function(){console.log('(ReachSDK::room['+roomId+']::publishStream::addSubscribersListCb)subscriber '+_subscriberId+' to stream '+streamId+' connection lost');},true,p_actionType,_peercoId,_peercoRef,isAudioMute,isVideoMute);roomWebrtcStacks[streamStackId].push({stackId:mStackId,subscriberId:_subscriberId,isPublish:true,peercoId:_peercoId,peercoRef:_peercoRef,streamId:streamId});},removeSubscribersListCb=function removeSubscribersListCb(snapshot){var subscriberId=snapshot.val().userId,streamStacks=roomWebrtcStacks[streamId+'_pub'];if(subscriberId&&streamStacks){console.log('(ReachSDK::room['+roomId+']::publishStream::removeSubscribersListCb)subscriber '+subscriberId+' to stream '+streamId+' removed');for(var i=streamStacks.length-1;i>=0;i--){if(streamStacks[i].subscriberId===subscriberId){webrtcmngr.closeWebrtc(streamStacks[i].stackId,true);roomWebrtcStacks[streamId+'_pub'].splice(i,1);}}}};mStreams[streamId]={addSubscribersListCb:addSubscribersListCb,removeSubscribersListCb:removeSubscribersListCb};remoteDataRef.on('child_added',addSubscribersListCb);remoteDataRef.on('child_removed',removeSubscribersListCb);};if(p_actionType){if(p_actionType===_actions2.default.ACTION_TYPE_VIDEO){_localstream2.default.connectLocalVideoStream(localVid,pubAndSubscribe,getLocalStreamCb);}else if(p_actionType===_actions2.default.ACTION_TYPE_AUDIO){_localstream2.default.connectLocalAudioStream(localVid,pubAndSubscribe,getLocalStreamCb);}else if(p_actionType===_actions2.default.ACTION_TYPE_AUDIO_VIDEO){_localstream2.default.connectLocalAudioVideoStream(localVid,pubAndSubscribe,getLocalStreamCb);}}}function _setOnPublishedStream(p_cb){if(publishedMediaListCb){dataref.child('publishedMediaList').off('child_added',publishedMediaListCb);publishedMediaListCb=null;}if(p_cb&&typeof p_cb=='function'){publishedMediaListCb=function publishedMediaListCb(snapshot){var obj={},name=snapshot.name();obj[name]=snapshot.val();obj[name].roomId=roomId;p_cb(obj);};dataref.child('publishedMediaList').on('child_added',publishedMediaListCb);}else {console.error('(ReachSDK::room['+roomId+']::_setOnPublishedStream)parameter incorrect. Expected function');}}function _unPublishStream(streamId,callback){console.log('(ReachSDK::room['+roomId+']::unPublishStream)streamId '+streamId);var localDataRef=dataref.child('publishedMediaList/'+streamId),remoteDataRef=localDataRef.child('subscribersList'),streamStacksId=streamId+'_pub';if(mStreams[streamId]&&mStreams[streamId].addSubscribersListCb){remoteDataRef.off('child_added',mStreams[streamId].addSubscribersListCb);}if(mStreams[streamId]&&mStreams[streamId].removeSubscribersListCb){remoteDataRef.off('child_removed',mStreams[streamId].removeSubscribersListCb);}delete mStreams[streamId];delete mMutedStreams[streamId];localDataRef.onDisconnect().cancel();localDataRef.remove();if(roomWebrtcStacks[streamStacksId]&&roomWebrtcStacks[streamStacksId].length>0){(function(){var nbStack=roomWebrtcStacks[streamStacksId].length,closeCb=function closeCb(){nbStack--;if(nbStack<1){delete roomWebrtcStacks[streamStacksId];if(callback&&typeof callback=='function'){callback();}}};for(var i=nbStack-1;i>=0;i--){webrtcmngr.closeWebrtc(roomWebrtcStacks[streamStacksId][i].stackId,true,closeCb);}_localstream2.default.close();})();}else {delete roomWebrtcStacks[streamStacksId];if(callback&&typeof callback=='function'){callback();}}}function _setOnUnPublishedStream(p_cb){if(unPublishedMediaListCb){dataref.child('publishedMediaList').off('child_removed',unPublishedMediaListCb);unPublishedMediaListCb=null;}if(p_cb&&typeof p_cb=='function'){unPublishedMediaListCb=function unPublishedMediaListCb(snapshot){p_cb(snapshot.name());};dataref.child('publishedMediaList').on('child_removed',unPublishedMediaListCb);}else {console.error('(ReachSDK::room['+roomId+']::_setOnUnPublishedStream)parameter incorrect. Expected function');}}function _subscribeToStream(streamData,remoteVid,getRemoteStreamCb){var streamId=(0,_keys2.default)(streamData)[0],actionType=streamData[streamId].actionType;console.log('(ReachSDK::room['+roomId+']::subscribeToStream)streamId '+streamId);if(mStreams&&mStreams[streamId]){if(actionType){if(actionType===_actions2.default.ACTION_TYPE_VIDEO){_localstream2.default.connectLocalVideoStream(remoteVid,getRemoteStreamCb);}else if(actionType===_actions2.default.ACTION_TYPE_AUDIO){_localstream2.default.connectLocalAudioStream(remoteVid,getRemoteStreamCb);}else if(actionType===_actions2.default.ACTION_TYPE_AUDIO_VIDEO){_localstream2.default.connectLocalAudioVideoStream(remoteVid,getRemoteStreamCb);}}return streamId;}var appInstanceId=streamData[streamId].appInstanceId,localDataRef=dataref.child('publishedMediaList').child(streamId),remoteDataRef=localDataRef.child('subscribersList'),streamStacksId=streamId+'_sub',_peercoId=void 0,_peercoRef=void 0;if(!roomWebrtcStacks[streamStacksId]){roomWebrtcStacks[streamStacksId]=[];}else if(roomWebrtcStacks[streamStacksId]&&roomWebrtcStacks[streamStacksId][0]&&roomWebrtcStacks[streamStacksId][0].peercoId){_peercoId=roomWebrtcStacks[streamStacksId][0].peercoId;}var getRandomIntInclusive=function getRandomIntInclusive(min,max){return Math.floor(Math.random()*(max-min+1))+min;};if(!_peercoId){_peercoId=Math.floor(Date.now()).toString()+getRandomIntInclusive(0,1000000);}_peercoRef=datarefs.getWebrtc().push().name();remoteDataRef.child(_utils2.default.appInstanceId).set({ts:Webcom.ServerValue.TIMESTAMP,userId:me,peercoId:_peercoId,peercoRef:_peercoRef});var isAudioMute=mMutedStreams[streamId]&&mMutedStreams[streamId].audio,isVideoMute=mMutedStreams[streamId]&&mMutedStreams[streamId].video,mStackId=webrtcmngr.createWebrtc(remoteVid,appInstanceId,function(){},false,actionType,_peercoId,_peercoRef,isAudioMute,isVideoMute,getRemoteStreamCb);if(!remoteUnpublishedCb){remoteUnpublishedCb=function remoteUnpublishedCb(snapshot){var streamId=snapshot.val().from+'-stream',removedStreamId=streamId+'_sub';console.log('(ReachSDK::room['+roomId+']::remoteUnpublishedCb)streamId '+removedStreamId);if(roomWebrtcStacks[removedStreamId]){var i=0;while(i<roomWebrtcStacks[removedStreamId].length){webrtcmngr.closeWebrtc(roomWebrtcStacks[removedStreamId][i].stackId,false);i++;}delete roomWebrtcStacks[removedStreamId];}};dataref.child('publishedMediaList').on('child_removed',remoteUnpublishedCb);}roomWebrtcStacks[streamStacksId].push({stackId:mStackId,isPublish:false,peercoId:_peercoId,peercoRef:_peercoRef,streamId:streamId});return streamId;}function _unSubscribeFromStream(streamId){console.log('(ReachSDK::room['+roomId+']::unSubscribeFromStream)streamId '+streamId);var localDataRef=dataref.child('publishedMediaList').child(streamId),remoteDataRef=localDataRef.child('subscribersList'),streamStacksId=streamId+'_sub';remoteDataRef.child(_utils2.default.appInstanceId).remove();if(roomWebrtcStacks[streamStacksId]){var i=0;while(i<roomWebrtcStacks[streamStacksId].length){if(roomWebrtcStacks[streamStacksId][i]){webrtcmngr.closeWebrtc(roomWebrtcStacks[streamStacksId][i].stackId,false);}i++;}delete roomWebrtcStacks[streamStacksId];}delete mMutedStreams[streamId];}function _getAvailableStreams(){console.log('(ReachSDK::room['+roomId+']::_getAvailableStreams)');return mAvailableStreams;}function _getAvailableStream(streamId){console.log('(ReachSDK::room['+roomId+']::_getAvailableStream)streamId='+streamId);if(mAvailableStreams&&streamId){for(var i=mAvailableStreams.length-1;i>=0;i--){if(mAvailableStreams[i]&&(0,_keys2.default)(mAvailableStreams[i])[0]&&(0,_keys2.default)(mAvailableStreams[i])[0]===streamId){return mAvailableStreams[i];}}}return null;}function _removeAllAvailableStreams(){console.log('(ReachSDK::room['+roomId+']::_removeAllAvailableStreams');mAvailableStreams=[];}function _muteAudioStream(streamId){if(!(streamId&&typeof streamId=='string')){console.error('(ReachSDK::room['+roomId+']::_muteAudioStream)parameter streamId is incorrect. Expecting non empty string');return;}console.log('(ReachSDK::room['+roomId+']::_muteAudioStream)streamId='+streamId);if(!mMutedStreams[streamId]){mMutedStreams[streamId]={};}mMutedStreams[streamId].audio=true;if(roomWebrtcStacks){[roomWebrtcStacks[streamId+'_pub'],roomWebrtcStacks[streamId+'_sub']].forEach(function(stacks){if(stacks&&stacks.length>0){for(var i=stacks.length-1;i>=0;i--){webrtcmngr.muteAudioWebrtcStack(stacks[i].stackId);}}});}}function _unmuteAudioStream(streamId){if(!(streamId&&typeof streamId=='string')){console.error('(ReachSDK::room['+roomId+']::_unmuteAudioStream)parameter streamId is incorrect. Expecting non empty string');return;}if(mMutedStreams[streamId]&&mMutedStreams[streamId].audio){mMutedStreams[streamId].audio=false;}console.log('(ReachSDK::room['+roomId+']::_unmuteAudioStream)streamId='+streamId);if(roomWebrtcStacks){[roomWebrtcStacks[streamId+'_pub'],roomWebrtcStacks[streamId+'_sub']].forEach(function(stacks){if(stacks&&stacks.length>0){for(var i=stacks.length-1;i>=0;i--){webrtcmngr.unmuteAudioWebrtcStack(stacks[i].stackId);}}});}}function _muteVideoStream(streamId){if(!(streamId&&typeof streamId=='string')){console.error('(ReachSDK::room['+roomId+']::_muteVideoStream)parameter streamId is incorrect. Expecting non empty string');return;}console.log('(ReachSDK::room['+roomId+']::_muteVideoStream)streamId='+streamId);if(!mMutedStreams[streamId]){mMutedStreams[streamId]={};}mMutedStreams[streamId].video=true;if(roomWebrtcStacks){console.log(roomWebrtcStacks[streamId+'_pub']);[roomWebrtcStacks[streamId+'_pub'],roomWebrtcStacks[streamId+'_sub']].forEach(function(stacks){if(stacks&&stacks.length>0){for(var i=stacks.length-1;i>=0;i--){webrtcmngr.muteVideoWebrtcStack(stacks[i].stackId);}}});}}function _unmuteVideoStream(streamId){if(!(streamId&&typeof streamId=='string')){console.error('(ReachSDK::room['+roomId+']::_unmuteVideoStream)parameter streamId is incorrect. Expecting non empty string');return;}if(mMutedStreams[streamId]&&mMutedStreams[streamId].video){mMutedStreams[streamId].video=false;}console.log('(ReachSDK::room['+roomId+']::_unmuteVideoStream)streamId='+streamId);if(roomWebrtcStacks){[roomWebrtcStacks[streamId+'_pub'],roomWebrtcStacks[streamId+'_sub']].forEach(function(stacks){if(stacks&&stacks.length>0){for(var i=stacks.length-1;i>=0;i--){webrtcmngr.unmuteVideoWebrtcStack(stacks[i].stackId);}}});}}function _close(updateRoomStatusToClose){console.log('(ReachSDK::room['+roomId+']::_close)room '+roomId+', detroyRoom='+updateRoomStatusToClose);var participantListRef=dataref.child('participantList'),publishedMediaListRef=dataref.child('publishedMediaList');participantListRef.child(me+'/connected').set(false);(0,_keys2.default)(mStreams).forEach(_unPublishStream);mStreams=[];if(instantMessageListCb){dataref.child('instantMessageList').off('child_added',instantMessageListCb);instantMessageListCb=null;}if(publishedMediaListCb){publishedMediaListRef.off('child_added',publishedMediaListCb);publishedMediaListCb=null;}if(publishedMediaListCbForAvailableStream){publishedMediaListRef.off('child_added',publishedMediaListCbForAvailableStream);publishedMediaListCbForAvailableStream=null;}if(unPublishedMediaListCb){publishedMediaListRef.off('child_removed',unPublishedMediaListCb);unPublishedMediaListCb=null;}if(unPublishedMediaListCbForAvailableStream){publishedMediaListRef.off('child_removed',unPublishedMediaListCbForAvailableStream);unPublishedMediaListCbForAvailableStream=null;}if(participantListJoinAddedCb){participantListRef.off('child_added',participantListJoinAddedCb);participantListJoinAddedCb=null;}if(participantListJoinChangedCb){participantListRef.off('child_changed',participantListJoinChangedCb);participantListJoinChangedCb=null;}if(participantListLeaveCb){participantListRef.off('child_changed',participantListLeaveCb);participantListLeaveCb=null;}if(remoteUnpublishedCb){publishedMediaListRef.off('child_removed',remoteUnpublishedCb);remoteUnpublishedCb=null;}(0,_keys2.default)(roomWebrtcStacks).forEach(function(streamStacksId){roomWebrtcStacks[streamStacksId].forEach(function(stack){if(streamStacksId&&stack){(function(){var _streamId=stack.streamId,_stackId=stack.stackId,_isPublish=stack.isPublish;if(_isPublish){_unPublishStream(_streamId);}else {_unSubscribeFromStream(_streamId);}setTimeout(function(){webrtcmngr.clearWebrtcStacks(_stackId);},1000);})();}});});setTimeout(function(){roomWebrtcStacks={};mMutedStreams=[];_removeAllAvailableStreams();},1100);if(updateRoomStatusToClose&&updateRoomStatusToClose===true){dataref.child('commonDataList/status').set(ROOM_STATUS_CLOSE);}_localstream2.default.close();}function _switchCamera(){_localstream2.default.switchCamera();}function _getAllVideoSources(){return _localstream2.default.getAllVideoSources();}function _getVideoSourceNumber(){return _localstream2.default.getVideoSourceNumber();}init();return {getRoomId:_getRoomId,getMe:_getMe,setOnParticipantJoin:_setOnParticipantJoin,setOnParticipantLeave:_setOnParticipantLeave,sendInstantMessage:_sendInstantMessage,setOnInstantMessage:_setOnInstantMessage,publishStream:_publishStream,setOnPublishedStream:_setOnPublishedStream,unPublishStream:_unPublishStream,setOnUnPublishedStream:_setOnUnPublishedStream,subscribeToStream:_subscribeToStream,unSubscribeFromStream:_unSubscribeFromStream,getAvailableStreams:_getAvailableStreams,getAvailableStream:_getAvailableStream,muteAudioStream:_muteAudioStream,unmuteAudioStream:_unmuteAudioStream,muteVideoStream:_muteVideoStream,unmuteVideoStream:_unmuteVideoStream,close:_close,on:function on(evt,p_cb){switch(evt){case 'instantMessage':_setOnInstantMessage(p_cb);break;case 'publishedStream':_setOnPublishedStream(p_cb);break;case 'unPublishedStream':_setOnUnPublishedStream(p_cb);break;case 'participantJoin':_setOnParticipantJoin(p_cb);break;case 'participantLeave':_setOnParticipantLeave(p_cb);break;default:console.err('(ReachSDK::room['+roomId+']::on)unsupported '+evt+' event');break;}},switchCamera:_switchCamera,getAllVideoSources:_getAllVideoSources,getVideoSourceNumber:_getVideoSourceNumber};};var _actions=__webpack_require__(98),_actions2=_interopRequireDefault(_actions),_localstream=__webpack_require__(103),_localstream2=_interopRequireDefault(_localstream),_utils=__webpack_require__(101),_utils2=_interopRequireDefault(_utils);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var ROOM_STATUS_CLOSE='CLOSE';

/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _promise=__webpack_require__(22),_promise2=_interopRequireDefault(_promise);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var localstream=function(){var localVideoStreams=[],localAudioStreams=[],localAudioVideoStreams=[],streamVideo=null,streamAudio=null,streamAudioVideo=null,listenersVideo=[],listenersAudio=[],listenersAudioVideo=[],mLocalStreamVideo=null,mLocalStreamAudio=null,mLocalStreamAudioVideo=null,initVideoProgress=false,initAudioProgress=false,initAudioVideoProgress=false,videoSources=[],currentVideoSource=0,streamListenersAudioVideo=[],streamListenersVideo=[];function _getAllVideoSources(){if(videoSources.length>0){return _promise2.default.resolve(videoSources);}return navigator.mediaDevices.enumerateDevices().then(function(sourceInfos){videoSources=sourceInfos.filter(function(sourceInfo){return (/^videoinput$/.test(sourceInfo.kind));});return videoSources;});}function _initVideo(callback){console.log('(ReachSDK::localstream::initVideo)');if(!initVideoProgress){initVideoProgress=true;_getAllVideoSources().then(function(sources){navigator.getMedia=getUserMedia;mLocalStreamVideo=document.createElement('VIDEO');mLocalStreamVideo.muted=true;var audioSource=void 0,videoSource=void 0;if(sources[currentVideoSource]){videoSource=sources[currentVideoSource].deviceId;}var constraints={audio:{deviceId:audioSource?{exact:audioSource}:undefined},video:{deviceId:videoSource?{exact:videoSource}:undefined}};if(streamVideo===null||videoSource){navigator.getMedia(constraints,function(s){console.log(s);streamVideo=s;localVideoStreams.forEach(function(localVideoStream){attachMediaStream(localVideoStream,streamVideo);});listenersVideo.forEach(function(listenerVideo){listenerVideo(streamVideo);});streamListenersVideo.forEach(function(streamListenerVideo){streamListenerVideo(streamVideo);});listenersVideo=[];initVideoProgress=false;if(callback){callback();}},function(error){console.error('Error on webrtcLocalStream - webkitGetUserMedia : error=');console.dir(error);initVideoProgress=false;if(callback){callback(error);}});}else {localVideoStreams.forEach(function(localVideoStream){attachMediaStream(localVideoStream,streamVideo);});listenersVideo.forEach(function(listenerVideo){listenerVideo(streamVideo);});listenersVideo=[];initVideoProgress=false;}});}}function _initAudio(callback){console.log('(ReachSDK::localstream::initAudio)');if(!initAudioProgress){initAudioProgress=true;navigator.getMedia=getUserMedia;mLocalStreamAudio=document.createElement('AUDIO');mLocalStreamAudio.muted=true;localAudioStreams.push(mLocalStreamAudio);if(streamAudio===null){navigator.getMedia({audio:true,video:false},function(s){streamAudio=s;localAudioStreams.forEach(function(localAudioStream){attachMediaStream(localAudioStream,streamAudio);});localAudioStreams=[];listenersAudio.forEach(function(listenerAudio){listenerAudio(streamAudio);});listenersAudio=[];initAudioProgress=false;if(callback){callback();}},function(error){console.error('Error on webrtcLocalStream - webkitGetUserMedia :error=');console.dir(error);initAudioProgress=false;if(callback){callback(error);}});}else {localAudioStreams.forEach(function(localAudioStream){attachMediaStream(localAudioStream,streamAudio);});localAudioStreams=[];listenersAudio.forEach(function(listenerAudio){listenerAudio(streamAudio);});listenersAudio=[];initAudioProgress=false;}}}function _initAudioVideo(callback){console.log('(ReachSDK::localstream::initAudioVideo)');if(!initAudioVideoProgress){initAudioVideoProgress=true;_getAllVideoSources().then(function(sources){navigator.getMedia=getUserMedia;mLocalStreamAudioVideo=document.createElement('AUDIOVIDEO');mLocalStreamAudioVideo.muted=true;var audioSource=void 0,videoSource=void 0;if(sources[currentVideoSource]){videoSource=sources[currentVideoSource].deviceId;}var constraints={audio:{deviceId:audioSource?{exact:audioSource}:undefined},video:{deviceId:videoSource?{exact:videoSource}:undefined}};if(streamAudioVideo===null||videoSource){navigator.getMedia(constraints,function(s){streamAudioVideo=s;localAudioVideoStreams.forEach(function(localAudioVideoStream){attachMediaStream(localAudioVideoStream,streamAudioVideo);});listenersAudioVideo.forEach(function(listenerAudioVideo){listenerAudioVideo(streamAudioVideo);});streamListenersAudioVideo.forEach(function(streamListenerAudioVideo){streamListenerAudioVideo(streamAudioVideo);});listenersAudioVideo=[];initAudioVideoProgress=false;if(callback){callback();}},function(error){console.error('(ReachSDK::localstream::initAudioVideo::Error on webrtcLocalStream - webkitGetUserMedia : error=');console.dir(error);initAudioVideoProgress=false;if(callback){callback(error);}});}else {localAudioVideoStreams.forEach(function(localAudioVideoStream){attachMediaStream(localAudioVideoStream,streamAudioVideo);});listenersAudioVideo.forEach(function(listenerAudioVideo){listenerAudioVideo(streamAudioVideo);});listenersAudioVideo=[];initAudioVideoProgress=false;}});}}function _switchCamera(){console.log('(ReachSDK::localstream::_switchCamera)');if(videoSources.length>0){currentVideoSource=++currentVideoSource%videoSources.length;if(streamAudioVideo){console.log('(ReachSDK::localstream::_switchCamera)::streamAudioVideo');streamAudioVideo.getTracks().forEach(function(track){track.stop();});_initAudioVideo();}if(streamVideo){console.log('(ReachSDK::localstream::_switchCamera)::streamVideo');streamVideo.getTracks().forEach(function(track){track.stop();});_initVideo();}}}function _close(){console.log('(ReachSDK::localstream::close)');if(mLocalStreamVideo){detachMediaStream(mLocalStreamVideo);mLocalStreamVideo=null;}if(streamAudioVideo){streamAudioVideo.getTracks().forEach(function(track){track.stop();});streamAudioVideo=null;}if(streamVideo){streamVideo.getTracks().forEach(function(track){track.stop();});streamVideo=null;}initVideoProgress=false;if(mLocalStreamAudio){detachMediaStream(mLocalStreamAudio);mLocalStreamAudio=null;}if(streamAudio){streamAudio.stop();streamAudio=null;}initAudioProgress=false;if(mLocalStreamAudioVideo){detachMediaStream(mLocalStreamAudioVideo);mLocalStreamAudioVideo=null;}if(streamAudioVideo){streamAudioVideo.stop();streamAudioVideo=null;}initAudioVideoProgress=false;}return {getVideoStream:function getVideoStream(){return streamVideo;},addVideoListener:function addVideoListener(cb){listenersVideo.push(cb);},initVideo:function initVideo(){_initVideo();},connectLocalVideoStream:function connectLocalVideoStream(videoElt,publishStreamCb,getLocalStreamCb){if(videoElt){videoElt.muted=true;if(streamVideo){console.log('(ReachSDK::localstream::connectLocalVideoStream)use existing streamVideo');attachMediaStream(videoElt,streamVideo);if(getLocalStreamCb&&typeof getLocalStreamCb=='function'){getLocalStreamCb(streamVideo);}}else {localVideoStreams.push(videoElt);if(getLocalStreamCb&&typeof getLocalStreamCb=='function'){listenersVideo.push(getLocalStreamCb);}_initVideo(publishStreamCb);}}else {if(!streamVideo){if(getLocalStreamCb&&typeof getLocalStreamCb=='function'){listenersVideo.push(getLocalStreamCb);}_initVideo(publishStreamCb);}else {if(getLocalStreamCb&&typeof getLocalStreamCb=='function'){getLocalStreamCb(streamVideo);}}}},getAudioStream:function getAudioStream(){return streamAudio;},addAudioListener:function addAudioListener(cb){listenersAudio.push(cb);},initAudio:function initAudio(){_initAudio();},connectLocalAudioStream:function connectLocalAudioStream(AudioElt,publishStreamCb,getLocalStreamCb){if(AudioElt){AudioElt.muted=true;if(streamAudio){console.log('(ReachSDK::localstream::connectLocalAudioStream)use existing streamAudio');attachMediaStream(AudioElt,streamAudio);if(getLocalStreamCb&&typeof getLocalStreamCb=='function'){getLocalStreamCb(streamAudio);}}else {localAudioStreams.push(AudioElt);if(getLocalStreamCb&&typeof getLocalStreamCb=='function'){listenersAudio.push(getLocalStreamCb);}_initAudio(publishStreamCb);}}else {if(!streamAudio){if(getLocalStreamCb&&typeof getLocalStreamCb=='function'){listenersAudio.push(getLocalStreamCb);}_initAudio(publishStreamCb);}else {if(getLocalStreamCb&&typeof getLocalStreamCb=='function'){getLocalStreamCb(streamAudio);}}}},getAudioVideoStream:function getAudioVideoStream(){return streamAudioVideo;},addAudioVideoListener:function addAudioVideoListener(cb){listenersAudioVideo.push(cb);},initAudioVideo:function initAudioVideo(){_initAudioVideo();},connectLocalAudioVideoStream:function connectLocalAudioVideoStream(AudioVideoElt,publishStreamCb,getLocalStreamCb){if(AudioVideoElt){AudioVideoElt.muted=true;if(streamAudioVideo){console.log('(ReachSDK::localstream::connectLocalAudioVideoStream)use existing streamAudioVideo');attachMediaStream(AudioVideoElt,streamAudioVideo);if(getLocalStreamCb){getLocalStreamCb(streamAudioVideo);}}else {localAudioVideoStreams.push(AudioVideoElt);if(getLocalStreamCb&&typeof getLocalStreamCb=='function'){listenersAudioVideo.push(getLocalStreamCb);}_initAudioVideo(publishStreamCb);}}else {if(!streamAudioVideo){if(getLocalStreamCb&&typeof getLocalStreamCb=='function'){listenersAudioVideo.push(getLocalStreamCb);}_initAudioVideo(publishStreamCb);}else {if(getLocalStreamCb){getLocalStreamCb(streamAudioVideo);}}}},close:function close(){_close();},switchCamera:function switchCamera(){_switchCamera();},addStreamAudioVideoListener:function addStreamAudioVideoListener(cb){streamListenersAudioVideo.push(cb);},addStreamVideoListener:function addStreamVideoListener(cb){streamListenersVideo.push(cb);},getAllVideoSources:function getAllVideoSources(){return _getAllVideoSources();},getVideoSourceNumber:function getVideoSourceNumber(){return _getAllVideoSources().then(function(sources){return sources.length;});}};}();exports.default=localstream;

/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _utils=__webpack_require__(101),_utils2=_interopRequireDefault(_utils),_webrtc=__webpack_require__(105),_webrtc2=_interopRequireDefault(_webrtc);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var webrtcmngr=function webrtcmngr(datarefs){var _this=this,webrtcStacks=[],virtualWebrtcStacks=[],mwebrtcmngr_reference=void 0;function _createWebrtc(p_Vid,p_remoteAppInstId,p_onCloseCb,p_isPublish,p_actionType,p_peercoId,p_peercoRef,p_mutedAudio,p_muteVideo,p_getStreamCb){var webrtcStackId=p_peercoId,localDataRef=datarefs.getWebrtc().child(p_peercoRef+'/'+_utils2.default.appInstanceId),remoteDataRef=datarefs.getWebrtc().child(p_peercoRef+'/'+p_remoteAppInstId),virtualWebrtcStack=void 0;if(p_isPublish){virtualWebrtcStack={webRtcStackId:webrtcStackId,localVid:p_Vid};}else {virtualWebrtcStack={webRtcStackId:webrtcStackId,remoteVid:p_Vid};}var id=virtualWebrtcStacks.push(virtualWebrtcStack)-1;if(!webrtcStacks[webrtcStackId]){console.debug('ReachSDK::webrtcmngr::createWebrtc->create a new real webrtcStack');var webRtcStack=(0,_webrtc2.default)(mwebrtcmngr_reference,p_isPublish,localDataRef,remoteDataRef,webrtcStackId,p_actionType,p_mutedAudio,p_muteVideo);webRtcStack.setOnClose(p_onCloseCb);if(p_isPublish){webrtcStacks[webrtcStackId]={stack:webRtcStack,isPublished:1,isSubscribed:0};webRtcStack.connectLocalStream(p_Vid,p_getStreamCb);}else {webrtcStacks[webrtcStackId]={stack:webRtcStack,isPublished:0,isSubscribed:1};webRtcStack.connectRemoteStream(p_Vid,p_getStreamCb);}}else {console.debug('ReachSDK::webrtcmngr::createWebrtc->use existing real webrtcStack');if(p_isPublish){webrtcStacks[webrtcStackId].isPublished++;webrtcStacks[webrtcStackId].stack.connectLocalStream(p_Vid,p_getStreamCb);}else {webrtcStacks[webrtcStackId].isSubscribed++;webrtcStacks[webrtcStackId].stack.connectRemoteStream(p_Vid,p_getStreamCb);}}console.debug('ReachSDK::webrtcmngr::createWebrtc->webrtcStack:'+webrtcStackId+' new isPublished count ='+webrtcStacks[webrtcStackId].isPublished+' new isSubscribed count ='+webrtcStacks[webrtcStackId].isSubscribed);return id;}function _closeWebrtc(id,p_isUnPublish,callback){console.debug('ReachSDK::webrtcmngr::closeWebrtc->id='+id);if(!virtualWebrtcStacks[id]){console.warn('ReachSDK::webrtcmngr::closeWebrtc: virtualstack '+id+' not found');if(callback&&typeof callback=='function'){callback();}return false;}var webrtcStackId=virtualWebrtcStacks[id].webRtcStackId;if(webrtcStackId&&webrtcStacks[webrtcStackId]){if(p_isUnPublish&&webrtcStacks[webrtcStackId].isPublished>0){webrtcStacks[webrtcStackId].isPublished--;}else if(!p_isUnPublish&&webrtcStacks[webrtcStackId].isSubscribed>0){webrtcStacks[webrtcStackId].isSubscribed--;}if(webrtcStacks[webrtcStackId].isPublished<1&&webrtcStacks[webrtcStackId].isSubscribed<1){console.debug('ReachSDK::webrtcmngr::closeWebrtc->destroy  real webrtcStack:'+webrtcStackId);webrtcStacks[webrtcStackId].stack.close(callback);webrtcStacks[webrtcStackId]=null;}else {console.debug('ReachSDK::webrtcmngr::closeWebrtc->decrement  real webrtcStack:'+webrtcStackId+' new isPublished count ='+webrtcStacks[webrtcStackId].isPublished+' new isSubscribed count ='+webrtcStacks[webrtcStackId].isSubscribed);if(callback&&typeof callback=='function'){callback();}}}else {if(callback&&typeof callback=='function'){callback();}console.warn('ReachSDK::webrtcmngr::closeWebrtc cannot found real stack');}if(virtualWebrtcStacks[id].remoteVid){detachMediaStream(virtualWebrtcStacks[id].remoteVid);}virtualWebrtcStacks.splice(id,1);return true;}function _clearWebrtcStacks(webrtcStackId){console.debug('ReachSDK::webrtcmngr::clearWebrtcStacks id='+webrtcStackId);if(webrtcStackId&&webrtcStacks&&webrtcStacks[webrtcStackId]){webrtcStacks[webrtcStackId]=null;}return true;}function _muteAudioWebrtcStack(virtualWebrtcStackId){console.log('(ReachSDK::webrtcmngr::muteAudioWebrtcStack) virtualWebrtcStackId='+virtualWebrtcStackId);if(virtualWebrtcStacks&&virtualWebrtcStacks[virtualWebrtcStackId]&&virtualWebrtcStacks[virtualWebrtcStackId].webRtcStackId){var webRtcStackId=virtualWebrtcStacks[virtualWebrtcStackId].webRtcStackId;console.log('(ReachSDK::webrtcmngr::muteAudioWebrtcStack) virtualWebrtcStackId='+virtualWebrtcStackId+' webRtcStackId='+webRtcStackId);if(webrtcStacks&&webrtcStacks[webRtcStackId]&&webrtcStacks[webRtcStackId].stack){webrtcStacks[webRtcStackId].stack.muteAudio();}else {console.warn('(ReachSDK::webrtcmngr::muteAudioWebrtcStack) webrtcStack='+webRtcStackId+' not found');}}else {console.warn('(ReachSDK::webrtcmngr::muteAudioWebrtcStack) virtualWebrtcStackId='+virtualWebrtcStackId+' not found');}}function _unmuteAudioWebrtcStack(virtualWebrtcStackId){console.log('(ReachSDK::webrtcmngr::_unmuteAudioWebrtcStack) virtualWebrtcStackId='+virtualWebrtcStackId);if(virtualWebrtcStacks&&virtualWebrtcStacks[virtualWebrtcStackId]&&virtualWebrtcStacks[virtualWebrtcStackId].webRtcStackId){var webRtcStackId=virtualWebrtcStacks[virtualWebrtcStackId].webRtcStackId;console.log('(ReachSDK::webrtcmngr::_unmuteAudioWebrtcStack) virtualWebrtcStackId='+virtualWebrtcStackId+',webRtcStackId='+webRtcStackId);if(webrtcStacks&&webrtcStacks[webRtcStackId]&&webrtcStacks[webRtcStackId].stack){webrtcStacks[webRtcStackId].stack.unmuteAudio();}else {console.warn('(ReachSDK::webrtcmngr::_unmuteAudioWebrtcStack) webrtcStack='+webRtcStackId+' not found');}}else {console.warn('(ReachSDK::webrtcmngr::_unmuteAudioWebrtcStack) virtualWebrtcStackId='+virtualWebrtcStackId+' not found');}}function _muteVideoWebrtcStack(virtualWebrtcStackId){console.log('(ReachSDK::webrtcmngr::muteAudioWebrtcStack) virtualWebrtcStackId='+virtualWebrtcStackId);if(virtualWebrtcStacks&&virtualWebrtcStacks[virtualWebrtcStackId]&&virtualWebrtcStacks[virtualWebrtcStackId].webRtcStackId){var webRtcStackId=virtualWebrtcStacks[virtualWebrtcStackId].webRtcStackId;console.log('(ReachSDK::webrtcmngr::muteAudioWebrtcStack) virtualWebrtcStackId='+virtualWebrtcStackId+' webRtcStackId='+webRtcStackId);if(webrtcStacks&&webrtcStacks[webRtcStackId]&&webrtcStacks[webRtcStackId].stack){webrtcStacks[webRtcStackId].stack.muteVideo();}else {console.warn('(ReachSDK::webrtcmngr::muteAudioWebrtcStack) webrtcStack='+webRtcStackId+' not found');}}else {console.warn('(ReachSDK::webrtcmngr::muteAudioWebrtcStack) virtualWebrtcStackId='+virtualWebrtcStackId+' not found');}}function _unmuteVideoWebrtcStack(virtualWebrtcStackId){console.log('(ReachSDK::webrtcmngr::_unmuteAudioWebrtcStack) virtualWebrtcStackId='+virtualWebrtcStackId);if(virtualWebrtcStacks&&virtualWebrtcStacks[virtualWebrtcStackId]&&virtualWebrtcStacks[virtualWebrtcStackId].webRtcStackId){var webRtcStackId=virtualWebrtcStacks[virtualWebrtcStackId].webRtcStackId;console.log('(ReachSDK::webrtcmngr::_unmuteAudioWebrtcStack) virtualWebrtcStackId='+virtualWebrtcStackId+', webRtcStackId='+webRtcStackId);if(webrtcStacks&&webrtcStacks[webRtcStackId]&&webrtcStacks[webRtcStackId].stack){webrtcStacks[webRtcStackId].stack.unmuteVideo();}else {console.warn('(ReachSDK::webrtcmngr::_unmuteAudioWebrtcStack) webrtcStack='+webRtcStackId+' not found');}}else {console.warn('(ReachSDK::webrtcmngr::_unmuteAudioWebrtcStack) virtualWebrtcStackId='+virtualWebrtcStackId+' not found');}}function _setWebrtcManger(webrtcmngr){mwebrtcmngr_reference=webrtcmngr;}return {createWebrtc:function createWebrtc(p_Vid,p_remoteAppInstId,p_onCloseCb,p_isPublish,p_actionType,p_peercoId,p_peercoRef,p_mutedAudio,p_muteVideo,p_getStreamCb){return _createWebrtc.bind(_this)(p_Vid,p_remoteAppInstId,p_onCloseCb,p_isPublish,p_actionType,p_peercoId,p_peercoRef,p_mutedAudio,p_muteVideo,p_getStreamCb);},closeWebrtc:_closeWebrtc,clearWebrtcStacks:_clearWebrtcStacks,muteAudioWebrtcStack:_muteAudioWebrtcStack,unmuteAudioWebrtcStack:_unmuteAudioWebrtcStack,muteVideoWebrtcStack:_muteVideoWebrtcStack,unmuteVideoWebrtcStack:_unmuteVideoWebrtcStack,setWebrtcManger:_setWebrtcManger};};exports.default=webrtcmngr;

/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _stringify=__webpack_require__(75),_stringify2=_interopRequireDefault(_stringify),_actions=__webpack_require__(98),_actions2=_interopRequireDefault(_actions),_localstream=__webpack_require__(103),_localstream2=_interopRequireDefault(_localstream);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}var ICE_CONNECTION_STATE_DISCONNECTED='disconnected',ICE_CONNECTION_STATE_CONNECTED='connected',ICE_CONNECTION_STATE_COMPLETED='completed',ICE_CONNECTION_STATE_CHECKING='checking',ICE_CONNECTION_STATE_CLOSED='closed',ICE_CONNECTION_STATE_FAILED='failed',ICE_CONNECTION_STATE_OTHER='other',DEFAULT_ICE_CONFIG={iceServers:[{url:'turns:turn1.webcom.orange.com:443',username:'admin',credential:'webcom1234'},{url:'turn:turn2.webcom.orange.com:443',username:'admin',credential:'webcom1234'},{url:'turns:turn3.webcom.orange.com:443',username:'admin',credential:'webcom1234'}]},webrtc=function webrtc(p_webrtcmngr,p_isPublish,p_localDataRef,p_remoteDataRef,p_webrtcStackId,p_actionType,p_muteAudio,p_muteVideo){var webrtcmngr=p_webrtcmngr,stackId=new Date().getTime(),isPublish=p_isPublish,pc=null,localDataRef=p_localDataRef,remoteDataRef=p_remoteDataRef,iceCandidatesListCb=null,_sdpOfferCb=null,_sdpAnswerCb=null,remotedatarefCb=null,onCloseCb=null,webrtcStackId=p_webrtcStackId,actionType=p_actionType,config=null,myPeerConnection=null,myRTCSessionDescription=null,myRTCIceCandidate=null,localStreams=[],remoteStreams=[],remoteStreamsCb=[],receivedStream=null,sentStream=null,isClosed=false,closeInProgress=false,iceConnectionState=null,onCloseCb2=null,isAudioMute=false,isVideoMute=false;console.log('(ReachSDK::webrtc::)stackId=${stackId} isPublish=${isPublish},localDataRef=${localDataRef},remoteDataRef=${remoteDataRef})');var DtlsSrtpKeyAgreement={DtlsSrtpKeyAgreement:true},optional={optional:[DtlsSrtpKeyAgreement]},publisherMediaConstraints={mandatory:{OfferToReceiveAudio:false,OfferToReceiveVideo:false}},subscriberMediaConstraints={mandatory:{OfferToReceiveAudio:true,OfferToReceiveVideo:true}};function onError(e){console.log('(ReachSDK::webrtc::)stackId='+stackId+'error='+e);console.dir(e);}function getIceServersConfigFromServer(callbackOk,callbackKo){console.log('ReachSDK::webrtc::getIceServersConfigFromServer');if(localDataRef){localDataRef.root().child('config').once('value',function(snapshot){var _config=snapshot?snapshot.val():null;if(_config){if(typeof callbackOk=='function'){callbackOk(_config);}}else if(typeof callbackKo=='function'){callbackKo();}},function(error){if(typeof callbackKo=='function'){callbackKo(error);}});}else if(typeof callbackKo=='function'){callbackKo();}}function startListeningToRemoteIceCandidate(){remoteDataRef.child('iceCandidatesList').on('child_added',iceCandidatesListCb);}function stopListeningToRemoteIceCandidate(){remoteDataRef.child('iceCandidatesList').off('child_added',iceCandidatesListCb);}function _muteTracks(enabled,tracks){if(tracks){tracks.forEach(function(track){if(track){track.enabled=enabled;}});}}function _muteAudioTracks(mute){isAudioMute=mute;var stream=isPublish&&sentStream?sentStream:!isPublish&&receivedStream?receivedStream:null;if(stream){_muteTracks(!isAudioMute,stream.getAudioTracks());}}function _muteAudio(){console.log('(ReachSDK::webrtc::_muteAudio)stackId='+stackId);_muteAudioTracks(true);}function _unmuteAudio(){console.log('(ReachSDK::webrtc::_unmuteAudio)stackId='+stackId);_muteAudioTracks(false);}function _muteVideoTracks(mute){isVideoMute=mute;var stream=isPublish&&sentStream?sentStream:!isPublish&&receivedStream?receivedStream:null;if(stream){_muteTracks(!isVideoMute,stream.getVideoTracks());}}function _muteVideo(){console.log('(ReachSDK::webrtc::_muteVideo)stackId='+stackId);_muteVideoTracks(true);}function _unmuteVideo(){console.log('(ReachSDK::webrtc::_unmuteVideo)stackId='+stackId);_muteVideoTracks(false);}function _initSdpCallbacks(isPublish){console.debug('(ReachSDK::webrtc::_initSdpCallbacks)stackId='+stackId);if(_sdpOfferCb){remoteDataRef.off('child_added',_sdpOfferCb);_sdpOfferCb=undefined;}if(_sdpAnswerCb){remoteDataRef.off('child_added',_sdpAnswerCb);_sdpAnswerCb=undefined;}console.debug('(ReachSDK::webrtc::_initSdpCallbacks)isPublish='+isPublish);if(isPublish){_sdpAnswerCb=function sdpAnswerCb(snapshot){if(!isClosed&&snapshot.name()==='sdpAnswer'){var data=snapshot.val();console.debug('(ReachSDK::webrtc::sdpAnswerCb)stackId='+stackId+'-received sdpAnswer: '+(0,_stringify2.default)(data));pc.setRemoteDescription(new myRTCSessionDescription(data),function(){console.debug('(ReachSDK::webrtc::sdpAnswerCb)stackId='+stackId+'-remote description set');startListeningToRemoteIceCandidate();},onError);remoteDataRef.off('child_added',_sdpAnswerCb);_sdpAnswerCb=undefined;snapshot.ref().remove();_initSdpCallbacks(false);}};remoteDataRef.on('child_added',_sdpAnswerCb);}else {_sdpOfferCb=function sdpOfferCb(snapshot){if(!isClosed&&snapshot.name()==='sdpOffer'){var data=snapshot.val();console.debug('(ReachSDK::webrtc::sdpOfferCb)stackId='+stackId+'-received sdpOffer: '+(0,_stringify2.default)(data));pc.setRemoteDescription(new myRTCSessionDescription(data),function(){console.debug('(ReachSDK::webrtc::setRemoteDescription)');pc.createAnswer(function(description){console.log('(ReachSDK::webrtc::sdpOfferCb)stackId='+stackId+'-sending answer');pc.setLocalDescription(description,function(){console.debug('(ReachSDK::webrtc::sdpOfferCb)stackId='+stackId+'-set sdpAnswer in base : '+(0,_stringify2.default)(description));localDataRef.child('sdpAnswer').set(JSON.parse((0,_stringify2.default)(description)));startListeningToRemoteIceCandidate();},onError);setTimeout(function(){receivedStream=pc.getRemoteStreams()[0];if(isAudioMute){_muteAudio();}if(isVideoMute){_muteVideo();}if((pc.iceConnectionState===ICE_CONNECTION_STATE_CONNECTED||pc.iceConnectionState===ICE_CONNECTION_STATE_COMPLETED||pc.iceConnectionState===ICE_CONNECTION_STATE_OTHER)&&receivedStream){for(var i=0;i<remoteStreams.length;i++){if(remoteStreams[i]){attachMediaStream(remoteStreams[i],receivedStream);}}for(var j=0;j<remoteStreamsCb.length;j++){if(remoteStreamsCb[j]){remoteStreamsCb[j](receivedStream);}}remoteStreamsCb=[];}},1100);},onError,subscriberMediaConstraints);},onError);remoteDataRef.off('child_added',_sdpOfferCb);_sdpOfferCb=undefined;snapshot.ref().remove();_initSdpCallbacks(false);}};remoteDataRef.on('child_added',_sdpOfferCb);}}function sendOffer(){console.log('(webrtc::sendOffer)stackid='+stackId+'-creating sdpOffer');pc.createOffer(function(description){pc.setLocalDescription(description,function(){console.debug('(ReachSDK::webrtc::createOffer)stackId='+stackId+'-set sdpOffer in base : '+(0,_stringify2.default)(description));localDataRef.child('sdpOffer').set(JSON.parse((0,_stringify2.default)(description)));},onError);},onError,publisherMediaConstraints);}function _initlocalStream(callback){console.log('(ReachSDK::webrtc::_initlocalStream)stackId='+stackId+' get local video stream and renders to local video');if(actionType){var initlocalStream=void 0;if(actionType===_actions2.default.ACTION_TYPE_VIDEO){initlocalStream=function initlocalStream(){console.log('(ReachSDK::webrtc::_initlocalStream)initlocalStream_video');sentStream=_localstream2.default.getVideoStream();_localstream2.default.addStreamVideoListener(function(stream){console.log('(ReachSDK::webrtc::addStreamVideoListener)');if(pc){if(webrtcDetectedBrowser==='firefox'){console.log(webrtcDetectedBrowser);pc.getSenders().forEach(function(sender){return sentStream.getTracks().includes(sender.track)&&pc.removeTrack(sender);});}else {pc.removeStream(sentStream);}sentStream=stream;if(isAudioMute){_muteAudio();}if(isVideoMute){_muteVideo();}console.log(stream);pc.addStream(stream);for(var i=0;i<localStreams.length;i++){console.log('(ReachSDK::webrtc::addStreamVideoListener)stackId='+stackId+' rendering local AudioVideo to '+localStreams[i].id);attachMediaStream(localStreams[i],stream);}_initSdpCallbacks(true);sendOffer();}});if(isAudioMute){_muteAudio();}if(isVideoMute){_muteVideo();}pc.addStream(sentStream);for(var i=0;i<localStreams.length;i++){console.log('(ReachSDK::webrtc::_initlocalStream)stackId='+stackId+' rendering local video to '+localStreams[i].id);attachMediaStream(localStreams[i],_localstream2.default.getVideoStream());}if(callback&&typeof callback=='function'){callback();}};if(_localstream2.default.getVideoStream()){initlocalStream();}else {_localstream2.default.addVideoListener(initlocalStream);_localstream2.default.initVideo();}}else if(actionType===_actions2.default.ACTION_TYPE_AUDIO){initlocalStream=function initlocalStream(){console.log('(ReachSDK::webrtc::_initlocalStream)initlocalStream_audio');if(_localstream2.default.getAudioStream()&&_localstream2.default.getAudioStream().clone&&typeof _localstream2.default.getAudioStream().clone=='function'){sentStream=_localstream2.default.getAudioStream().clone();}else {sentStream=_localstream2.default.getAudioStream();}if(isAudioMute){_muteAudio();}if(isVideoMute){_muteVideo();}pc.addStream(sentStream);for(var i=0;i<localStreams.length;i++){console.log('(ReachSDK::webrtc::_initlocalStream)stackId='+stackId+' rendering local Audio to '+localStreams[i].id);attachMediaStream(localStreams[i],_localstream2.default.getAudioStream());}if(callback&&typeof callback=='function'){callback();}};if(_localstream2.default.getAudioStream()){initlocalStream();}else {_localstream2.default.addAudioListener(initlocalStream);_localstream2.default.initAudio();}}else if(actionType===_actions2.default.ACTION_TYPE_AUDIO_VIDEO){initlocalStream=function initlocalStream(){console.log('(ReachSDK::webrtc::_initlocalStream)initlocalStream_audio_video');sentStream=_localstream2.default.getAudioVideoStream();_localstream2.default.addStreamAudioVideoListener(function(stream){console.log('(ReachSDK::webrtc::addStreamAudioVideoListener)');if(pc){if(webrtcDetectedBrowser==='firefox'){console.log(webrtcDetectedBrowser);pc.getSenders().forEach(function(sender){return sentStream.getTracks().includes(sender.track)&&pc.removeTrack(sender);});}else {pc.removeStream(sentStream);}sentStream=stream;if(isAudioMute){_muteAudio();}if(isVideoMute){_muteVideo();}console.log(stream);pc.addStream(stream);for(var i=0;i<localStreams.length;i++){console.log('(ReachSDK::webrtc::addStreamAudioVideoListener)stackId='+stackId+' rendering local AudioVideo to '+localStreams[i].id);attachMediaStream(localStreams[i],stream);}_initSdpCallbacks(true);sendOffer();}});if(isAudioMute){_muteAudio();}if(isVideoMute){_muteVideo();}pc.addStream(sentStream);for(var i=0;i<localStreams.length;i++){console.log('(ReachSDK::webrtc::_initlocalStream)stackId='+stackId+' rendering local AudioVideo to '+localStreams[i].id);attachMediaStream(localStreams[i],_localstream2.default.getAudioVideoStream());}if(callback&&typeof callback=='function'){callback();}};if(_localstream2.default.getAudioVideoStream()){initlocalStream();}else {_localstream2.default.addAudioVideoListener(initlocalStream);_localstream2.default.initAudioVideo();}}}else {console.warn('(ReachSDK::webrtc::_initlocalStream)no actionType specified');}}function _closeSdpCallbacks(){if(_sdpAnswerCb){remoteDataRef.off('child_added',_sdpAnswerCb);_sdpAnswerCb=null;}if(_sdpOfferCb){remoteDataRef.off('child_added',_sdpOfferCb);_sdpOfferCb=null;}}function _close(callback){if(!closeInProgress&&!isClosed){closeInProgress=true;onCloseCb2=callback;console.debug('(ReachSDK::webrtc::_close)stackId='+stackId+'-closing webrtc stack');if(pc){pc.close();}if(remotedatarefCb){remoteDataRef.off('child_added',remotedatarefCb);remotedatarefCb=null;}if(iceCandidatesListCb){stopListeningToRemoteIceCandidate();iceCandidatesListCb=null;}_closeSdpCallbacks();for(var i=0;i<localStreams.length;i++){if(localStreams[i]){detachMediaStream(localStreams[i]);console.debug('(ReachSDK::webrtc::_close)stackId='+stackId+'-stopping local video to '+localStreams[i].id);}}for(var j=0;j<remoteStreams.length;j++){if(remoteStreams[j]){detachMediaStream(remoteStreams[j]);console.debug('(ReachSDK::webrtc::_close)stackId='+stackId+'-stopping remote vid to '+remoteStreams[j].id);}}isClosed=true;console.debug('(ReachSDK::webrtc::_close)stackId='+stackId+'-closing webrtc stack -> waiting for ICE_CONNECTION_STATE_DISCONNECTED');if(isClosed&&(iceConnectionState===ICE_CONNECTION_STATE_DISCONNECTED||iceConnectionState===ICE_CONNECTION_STATE_CLOSED||iceConnectionState===ICE_CONNECTION_STATE_FAILED)){console.debug('(ReachSDK::webrtc::_close)stackId='+stackId+'-closed webrtc stack complete');pc=null;closeInProgress=false;webrtcmngr.clearWebrtcStacks(webrtcStackId);if(onCloseCb2&&typeof onCloseCb2=='function'){onCloseCb2();}}}else {console.debug('(ReachSDK::webrtc::_close)stackId='+stackId+'-closing webrtc stack already in progress');}}function _connectLocalStream(videoElt,getStreamCb){if(actionType){if(actionType===_actions2.default.ACTION_TYPE_VIDEO){_localstream2.default.connectLocalVideoStream(videoElt,getStreamCb);}else if(actionType===_actions2.default.ACTION_TYPE_AUDIO){_localstream2.default.connectLocalAudioStream(videoElt,getStreamCb);}else if(actionType===_actions2.default.ACTION_TYPE_AUDIO_VIDEO){_localstream2.default.connectLocalAudioVideoStream(videoElt,getStreamCb);}}}function _connectRemoteStream(videoElt,getStreamCb){if(videoElt){if(receivedStream){attachMediaStream(videoElt,receivedStream);if(getStreamCb&&typeof getStreamCb=='function'){getStreamCb(receivedStream);}}else {remoteStreams.push(videoElt);if(getStreamCb&&typeof getStreamCb=='function'){remoteStreamsCb.push(getStreamCb);}}}else {if(receivedStream){if(getStreamCb&&typeof getStreamCb=='function'){getStreamCb(receivedStream);}}else {if(getStreamCb&&typeof getStreamCb=='function'){remoteStreamsCb.push(getStreamCb);}}}}function init_pc(){console.log('(ReachSDK::webrtc::init_pc)stackId='+stackId+'_config=',(0,_stringify2.default)(config));pc=new myPeerConnection(config,optional);pc.onicecandidate=function(e){if(e.candidate){console.log('(ReachSDK::webrtc::pc.onicecandidate)stackId='+stackId+' send ice candidate='+(0,_stringify2.default)(e.candidate));localDataRef.child('iceCandidatesList').push({label:e.candidate.sdpMLineIndex,id:e.candidate.sdpMid,candidate:e.candidate.candidate});}};pc.onaddstream=function(e){console.debug('(ReachSDK::webrtc::onaddstream)stackId='+stackId+'-stream:'+(0,_stringify2.default)(e.stream));if(e&&e.stream){receivedStream=e.stream;if(isAudioMute){_muteAudio();}if(isVideoMute){_muteVideo();}}if((pc.iceConnectionState===ICE_CONNECTION_STATE_CONNECTED||pc.iceConnectionState===ICE_CONNECTION_STATE_COMPLETED||pc.iceConnectionState===ICE_CONNECTION_STATE_OTHER)&&receivedStream){for(var i=0;i<remoteStreams.length;i++){if(remoteStreams[i]){attachMediaStream(remoteStreams[i],receivedStream);}}for(var j=0;j<remoteStreamsCb.length;j++){if(remoteStreamsCb[j]){remoteStreamsCb[j](receivedStream);}}remoteStreamsCb=[];}};pc.oniceconnectionstatechange=function(){if(!!pc&&pc.iceConnectionState===ICE_CONNECTION_STATE_CHECKING){console.debug('(ReachSDK::webrtc::oniceconnectionstatechange)stackId='+stackId+'-checking');iceConnectionState=ICE_CONNECTION_STATE_CHECKING;}else if(!!pc&&pc.iceConnectionState===ICE_CONNECTION_STATE_CONNECTED){iceConnectionState=ICE_CONNECTION_STATE_CONNECTED;console.debug('(ReachSDK::webrtc::oniceconnectionstatechange)stackId='+stackId+'-connected');if(receivedStream){remoteStreams.forEach(function(remoteStream){if(remoteStream){console.debug('(ReachSDK::webrtc::onaddstream)pc.onaddstream stackId='+stackId+'-rendering remote vid to '+remoteStream.id);attachMediaStream(remoteStream,receivedStream);}});remoteStreamsCb.forEach(function(remoteStreamCb){if(remoteStreamCb){remoteStreamCb(receivedStream);}});remoteStreamsCb=[];}stopListeningToRemoteIceCandidate();}else if(!!pc&&pc.iceConnectionState===ICE_CONNECTION_STATE_COMPLETED){iceConnectionState=ICE_CONNECTION_STATE_COMPLETED;console.debug('(ReachSDK::webrtc::oniceconnectionstatechange)stackId='+stackId+'-'+ICE_CONNECTION_STATE_COMPLETED);stopListeningToRemoteIceCandidate();}if(!!pc&&pc.iceConnectionState===ICE_CONNECTION_STATE_DISCONNECTED){iceConnectionState=ICE_CONNECTION_STATE_DISCONNECTED;console.log('(ReachSDK::webrtc::oniceconnectionstatechange)stackId='+stackId+'-remote disconnection, closing peer connection');}else if(!!pc&&pc.iceConnectionState===ICE_CONNECTION_STATE_CLOSED){console.debug('(ReachSDK::webrtc::oniceconnectionstatechange)stackId='+stackId+'-closed');iceConnectionState=ICE_CONNECTION_STATE_CLOSED;_close();}else if(!!pc&&pc.iceConnectionState===ICE_CONNECTION_STATE_FAILED){console.debug('(ReachSDK::webrtc::oniceconnectionstatechange)stackId='+stackId+'-failed');iceConnectionState=ICE_CONNECTION_STATE_FAILED;}else {if(pc){console.debug('(ReachSDK::webrtc::oniceconnectionstatechange)stackId='+stackId+'-'+pc.iceConnectionState);}else {console.debug('(ReachSDK::webrtc::oniceconnectionstatechange)stackId='+stackId+'-pc = null');}iceConnectionState=ICE_CONNECTION_STATE_OTHER;}if(isClosed&&(iceConnectionState===ICE_CONNECTION_STATE_DISCONNECTED||iceConnectionState===ICE_CONNECTION_STATE_CLOSED||iceConnectionState===ICE_CONNECTION_STATE_FAILED)){console.debug('(ReachSDK::webrtc::_close)stackId='+stackId+'-closed webrtc stack complete');pc=null;closeInProgress=false;webrtcmngr.clearWebrtcStacks(webrtcStackId);if(onCloseCb&&typeof onCloseCb=='function'){onCloseCb();}if(onCloseCb2&&typeof onCloseCb2=='function'){onCloseCb2();}}};iceCandidatesListCb=function iceCandidatesListCb(snapshot){var data=snapshot.val(),candidate=new myRTCIceCandidate({sdpMLineIndex:data.label,candidate:data.candidate,sdpMid:data.id});console.log('(ReachSDK::webrtc::iceCandidatesListCb)stackId='+stackId+'received ice candidate='+(0,_stringify2.default)(candidate));pc.addIceCandidate(candidate);};if(isPublish){_initlocalStream(function(){_initSdpCallbacks(isPublish);sendOffer();});}else {_initSdpCallbacks(false);}}(function(){console.log('(ReachSDK::webrtc::init)stackId='+stackId);if(typeof RTCPeerConnection==='function'){myPeerConnection=RTCPeerConnection;}else {console.error('(ReachSDK::webrtc::init)stackId='+stackId+' error=Webrtc is not supported on this browser !');throw new Error('Webrtc is not supported on this browser !');}if(typeof RTCSessionDescription==='function'){myRTCSessionDescription=RTCSessionDescription;}else {console.error('(ReachSDK::webrtc::init)stackId='+stackId+' error2=Webrtc is not supported on this browser !');throw new Error('Webrtc is not supported on this browser !');}if(typeof RTCIceCandidate==='function'){myRTCIceCandidate=RTCIceCandidate;}else {console.error('(ReachSDK::webrtc::init)stackId='+stackId+' error3=Webrtc is not supported on this browser !');throw new Error('Webrtc is not supported on this browser !');}if(p_muteAudio){isAudioMute=true;}if(p_muteVideo){isVideoMute=true;}getIceServersConfigFromServer(function(_config){config=_config;console.log('(ReachSDK::webrtc::) use server config=',(0,_stringify2.default)(config));init_pc();},function(){if(typeof DEFAULT_ICE_CONFIG!=='undefined'){config=DEFAULT_ICE_CONFIG;console.log('(ReachSDK::webrtc::) use DEFAULT_ICE_CONFIG config=',(0,_stringify2.default)(config));}else {console.log('(ReachSDK::webrtc::) no ice  config');}init_pc();});})();return {setOnClose:function setOnClose(cb){onCloseCb=cb;},close:function close(cb){console.debug('(ReachSDK::webrtc::_close)stackId='+stackId+'-close requested');_close(cb);},connectLocalStream:_connectLocalStream,connectRemoteStream:_connectRemoteStream,muteAudio:_muteAudio,unmuteAudio:_unmuteAudio,muteVideo:_muteVideo,unmuteVideo:_unmuteVideo};};exports.default=webrtc;

/***/ }
/******/ ])
});
;
//# sourceMappingURL=data:application/json;base64,