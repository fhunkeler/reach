/*!
 * The MIT License (MIT)
 * 
 * Copyright (c) 2015 Webcom
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["Reach"] = factory();
	else
		root["Reach"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';Object.defineProperty(exports,'__esModule',{value:true});exports.Reach=undefined;var _classCallCheck2=__webpack_require__(1),_classCallCheck3=_interopRequireDefault(_classCallCheck2),_createClass2=__webpack_require__(2),_createClass3=_interopRequireDefault(_createClass2),_adapter=__webpack_require__(6),_adapter2=_interopRequireDefault(_adapter),_actions=__webpack_require__(7),_actions2=_interopRequireDefault(_actions),_datarefs=__webpack_require__(8),_datarefs2=_interopRequireDefault(_datarefs),_reach=__webpack_require__(9),_reach2=_interopRequireDefault(_reach),_room=__webpack_require__(25),_room2=_interopRequireDefault(_room),_webrtcmngr=__webpack_require__(27),_webrtcmngr2=_interopRequireDefault(_webrtcmngr);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}var SDK_VERSION='0.0.1';var Reach=exports.Reach=(function(){function Reach(){var url=arguments.length<=0||arguments[0]===undefined?'http://webcom.orange.com/base/webrtc':arguments[0];(0,_classCallCheck3.default)(this,Reach);this.datarefs=(0,_datarefs2.default)(url);this.webrtcmngr=(0,_webrtcmngr2.default)(this.datarefs)}(0,_createClass3.default)(Reach,[{key:'Room',value:function Room(){for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key]}return _room2.default.apply(undefined,args.concat([this.datarefs,this.webrtcmngr]))}},{key:'Reach',value:function Reach(){for(var _len2=arguments.length,args=Array(_len2),_key2=0;_key2<_len2;_key2++){args[_key2]=arguments[_key2]}return _reach2.default.apply(undefined,args.concat([this.datarefs]))}}],[{key:'version',get:function get(){return SDK_VERSION}},{key:'actions',get:function get(){return _actions2.default}}]);return Reach})();module.exports=Reach;

/***/ },
/* 1 */
/***/ function(module, exports) {

	"use strict";
	
	exports.default = function (instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	};
	
	exports.__esModule = true;

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _defineProperty = __webpack_require__(3);
	
	var _defineProperty2 = _interopRequireDefault(_defineProperty);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = (function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];
	      descriptor.enumerable = descriptor.enumerable || false;
	      descriptor.configurable = true;
	      if ("value" in descriptor) descriptor.writable = true;
	      (0, _defineProperty2.default)(target, descriptor.key, descriptor);
	    }
	  }
	
	  return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);
	    if (staticProps) defineProperties(Constructor, staticProps);
	    return Constructor;
	  };
	})();
	
	exports.__esModule = true;

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(4), __esModule: true };

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	var $ = __webpack_require__(5);
	module.exports = function defineProperty(it, key, desc){
	  return $.setDesc(it, key, desc);
	};

/***/ },
/* 5 */
/***/ function(module, exports) {

	var $Object = Object;
	module.exports = {
	  create:     $Object.create,
	  getProto:   $Object.getPrototypeOf,
	  isEnum:     {}.propertyIsEnumerable,
	  getDesc:    $Object.getOwnPropertyDescriptor,
	  setDesc:    $Object.defineProperty,
	  setDescs:   $Object.defineProperties,
	  getKeys:    $Object.keys,
	  getNames:   $Object.getOwnPropertyNames,
	  getSymbols: $Object.getOwnPropertySymbols,
	  each:       [].forEach
	};

/***/ },
/* 6 */
/***/ function(module, exports) {

	'use strict';window.RTCPeerConnection=null;window.getUserMedia=null;window.attachMediaStream=null;window.reattachMediaStream=null;window.webrtcDetectedBrowser=null;window.webrtcDetectedVersion=null;function fixIceServer(iceServer){if(iceServer.hasOwnProperty('urls')){iceServer.url=iceServer.urls;delete iceServer.urls}if(iceServer.hasOwnProperty('url')&&iceServer.url.toLowerCase().startsWith('turns')&&navigator.mozGetUserMedia){console.warn('(ReachSDK::maybeFixConfiguration) '+'turns detected on firefox -> ignore this entry')}}function maybeFixConfiguration(pcConfig){if(pcConfig===null){return}if(pcConfig.iceServers&&pcConfig.iceServers.length>0){var mTempsServers=[];for(var i=pcConfig.iceServers.length-1;i>=0;i--){var iceServer=pcConfig.iceServers[i];fixIceServer(iceServer);mTempsServers.push(iceServer)}pcConfig.iceServers=mTempsServers}}function createTurnServerConfig(url,username,password){var legacy=arguments.length<=3||arguments[3]===undefined?false:arguments[3],iceServer=undefined;if(legacy){var turn_url_parts=url.split('?');if(turn_url_parts.length===1||turn_url_parts[1].indexOf('transport=udp')===0){iceServer={url:turn_url_parts[0],credential:password,username:username}}}else {iceServer={url:url,credential:password,username:username}}return iceServer}if(navigator.mozGetUserMedia){window.webrtcDetectedBrowser='firefox';window.webrtcDetectedVersion=parseInt(navigator.userAgent.match(/Firefox\/([0-9]+)\./)[1],10);window.RTCPeerConnection=function(pcConfig,pcConstraints){maybeFixConfiguration(pcConfig);return new mozRTCPeerConnection(pcConfig,pcConstraints)};window.RTCSessionDescription=mozRTCSessionDescription;window.RTCIceCandidate=mozRTCIceCandidate;window.getUserMedia=navigator.mozGetUserMedia.bind(navigator);navigator.getUserMedia=getUserMedia;window.createIceServer=function(url,username,password){var iceServer=null,url_parts=url.split(':');if(url_parts[0].indexOf('stun')===0){iceServer={url:url}}else if(url_parts[0].indexOf('turn')===0){iceServer=createTurnServerConfig(url,username,password,window.webrtcDetectedVersion<27)}return iceServer};window.createIceServers=function(urls,username,password){var iceServers=[];for(var i=0;i<urls.length;i++){var iceServer=window.createIceServer(urls[i],username,password);if(iceServer!==null){iceServers.push(iceServer)}}return iceServers};window.detachMediaStream=function(element){if(element){element.mozSrcObject=null;element.pause()}};window.attachMediaStream=function(element,stream){try{if(element&&stream){element.mozSrcObject=stream;if(element.play&&typeof element.play=='function'){element.play()}else {console.warn('(ReachSDK::attachMediaStream)element.play not available')}}else {console.error('ReachSDK::attachMediaStream->parameters not valid')}}catch(e) {console.error('(ReachSDK::attachMediaStream)Exception='+e)}};window.reattachMediaStream=function(to,from){if(to&&from){to.mozSrcObject=from.mozSrcObject;to.play()}else {console.error('ReachSDK::reattachMediaStream->parameters not valid')}};if(!MediaStream.prototype.getVideoTracks){MediaStream.prototype.getVideoTracks=function(){return []}}if(!MediaStream.prototype.getAudioTracks){MediaStream.prototype.getAudioTracks=function(){return []}}}else if(navigator.webkitGetUserMedia){window.webrtcDetectedBrowser='chrome';window.webrtcDetectedVersion=parseInt(navigator.userAgent.match(/Chrom(e|ium)\/([0-9]+)\./)[2],10);window.createIceServer=function(url,username,password){var iceServer=null,url_parts=url.split(':');if(url_parts[0].indexOf('stun')===0){iceServer={url:url}}else if(url_parts[0].indexOf('turn')===0){iceServer=createTurnServerConfig(url,password,username)}return iceServer};window.createIceServers=function(urls,username,password){var iceServers=[];if(window.webrtcDetectedVersion>=34){iceServers={urls:urls,credential:password,username:username}}else {for(var i=0;i<urls.length;i++){var iceServer=window.createIceServer(urls[i],username,password);if(iceServer!==null){iceServers.push(iceServer)}}}return iceServers};window.RTCPeerConnection=function(pcConfig,pcConstraints){if(window.webrtcDetectedVersion<34){maybeFixConfiguration(pcConfig)}return new webkitRTCPeerConnection(pcConfig,pcConstraints)};window.getUserMedia=navigator.webkitGetUserMedia.bind(navigator);navigator.getUserMedia=getUserMedia;window.attachMediaStream=function(element,stream){try{if(element&&stream){element.src=URL.createObjectURL(stream);element.autoplay=true}else {console.error('ReachSDK::attachMediaStream ->parameters not valid')}}catch(e) {console.error('(ReachSDK::attachMediaStream)Exception='+e)}};window.detachMediaStream=function(element){if(element){if(typeof element.srcObject!=='undefined'){element.srcObject=''}else if(typeof element.mozSrcObject!=='undefined'){element.mozSrcObject=''}else if(typeof element.src!=='undefined'){element.src=''}else {console.log('Error attaching stream to element.')}}};window.reattachMediaStream=function(to,from){if(to&&from){to.src=from.src}else {console.error('ReachSDK::reattachMediaStream media stream->parameters not valid')}}}else {throw new Error('Browser does not appear to be WebRTC-capable')}

/***/ },
/* 7 */
/***/ function(module, exports) {

	'use strict';Object.defineProperty(exports,'__esModule',{value:true});exports.default={ACTION_TYPE_AUDIO:'audio',ACTION_TYPE_VIDEO:'video',ACTION_TYPE_CHAT:'chat',ACTION_TYPE_AUDIO_VIDEO:'audio-video',ACTION_TYPE_SCREEN_SHARING:'screen-sharing',ACTION_TYPE_CALL:'call'};

/***/ },
/* 8 */
/***/ function(module, exports) {

	'use strict';Object.defineProperty(exports,'__esModule',{value:true});exports.default=function(WEBCOMBASE_URL){var _datastore=null,_rooms=null,_reach=null,_webrtc=null,_sipPhoneNumbers=null;function _initChildren(){_rooms=_datastore.child('roomsList');_reach=_datastore.child('reach');_webrtc=_datastore.child('webrtc');_sipPhoneNumbers=_datastore.child('sipPhoneNumbers')}function _init(){_datastore=new Webcom(WEBCOMBASE_URL);_initChildren()}function _setWebcomBaseUrl(p_webcombase_url){_datastore=new Webcom(p_webcombase_url);_initChildren()}function _getWebcomBaseUrl(){if(_datastore){return _datastore.toString()}return undefined}function _setDatastore(p_datastore){_datastore=p_datastore;_initChildren()}function _getDatastore(){return _datastore}function _setRooms(p_rooms){_rooms=p_rooms}function _getRooms(){return _rooms}function _setReach(p_reach){_reach=p_reach}function _getReach(){return _reach}function _setWebrtc(p_webrtc){_webrtc=p_webrtc}function _getWebrtc(){return _webrtc}function _setSipPhoneNumbers(p_sipPhoneNumbers){_sipPhoneNumbers=p_sipPhoneNumbers}function _getSipPhoneNumbers(){return _sipPhoneNumbers}_init();return {setWebcomBaseUrl:_setWebcomBaseUrl,getWebcomBaseUrl:_getWebcomBaseUrl,setDatastore:_setDatastore,getDatastore:_getDatastore,setRooms:_setRooms,getRooms:_getRooms,setReach:_setReach,getReach:_getReach,setWebrtc:_setWebrtc,getWebrtc:_getWebrtc,setSipPhoneNumbers:_setSipPhoneNumbers,getSipPhoneNumbers:_getSipPhoneNumbers}};

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';Object.defineProperty(exports,'__esModule',{value:true});var _keys=__webpack_require__(10),_keys2=_interopRequireDefault(_keys),_stringify=__webpack_require__(22),_stringify2=_interopRequireDefault(_stringify),_utils=__webpack_require__(24),_utils2=_interopRequireDefault(_utils);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}var INVITATION_ONGOING='ONGOING',INVITATION_ACCEPTED='ACCEPTED',INVITATION_REJECTED='REJECTED',INVITATION_CANCELED='CANCELED',DEVICE_STATUS_CONNECTED='CONNECTED',ROOM_STATUS_OPEN='OPEN',reach=function reach(p_me,datarefs){var _this=this,me=p_me,dataref=datarefs.getReach(),onUserAddedCb=null,onUserChangedCb=null,onUserRemovedCb=null,newInviteCb=null,onRoomInviteChangedCb=null,mOutgoingInvites=[],mIncomingInvitation=[],automaticRejectTimeOut=null,automaticRejectReason=null,mDeviceId=null;function init(){mDeviceId=dataref.child('userList/'+me+'/connectedList/'+_utils2.default.appInstanceId);mDeviceId.onDisconnect().remove();mDeviceId.child('status').set(DEVICE_STATUS_CONNECTED);try{(function(){var description=mDeviceId.child('description');if(_utils2.default.appInstanceId){description.child('appInstanceId').set(_utils2.default.appInstanceId)}var navigatorData={},properties=['appCodeName','appName','appVersion','buildID','cookieEnabled','language','onLine','oscpu','platform','product','productSub','securityPolicy','userAgent','vendor','vendorSub'];properties.forEach(function(property){if(navigator[property]){navigatorData[property]=navigator[property]}});description.child('navigator').set(navigatorData)})()}catch(e) {console.error('(ReachSDK::reach::init)failed to get information about device. error='+e)}dataref.child('userList/'+me+'/wasInsideReach').set(true)}function _isConnected(p_userId,p_cb){console.log('(ReachSDK::reach::_isConnected)userId: '+p_userId);dataref.child('userList/'+p_userId+'/connectedList').once('value',function(snapshot){if(p_cb&&typeof p_cb=='function'){p_cb(snapshot.val()!==null)}})}function _isRegistered(p_userId,p_cb){console.log('(ReachSDK::reach::_isRegistered)userId: '+p_userId);dataref.child('userList/'+p_userId+'/wasInsideReach').once('value',function(snapshot){if(p_cb&&typeof p_cb=='function'){p_cb(snapshot.val()!==null)}})}function _setConnectedStatus(p_status){if(mDeviceId){mDeviceId.child('status').set(p_status)}}function _setOnUserAdded(p_cb){if(onUserAddedCb){dataref.child('userList').off('child_added',onUserAddedCb);onUserAddedCb=null}if(p_cb&&typeof p_cb=='function'){onUserAddedCb=function(snapshot){console.log('(ReachSDK::reach::onUserAddedCb) '+snapshot.name()+'='+(0,_stringify2.default)(snapshot.val()));var obj={};obj[snapshot.name()]=snapshot.val();p_cb(obj)};dataref.child('userList').on('child_added',onUserAddedCb)}}function _setOnUserChanged(p_cb){if(onUserChangedCb){dataref.child('userList').off('child_changed',onUserChangedCb);onUserChangedCb=null}if(p_cb&&typeof p_cb=='function'){onUserChangedCb=function(snapshot){console.log('(ReachSDK::reach::onUserChangedCb) '+snapshot.name()+'='+(0,_stringify2.default)(snapshot.val()));var obj={};obj[snapshot.name()]=snapshot.val();p_cb(obj)};dataref.child('userList').on('child_changed',onUserChangedCb)}}function _setOnUserRemoved(p_cb){if(onUserRemovedCb){dataref.child('userList').off('child_removed',onUserRemovedCb);onUserRemovedCb=null}if(p_cb&&typeof p_cb=='function'){onUserRemovedCb=function(snapshot){console.log('(ReachSDK::reach::onUserRemovedCb) '+snapshot.name()+'='+(0,_stringify2.default)(snapshot.val()));var obj={};obj[snapshot.name()]=snapshot.val();p_cb(obj)};dataref.child('userList').on('child_removed',onUserRemovedCb)}}function _setOnNewRoomInvitation(p_onNewRoomInviteCb){if(newInviteCb){dataref.child('invitationList/'+me).off('child_added',newInviteCb);newInviteCb=null}if(p_onNewRoomInviteCb&&typeof p_onNewRoomInviteCb=='function'){newInviteCb=function(snapshot){if(snapshot.val().status===INVITATION_ONGOING){(function(){console.log('(ReachSDK::reach::_setOnNewRoomInvitation)new Invite received,id) '+snapshot.name()+',content='+(0,_stringify2.default)(snapshot.val()));var invitationId=snapshot.name();if(!mIncomingInvitation){mIncomingInvitation=[]}if(mIncomingInvitation[invitationId]){if(mIncomingInvitation[invitationId].timeout){clearTimeout(mIncomingInvitation[invitationId].timeout)}delete mIncomingInvitation[invitationId]}mIncomingInvitation[invitationId]={};var obj={};obj[invitationId]=snapshot.val();p_onNewRoomInviteCb(obj);var invitationRef=dataref.child('invitationList/'+me+'/'+invitationId);if(automaticRejectTimeOut){mIncomingInvitation[invitationId].timeout=setTimeout(function(){if(automaticRejectTimeOut){console.log('(ReachSDK::reach::_setOnNewRoomInvitation)automatic reject of Invite received='+(0,_stringify2.default)(snapshot.val()));invitationRef.onDisconnect().cancel();if(automaticRejectReason){invitationRef.update({timestamp_end:Webcom.ServerValue.TIMESTAMP,status:INVITATION_REJECTED,status_info:automaticRejectReason})}else {invitationRef.update({timestamp_end:Webcom.ServerValue.TIMESTAMP,status:INVITATION_REJECTED})}}},automaticRejectTimeOut)}invitationRef.once('child_changed',function(snapshot){if(snapshot&&snapshot.name()==='status'){snapshot.ref().parent().once('value',function(snapshot2){var cb_invitationId=undefined,cb_obj_content=undefined;if(snapshot2){cb_invitationId=snapshot.ref().parent().name();cb_obj_content=snapshot2.val();var cb_obj={};cb_obj[cb_invitationId]=cb_obj_content;if(mIncomingInvitation&&mIncomingInvitation[cb_invitationId]&&mIncomingInvitation[cb_invitationId].timeout){clearTimeout(mIncomingInvitation[cb_invitationId].timeout)}console.log('(ReachSDK::reach::_setOnNewRoomInvitation)Invite changed,id=) '+cb_invitationId+', new content='+(0,_stringify2.default)(cb_obj_content));if(cb_obj&&onRoomInviteChangedCb){onRoomInviteChangedCb(cb_obj)}delete mIncomingInvitation[cb_invitationId]}})}})})()}};dataref.child('invitationList/'+me).on('child_added',newInviteCb)}}function _setOnRoomInvitationChanged(p_onRoomInviteChangedCb){if(onRoomInviteChangedCb){onRoomInviteChangedCb=null}if(p_onRoomInviteChangedCb&&typeof p_onRoomInviteChangedCb=='function'){onRoomInviteChangedCb=p_onRoomInviteChangedCb}}function _setNewRoomInvitationTimeout(p_timeout,p_reason){if(automaticRejectTimeOut){automaticRejectTimeOut=null}if(automaticRejectReason){automaticRejectReason=null}if(p_timeout&&p_timeout===parseInt(p_timeout,10)&&p_timeout>0){console.log('(ReachSDK::reach::_setNewRoomInvitationTimeout)timeout='+p_timeout);automaticRejectTimeOut=p_timeout}if(p_reason){automaticRejectReason=p_reason}}function _isUserPresentInRoom(p_roomId,p_user,p_cb){console.log('(ReachSDK::reach::_isUserPresentInRoom)p_roomId='+p_roomId+' p_user='+p_user);if(!(p_roomId&&typeof p_roomId=='string')){console.error('(ReachSDK::reach::_isUserPresentInRoom)parameter p_roomid is incorrect. Expecting non empty string');return}if(!(p_user&&typeof p_user=='string')){console.error('(ReachSDK::reach::_isUserPresentInRoom)parameter p_user is incorrect. Expecting non empty string');return}if(!(p_cb&&typeof p_cb=='function')){console.error('(ReachSDK::reach::_isUserPresentInRoom)parameter p_cb is incorrect. if defined, expecting a function');return}datarefs.getRooms().child(p_roomId+'/participantList/'+p_user+'/wasInsideRoom').once('value',function(snapshot){var wasPresent=snapshot.val()!==null;console.log('(ReachSDK::reach::_isUserPresentInRoom)p_roomId='+p_roomId+',p_user='+p_user+',result='+wasPresent);p_cb(wasPresent,p_roomId,p_user)})}function _cancelInvitation(p_roomId,p_guestIds,p_cb){if(!(p_roomId&&typeof p_roomId=='string')){console.error('(ReachSDK::reach::_cancelInvitation)parameter p_roomid is incorrect. Expecting non empty string');return}if(p_guestIds&&!p_guestIds instanceof Array){console.error('(ReachSDK::reach::_cancelInvitation)parameter p_guestIds is incorrect. Expecting an Array');return}console.log(' (ReachSDK::reach::_cancelInvitation)p_roomId='+p_roomId+', p_guestIds='+(0,_stringify2.default)(p_guestIds));if(mOutgoingInvites&&mOutgoingInvites[p_roomId]){if(p_guestIds){p_guestIds.forEach(function(guestId,i){if(!(guestId&&typeof guestId=='string')){console.error('(ReachSDK::reach::inviteToRoom)parameter p_guestIds['+i+'] is incorrect. Expecting non empty string')}else if(mOutgoingInvites[p_roomId][guestId]){if(mOutgoingInvites[p_roomId][guestId].InviteDataref){mOutgoingInvites[p_roomId][guestId].InviteDataref.onDisconnect().cancel();if(mOutgoingInvites[p_roomId][guestId].InviteChangedCb&&typeof mOutgoingInvites[p_roomId][guestId].InviteChangedCb=='function'){mOutgoingInvites[p_roomId][guestId].InviteDataref.off('child_changed',mOutgoingInvites[p_roomId][guestId].InviteChangedCb)}mOutgoingInvites[p_roomId][guestId].InviteDataref.once('value',function(dataSnapshot){var cb_status=undefined,cb_guestId=undefined,cb_roomId=undefined;if(dataSnapshot&&dataSnapshot.val()){cb_status=dataSnapshot.val().status;cb_roomId=dataSnapshot.val().room;cb_guestId=dataSnapshot.ref().parent().name();if(cb_status&&cb_status===INVITATION_ONGOING){mOutgoingInvites[cb_roomId][cb_guestId].InviteDataref.update({timestamp_end:Webcom.ServerValue.TIMESTAMP,status:INVITATION_CANCELED});if(mOutgoingInvites[cb_roomId][cb_guestId].statusChangedCb&&typeof mOutgoingInvites[cb_roomId][cb_guestId].statusChangedCb=='function'){mOutgoingInvites[cb_roomId][cb_guestId].statusChangedCb(cb_roomId,cb_guestId,INVITATION_CANCELED)}console.log('(ReachSDK::reach::_cancelInvitation)deleting Invite to room '+cb_roomId+' for invitee '+cb_guestId)}else {console.warn('(ReachSDK::reach::_cancelInvitation)cannot delete intivation to room '+cb_roomId+' for guest '+cb_guestId+' Invitation has been removed/rejected/accepted')}}delete mOutgoingInvites[p_roomId][guestId];if(p_cb&&typeof p_cb=='function'){p_cb(guestId)}})}else {delete mOutgoingInvites[p_roomId][guestId];if(p_cb&&typeof p_cb=='function'){p_cb(guestId)}}}else {if(p_cb&&typeof p_cb=='function'){p_cb(guestId)}}})}else {(0,_keys2.default)(mOutgoingInvites[p_roomId]).forEach(function(invitee){_cancelInvitation(p_roomId,[invitee],p_cb)})}}else {console.warn('(ReachSDK::reach::_cancelInvitation) Invite to room '+p_roomId+' not found')}}function _inviteToRoom(p_roomId,p_guestIds,p_topic,p_statusChangedCb){if(!(p_roomId&&typeof p_roomId=='string')){console.error('(ReachSDK::reach::inviteToRoom)parameter p_roomid is incorrect. Expecting non empty string');return}if(!(p_topic&&typeof p_topic=='string')){console.error('(ReachSDK::reach::inviteToRoom)parameter p_topic is incorrect. Expecting non empty string');return}if(p_statusChangedCb&&typeof p_statusChangedCb!='function'){console.warn('(ReachSDK::reach::inviteToRoom)parameter p_statusChangedCb is incorrect. if defined, expecting a function')}if(!(p_guestIds&&p_guestIds instanceof Array)){console.error('(ReachSDK::reach::inviteToRoom)parameter p_guestIds is incorrect. Expecting an Array');return}datarefs.getRooms().child(p_roomId).child('commonDataList').update({status:ROOM_STATUS_OPEN,owner:me});var _isUserPresentInRoomCb=function _isUserPresentInRoomCb(isAlreadyPresent,p_roomId2,p_guestId2){if(!isAlreadyPresent){datarefs.getRooms().child(p_roomId2+'/participantList/'+p_guestId2).update({connected:false,wasInsideRoom:false})}},_InviteChangedCb=function _InviteChangedCb(snapshot){console.log('(ReachSDK::reach::inviteToRoom::_InviteChangedCb)');if(snapshot&&snapshot.name()==='status'){var cb_guestId2=snapshot.ref().parent().parent().name();console.log('(ReachSDK::reach::inviteToRoom::_InviteChangedCb)cb_guestId2='+cb_guestId2);if(mOutgoingInvites&&mOutgoingInvites[p_roomId]&&mOutgoingInvites[p_roomId][cb_guestId2]&&mOutgoingInvites[p_roomId][cb_guestId2].InviteChangedCb){mOutgoingInvites[p_roomId][cb_guestId2].InviteDataref.off('child_changed',mOutgoingInvites[p_roomId][cb_guestId2].InviteChangedCb)}snapshot.ref().parent().once('value',function(snapshot2){var cb_status=undefined,cb_guestId=undefined,cb_roomId=undefined,cb_status_info=undefined;if(snapshot2){cb_status=snapshot2.val().status;cb_roomId=snapshot2.val().room;cb_status_info=snapshot2.val().status_info;cb_guestId=snapshot2.ref().parent().name();console.log('(ReachSDK::reach::inviteToRoom::_InviteChangedCb)roomId='+cb_roomId+' invitee='+cb_guestId+' new invitation status='+cb_status+' status info='+cb_status_info);if(mOutgoingInvites&&mOutgoingInvites[cb_roomId]&&mOutgoingInvites[cb_roomId][cb_guestId]&&mOutgoingInvites[cb_roomId][cb_guestId].InviteDataref){mOutgoingInvites[cb_roomId][cb_guestId].InviteDataref.onDisconnect().cancel();if(mOutgoingInvites[cb_roomId][cb_guestId].statusChangedCb&&typeof mOutgoingInvites[cb_roomId][cb_guestId].statusChangedCb=='function'){mOutgoingInvites[cb_roomId][cb_guestId].statusChangedCb(cb_roomId,cb_guestId,cb_status,cb_status_info)}else {console.warn('(ReachSDK::reach::inviteToRoom::_InviteChangedCb)cannot retrieve mathing p_statusChangedCb')}delete mOutgoingInvites[cb_roomId][cb_guestId]}else {console.warn('(ReachSDK::reach::inviteToRoom::_InviteChangedCb)cannot retrieve mathing mOutgoingInvite')}}else {console.warn('(ReachSDK::reach::inviteToRoom::_InviteChangedCb)cannot retrieve invitation')}})}};p_guestIds.forEach(function(mGuestId,i){if(!(mGuestId&&typeof mGuestId=='string')){console.error('(ReachSDK::reach::inviteToRoom)parameter p_guestIds['+i+'] is incorrect. Expecting non empty string')}else {console.log('(ReachSDK::reach::inviteToRoom)roomId='+p_roomId+' invitee='+mGuestId.toString());if(mOutgoingInvites[p_roomId]&&mOutgoingInvites[p_roomId][mGuestId]){_cancelInvitation(p_roomId,[mGuestId],function(p_guestId){if(p_guestId&&p_guestId===mGuestId){_inviteToRoom(p_roomId,[p_guestId],p_topic,p_statusChangedCb)}});return}if(!mOutgoingInvites[p_roomId]){mOutgoingInvites[p_roomId]=[]}mOutgoingInvites[p_roomId][mGuestId]={};_isUserPresentInRoom(p_roomId,mGuestId,_isUserPresentInRoomCb);mOutgoingInvites[p_roomId][mGuestId].InviteDataref=dataref.child('invitationList').child(mGuestId).push({from:me,room:p_roomId,timestamp_creation:Webcom.ServerValue.TIMESTAMP,topic:p_topic,status:INVITATION_ONGOING});console.log('(ReachSDK::reach::inviteToRoom)InviteDataref='+mOutgoingInvites[p_roomId][mGuestId].InviteDataref.toString());mOutgoingInvites[p_roomId][mGuestId].InviteChangedCb=_InviteChangedCb;mOutgoingInvites[p_roomId][mGuestId].InviteDataref.on('child_changed',mOutgoingInvites[p_roomId][mGuestId].InviteChangedCb);mOutgoingInvites[p_roomId][mGuestId].statusChangedCb=p_statusChangedCb;mOutgoingInvites[p_roomId][mGuestId].InviteDataref.onDisconnect().update({timestamp_end:Webcom.ServerValue.TIMESTAMP,status:INVITATION_CANCELED})}})}function _acceptInvitation(p_invitation){var inviteId=(0,_keys2.default)(p_invitation)[0];if(!inviteId){console.error('(ReachSDK::reach::_acceptInvitation)parameter p_invitation is incorrect. cannot get invitation Id');return}if(!p_invitation[inviteId]){console.error('(ReachSDK::reach::_acceptInvitation)parameter p_invitation is incorrect. cannot get invitation data');return}dataref.child('invitationList/'+me+'/'+inviteId).once('value',function(dataSnapshot){var cb_status=undefined,cb_guestId=undefined,cb_invitationId=undefined;if(dataSnapshot&&dataSnapshot.val()){cb_invitationId=dataSnapshot.name();cb_status=dataSnapshot.val().status;cb_guestId=dataSnapshot.ref().parent().name();if(cb_status&&cb_status===INVITATION_ONGOING){console.log('(ReachSDK::reach::_acceptInvitation)inviteId='+inviteId+',data='+(0,_stringify2.default)(p_invitation[inviteId]));dataref.child('invitationList/'+cb_guestId+'/'+cb_invitationId).update({timestamp_end:Webcom.ServerValue.TIMESTAMP,status:INVITATION_ACCEPTED})}else {console.warn('(ReachSDK::reach::_acceptInvitation)inviteId='+cb_invitationId+',data='+(0,_stringify2.default)(p_invitation[inviteId])+', cannot be accepted. It has been removed or canceled')}}})}function _rejectInvitation(p_invitation,p_reason){var inviteId=(0,_keys2.default)(p_invitation)[0];if(!inviteId){console.error('(ReachSDK::reach::_rejectInvitation)parameter p_invitation is incorrect. cannot get invitation Id');return}if(!p_invitation[inviteId]){console.error('(ReachSDK::reach::_rejectInvitation)parameter p_invitation is incorrect. cannot get invitation data');return}dataref.child('invitationList/'+me+'/'+inviteId).once('value',function(dataSnapshot){var cb_status=undefined,cb_guestId=undefined,cb_invitationId=undefined;if(dataSnapshot&&dataSnapshot.val()){cb_invitationId=dataSnapshot.name();cb_status=dataSnapshot.val().status;cb_guestId=dataSnapshot.ref().parent().name();if(cb_status&&cb_status===INVITATION_ONGOING){console.log('(ReachSDK::reach::_rejectInvitation)inviteId='+inviteId+',data='+(0,_stringify2.default)(p_invitation[inviteId]));if(p_reason){dataref.child('invitationList/'+cb_guestId+'/'+cb_invitationId).update({timestamp_end:Webcom.ServerValue.TIMESTAMP,status_info:p_reason,status:INVITATION_REJECTED})}else {dataref.child('invitationList/'+cb_guestId+'/'+cb_invitationId).update({timestamp_end:Webcom.ServerValue.TIMESTAMP,status:INVITATION_REJECTED})}}else {console.warn('(ReachSDK::reach::_rejectInvitation)inviteId='+cb_invitationId+',data='+(0,_stringify2.default)(p_invitation[inviteId])+', cannot be rejected. It has been removed or canceled')}}})}function _isRoomActive(p_invitation,p_cb){if(p_invitation&&p_cb&&typeof p_cb=='function'){(function(){var inviteId=(0,_keys2.default)(p_invitation)[0];console.log('(ReachSDK::reach::_isRoomActive)inviteId='+inviteId);var roomId=p_invitation[inviteId].room;datarefs.getRooms().child(roomId+'/commonDataList/status').once('value',function(snapshot){var opened=snapshot&&snapshot.val()&&snapshot.val()===ROOM_STATUS_OPEN;console.log('(ReachSDK::reach::_isRoomActive)inviteId='+inviteId+' result='+opened);p_cb(opened)})})()}}function _archiveInvitations(p_userId,p_cb){console.log('(ReachSDK::reach::_archiveInvitations)userId='+p_userId);dataref.child('invitationList/'+me).once('value',function(snapshot){if(snapshot&&snapshot.hasChildren()){(function(){var nbChildren=snapshot.numChildren(),nbChildrenProcessed=0;snapshot.forEach(function(childSnapshot){if(childSnapshot&&childSnapshot.val()){console.log('(ReachSDK::reach::_archiveInvitations)userId='+p_userId+' inviteId='+childSnapshot.name());if(childSnapshot.val().status===INVITATION_REJECTED||childSnapshot.val().status===INVITATION_CANCELED){dataref.child('invitationListHistory/'+p_userId+'/'+childSnapshot.name()).update(childSnapshot.val());childSnapshot.ref().remove();nbChildrenProcessed++;if(nbChildrenProcessed>=nbChildren&&p_cb&&typeof p_cb=='function'){p_cb()}}else {var inviteData={};inviteData[childSnapshot.name()]=childSnapshot.val();_isRoomActive(inviteData,function(isActive){if(isActive){nbChildrenProcessed++;if(nbChildrenProcessed>=nbChildren&&p_cb&&typeof p_cb=='function'){p_cb()}}else {if(childSnapshot.val().status===INVITATION_ONGOING){var newValue=childSnapshot.val();newValue.status=INVITATION_CANCELED;dataref.child('invitationListHistory/'+p_userId+'/'+childSnapshot.name()).set(newValue)}else {dataref.child('invitationListHistory/'+p_userId+'/'+childSnapshot.name()).set(childSnapshot.val())}childSnapshot.ref().remove();nbChildrenProcessed++;if(nbChildrenProcessed>=nbChildren&&p_cb&&typeof p_cb=='function'){p_cb()}}})}}else {if(p_cb&&typeof p_cb=='function'){p_cb()}}})})()}else {if(p_cb&&typeof p_cb=='function'){p_cb()}}})}function _close(){console.log('(ReachSDK::reach::_close)');if(newInviteCb){dataref.child('invitationList').child(me).off('child_added',newInviteCb);newInviteCb=null}if(onUserAddedCb){dataref.child('userList').off('child_added',onUserAddedCb);onUserAddedCb=null}if(onUserChangedCb){dataref.child('userList').off('child_changed',onUserChangedCb);onUserChangedCb=null}if(onUserRemovedCb){dataref.child('userList').off('child_removed',onUserRemovedCb);onUserRemovedCb=null}if(mOutgoingInvites){mOutgoingInvites.forEach(function(roomId){mOutgoingInvites[roomId].forEach(function(invitee){if(invitee.InviteDataref){invitee.InviteDataref.onDisconnect().cancel();invitee.InviteDataref.update({status:INVITATION_CANCELED,timestamp_end:Webcom.ServerValue.TIMESTAMP})}})});mOutgoingInvites=[]}if(automaticRejectTimeOut){automaticRejectTimeOut=null}if(automaticRejectReason){automaticRejectReason=null}if(mDeviceId){mDeviceId.remove();mDeviceId=null}}init();return {getMe:function getMe(){return me},isConnected:_isConnected,isRegistered:_isRegistered,setConnectedStatus:_setConnectedStatus,setOnUserAdded:_setOnUserAdded,setOnUserChanged:_setOnUserChanged,setOnUserRemoved:_setOnUserRemoved,inviteToRoom:_inviteToRoom,cancelInvitation:_cancelInvitation,setOnNewRoomInvitation:_setOnNewRoomInvitation,setOnRoomInvitationChanged:_setOnRoomInvitationChanged,setNewRoomInvitationTimeout:_setNewRoomInvitationTimeout,archiveMyInvitations:function archiveMyInvitations(p_cb){return _archiveInvitations(me,p_cb)},acceptInvitation:_acceptInvitation,rejectInvitation:_rejectInvitation,on:function on(p_evt,p_cb){switch(p_evt){case 'newRoomInvitation':_this.setOnNewRoomInvitation(p_cb);break;case 'roomInvitationChanged':_this.setOnRoomInvitationChanged(p_cb);break;case 'userAdded':_this.setOnUserAdded(p_cb);break;case 'userChanged':_this.setOnUserChanged(p_cb);break;case 'userRemoved':_this.setOnUserRemoved(p_cb);break;default:console.error('reach.set: no such event');return -1;}},close:_close}};exports.default=reach;

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(11), __esModule: true };

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(12);
	module.exports = __webpack_require__(18).Object.keys;

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.14 Object.keys(O)
	var toObject = __webpack_require__(13);
	
	__webpack_require__(15)('keys', function($keys){
	  return function keys(it){
	    return $keys(toObject(it));
	  };
	});

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	// 7.1.13 ToObject(argument)
	var defined = __webpack_require__(14);
	module.exports = function(it){
	  return Object(defined(it));
	};

/***/ },
/* 14 */
/***/ function(module, exports) {

	// 7.2.1 RequireObjectCoercible(argument)
	module.exports = function(it){
	  if(it == undefined)throw TypeError("Can't call method on  " + it);
	  return it;
	};

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	// most Object methods by ES6 should accept primitives
	var $export = __webpack_require__(16)
	  , core    = __webpack_require__(18)
	  , fails   = __webpack_require__(21);
	module.exports = function(KEY, exec){
	  var fn  = (core.Object || {})[KEY] || Object[KEY]
	    , exp = {};
	  exp[KEY] = exec(fn);
	  $export($export.S + $export.F * fails(function(){ fn(1); }), 'Object', exp);
	};

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	var global    = __webpack_require__(17)
	  , core      = __webpack_require__(18)
	  , ctx       = __webpack_require__(19)
	  , PROTOTYPE = 'prototype';
	
	var $export = function(type, name, source){
	  var IS_FORCED = type & $export.F
	    , IS_GLOBAL = type & $export.G
	    , IS_STATIC = type & $export.S
	    , IS_PROTO  = type & $export.P
	    , IS_BIND   = type & $export.B
	    , IS_WRAP   = type & $export.W
	    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
	    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]
	    , key, own, out;
	  if(IS_GLOBAL)source = name;
	  for(key in source){
	    // contains in native
	    own = !IS_FORCED && target && key in target;
	    if(own && key in exports)continue;
	    // export native or passed
	    out = own ? target[key] : source[key];
	    // prevent global pollution for namespaces
	    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
	    // bind timers to global for call from export context
	    : IS_BIND && own ? ctx(out, global)
	    // wrap global constructors for prevent change them in library
	    : IS_WRAP && target[key] == out ? (function(C){
	      var F = function(param){
	        return this instanceof C ? new C(param) : C(param);
	      };
	      F[PROTOTYPE] = C[PROTOTYPE];
	      return F;
	    // make static versions for prototype methods
	    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
	    if(IS_PROTO)(exports[PROTOTYPE] || (exports[PROTOTYPE] = {}))[key] = out;
	  }
	};
	// type bitmap
	$export.F = 1;  // forced
	$export.G = 2;  // global
	$export.S = 4;  // static
	$export.P = 8;  // proto
	$export.B = 16; // bind
	$export.W = 32; // wrap
	module.exports = $export;

/***/ },
/* 17 */
/***/ function(module, exports) {

	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global = module.exports = typeof window != 'undefined' && window.Math == Math
	  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
	if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef

/***/ },
/* 18 */
/***/ function(module, exports) {

	var core = module.exports = {version: '1.2.6'};
	if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	// optional / simple context binding
	var aFunction = __webpack_require__(20);
	module.exports = function(fn, that, length){
	  aFunction(fn);
	  if(that === undefined)return fn;
	  switch(length){
	    case 1: return function(a){
	      return fn.call(that, a);
	    };
	    case 2: return function(a, b){
	      return fn.call(that, a, b);
	    };
	    case 3: return function(a, b, c){
	      return fn.call(that, a, b, c);
	    };
	  }
	  return function(/* ...args */){
	    return fn.apply(that, arguments);
	  };
	};

/***/ },
/* 20 */
/***/ function(module, exports) {

	module.exports = function(it){
	  if(typeof it != 'function')throw TypeError(it + ' is not a function!');
	  return it;
	};

/***/ },
/* 21 */
/***/ function(module, exports) {

	module.exports = function(exec){
	  try {
	    return !!exec();
	  } catch(e){
	    return true;
	  }
	};

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(23), __esModule: true };

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	var core = __webpack_require__(18);
	module.exports = function stringify(it){ // eslint-disable-line no-unused-vars
	  return (core.JSON && core.JSON.stringify || JSON.stringify).apply(JSON, arguments);
	};

/***/ },
/* 24 */
/***/ function(module, exports) {

	"use strict";Object.defineProperty(exports,"__esModule",{value:true});var utils=(function(){function s4(){return Math.floor((1+Math.random())*65536).toString(16).substring(1)}function _guid(){return ""+s4()+s4()+"-"+s4()+"-"+s4()+"-"+s4()+"-"+s4()+s4()+s4()}var _appInstanceId=_guid();return {appInstanceId:_appInstanceId}})();exports.default=utils;

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';Object.defineProperty(exports,'__esModule',{value:true});exports.default=function(p_me,p_roomId,datarefs,webrtcmngr){var roomId=p_roomId,me=p_me,dataref=datarefs.getRooms().child(roomId),roomWebrtcStacks={},mAvailableStreams=[],mStreams=[],mMutedStreams=[],remoteUnpublishedCb=null,instantMessageListCb=null,publishedMediaListCb=null,publishedMediaListCbForAvailableStream=null,unPublishedMediaListCb=null,unPublishedMediaListCbForAvailableStream=null,participantListJoinAddedCb=null,participantListJoinChangedCb=null,participantListLeaveCb=null;function _addAvailableStream(data){console.log('(ReachSDK::room['+roomId+']::_addAvailableStream)data='+(0,_stringify2.default)(data));mAvailableStreams.push(data)}function _removeAvailableStream(streamId){console.log('(ReachSDK::room['+roomId+']::_removeAvailableStream)streamId='+streamId);if(mAvailableStreams&&streamId){for(var i=mAvailableStreams.length-1;i>=0;i--){if(mAvailableStreams[i]&&(0,_keys2.default)(mAvailableStreams[i])[0]&&(0,_keys2.default)(mAvailableStreams[i])[0]===streamId){delete mAvailableStreams[i]}}}}function initWebcomListener(){if(!publishedMediaListCbForAvailableStream){publishedMediaListCbForAvailableStream=function(snapshot){var obj={},name=snapshot.name(),value=snapshot.val();console.log('(ReachSDK::room['+roomId+']::onPublishedStreamForAvailableStream)stream='+(0,_stringify2.default)(value));obj[name]=value;obj[name].roomId=roomId;_addAvailableStream(obj)};dataref.child('publishedMediaList').on('child_added',publishedMediaListCbForAvailableStream)}if(!unPublishedMediaListCbForAvailableStream){unPublishedMediaListCbForAvailableStream=function(snapshot){var streamId=snapshot.name();console.log('(ReachSDK::room['+roomId+']::onUnPublishedStreamForAvailableStream)stream='+streamId);_removeAvailableStream(streamId)};dataref.child('publishedMediaList').on('child_removed',unPublishedMediaListCbForAvailableStream)}}function init(){dataref.child('participantList/'+me).update({connected:true,wasInsideRoom:true});dataref.child('participantList/'+me+'/connected').onDisconnect().set(false);initWebcomListener()}function _getRoomId(){return roomId}function _getMe(){return me}function _setOnParticipantJoin(p_cb){var participantListRef=dataref.child('participantList');if(participantListJoinAddedCb){participantListRef.off('child_added',participantListJoinAddedCb);participantListJoinAddedCb=null}if(participantListJoinChangedCb){participantListRef.off('child_changed',participantListJoinChangedCb);participantListJoinChangedCb=null}if(p_cb&&typeof p_cb=='function'){participantListJoinAddedCb=function(snapshot){var user=snapshot.name();if(snapshot.val()&&snapshot.val().connected&&snapshot.val().wasInsideRoom){console.log('(ReachSDK::room['+roomId+']::_setOnParticipantJoin) user has joined: '+user);p_cb(user)}};participantListRef.on('child_added',participantListJoinAddedCb);participantListJoinChangedCb=function(snapshot){var user=snapshot.name();if(snapshot.val()&&snapshot.val().connected&&snapshot.val().wasInsideRoom){console.log('(ReachSDK::room['+roomId+']::_setOnParticipantJoin) user has joined: '+user);p_cb(user)}};participantListRef.on('child_changed',participantListJoinChangedCb)}else {console.error('(ReachSDK::room['+roomId+']::_setOnParticipantJoin)parameter incorrect. Expected function')}}function _setOnParticipantLeave(p_cb){if(participantListLeaveCb){dataref.child('participantList').off('child_changed',participantListLeaveCb);participantListLeaveCb=null}if(p_cb&&typeof p_cb=='function'){participantListLeaveCb=function(snapshot){var user=snapshot.name();if(snapshot.val()&&!snapshot.val().connected&&snapshot.val().wasInsideRoom){console.log('(ReachSDK::room['+roomId+']::_setOnParticipantLeave) user has left: '+user);p_cb(user)}};dataref.child('participantList').on('child_changed',participantListLeaveCb)}else {console.error('(ReachSDK::room['+roomId+']::_setOnParticipantLeave)parameter incorrect. Expected function')}}function _sendInstantMessage(p_message){if(p_message!==''){console.log('(ReachSDK::room['+roomId+']::sendInstantMessage)message='+p_message);dataref.child('instantMessageList').push({from:me,message:p_message,timestamp:Webcom.ServerValue.TIMESTAMP})}}function _setOnInstantMessage(p_cb){if(instantMessageListCb){dataref.child('instantMessageList').off('child_added',instantMessageListCb);instantMessageListCb=null}if(p_cb&&typeof p_cb=='function'){instantMessageListCb=function(snapshot){var obj=snapshot.val();console.log('(ReachSDK::room['+roomId+']::_setOnInstantMessage)receive InstantMessage='+(0,_stringify2.default)(obj));p_cb(obj)};dataref.child('instantMessageList').on('child_added',instantMessageListCb)}else {console.error('(ReachSDK::room['+roomId+']::_setOnInstantMessage)parameter incorrect. Expected function')}}function _publishStream(streamId,localVid,p_actionType,getLocalStreamCb){console.log('(ReachSDK::room['+roomId+']::publishStream)roomId='+roomId+',streamId='+streamId+',me='+me+',actionType='+p_actionType);if(!(streamId&&typeof streamId=='string')){console.error('(ReachSDK::reach::inviteToRoom)parameter streamId is incorrect. Expecting non empty string');return}var localDataRef=dataref.child('publishedMediaList').child(streamId),remoteDataRef=localDataRef.child('subscribersList'),pubAndSubscribe=function pubAndSubscribe(){localDataRef.set({from:me,appInstanceId:_utils2.default.appInstanceId,actionType:p_actionType});localDataRef.onDisconnect().remove();var addSubscribersListCb=function addSubscribersListCb(snapshot){var remoteAppInstanceId=snapshot.name(),data=snapshot.val(),_subscriberId=data.userId,_peercoId=data.peercoId,_peercoRef=data.peercoRef,isAudioMute=mMutedStreams[streamId]&&mMutedStreams[streamId].audio,isVideoMute=mMutedStreams[streamId]&&mMutedStreams[streamId].video,streamStackId=streamId+'_pub';console.log('(ReachSDK::room['+roomId+']::publishStream::addSubscribersListCb)subscriber '+_subscriberId+' to stream '+streamId+' added '+(0,_stringify2.default)(data));if(!roomWebrtcStacks[streamStackId]){roomWebrtcStacks[streamStackId]=[]}var mStackId=webrtcmngr.createWebrtc(localVid,remoteAppInstanceId,function(){console.log('(ReachSDK::room['+roomId+']::publishStream::addSubscribersListCb)subscriber '+_subscriberId+' to stream '+streamId+' connection lost')},true,p_actionType,_peercoId,_peercoRef,isAudioMute,isVideoMute);roomWebrtcStacks[streamStackId].push({stackId:mStackId,subscriberId:_subscriberId,isPublish:true,peercoId:_peercoId,peercoRef:_peercoRef})},removeSubscribersListCb=function removeSubscribersListCb(snapshot){var subscriberId=snapshot.name(),streamStacks=roomWebrtcStacks[streamId+'_pub'];if(subscriberId&&streamStacks){console.log('(ReachSDK::room['+roomId+']::publishStream::removeSubscribersListCb)subscriber '+subscriberId+' to stream '+streamId+' removed');for(var i=streamStacks.length-1;i>=0;i--){if(streamStacks[i].subscriberId===subscriberId){webrtcmngr.closeWebrtc(streamStacks[i].stackId,true)}}delete roomWebrtcStacks[streamId+'_pub']}};mStreams[streamId]={addSubscribersListCb:addSubscribersListCb,removeSubscribersListCb:removeSubscribersListCb};remoteDataRef.on('child_added',addSubscribersListCb);remoteDataRef.on('child_removed',removeSubscribersListCb)};if(p_actionType){if(p_actionType===_actions2.default.ACTION_TYPE_VIDEO){_localstream2.default.connectLocalVideoStream(localVid,pubAndSubscribe,getLocalStreamCb)}else if(p_actionType===_actions2.default.ACTION_TYPE_AUDIO){_localstream2.default.connectLocalAudioStream(localVid,pubAndSubscribe,getLocalStreamCb)}else if(p_actionType===_actions2.default.ACTION_TYPE_AUDIO_VIDEO){_localstream2.default.connectLocalAudioVideoStream(localVid,pubAndSubscribe,getLocalStreamCb)}}}function _setOnPublishedStream(p_cb){if(publishedMediaListCb){dataref.child('publishedMediaList').off('child_added',publishedMediaListCb);publishedMediaListCb=null}if(p_cb&&typeof p_cb=='function'){publishedMediaListCb=function(snapshot){var obj={},name=snapshot.name();obj[name]=snapshot.val();obj[name].roomId=roomId;p_cb(obj)};dataref.child('publishedMediaList').on('child_added',publishedMediaListCb)}else {console.error('(ReachSDK::room['+roomId+']::_setOnPublishedStream)parameter incorrect. Expected function')}}function _unPublishStream(streamId,callback){console.log('(ReachSDK::room['+roomId+']::unPublishStream)streamId '+streamId);var localDataRef=dataref.child('publishedMediaList/'+streamId),remoteDataRef=localDataRef.child('subscribersList'),streamStacksId=streamId+'_pub';if(mStreams[streamId]&&mStreams[streamId].addSubscribersListCb){remoteDataRef.off('child_added',mStreams[streamId].addSubscribersListCb)}if(mStreams[streamId]&&mStreams[streamId].removeSubscribersListCb){remoteDataRef.off('child_removed',mStreams[streamId].removeSubscribersListCb)}delete mStreams[streamId];delete mMutedStreams[streamId];localDataRef.onDisconnect().cancel();localDataRef.remove();if(roomWebrtcStacks[streamStacksId]&&roomWebrtcStacks[streamStacksId].length>0){(function(){var nbStack=roomWebrtcStacks[streamStacksId].length,closeCb=function closeCb(){nbStack--;if(nbStack<1){delete roomWebrtcStacks[streamStacksId];if(callback&&typeof callback=='function'){callback()}}};for(var i=nbStack-1;i>=0;i--){webrtcmngr.closeWebrtc(roomWebrtcStacks[streamStacksId][i].stackId,true,closeCb)}})()}else {delete roomWebrtcStacks[streamStacksId];if(callback&&typeof callback=='function'){callback()}}}function _setOnUnPublishedStream(p_cb){if(unPublishedMediaListCb){dataref.child('publishedMediaList').off('child_removed',unPublishedMediaListCb);unPublishedMediaListCb=null}if(p_cb&&typeof p_cb=='function'){unPublishedMediaListCb=function(snapshot){p_cb(snapshot.name())};dataref.child('publishedMediaList').on('child_removed',unPublishedMediaListCb)}else {console.error('(ReachSDK::room['+roomId+']::_setOnUnPublishedStream)parameter incorrect. Expected function')}}function _subscribeToStream(streamData,remoteVid,getRemoteStreamCb){var streamId=(0,_keys2.default)(streamData)[0],actionType=streamData[streamId].actionType;console.log('(ReachSDK::room['+roomId+']::subscribeToStream)streamId '+streamId);if(mStreams&&mStreams[streamId]){if(actionType){if(actionType===_actions2.default.ACTION_TYPE_VIDEO){_localstream2.default.connectLocalVideoStream(remoteVid,getRemoteStreamCb)}else if(actionType===_actions2.default.ACTION_TYPE_AUDIO){_localstream2.default.connectLocalAudioStream(remoteVid,getRemoteStreamCb)}else if(actionType===_actions2.default.ACTION_TYPE_AUDIO_VIDEO){_localstream2.default.connectLocalAudioVideoStream(remoteVid,getRemoteStreamCb)}}return streamId}var appInstanceId=streamData[streamId].appInstanceId,localDataRef=dataref.child('publishedMediaList').child(streamId),remoteDataRef=localDataRef.child('subscribersList'),streamStacksId=streamId+'_sub',_peercoId=undefined,_peercoRef=undefined;if(!roomWebrtcStacks[streamStacksId]){roomWebrtcStacks[streamStacksId]=[]}else if(roomWebrtcStacks[streamStacksId]&&roomWebrtcStacks[streamStacksId][0]&&roomWebrtcStacks[streamStacksId][0].peercoId){_peercoId=roomWebrtcStacks[streamStacksId][0].peercoId}var getRandomIntInclusive=function getRandomIntInclusive(min,max){return Math.floor(Math.random()*(max-min+1))+min};if(!_peercoId){_peercoId=Math.floor(Date.now()).toString()+getRandomIntInclusive(0,1000000)}_peercoRef=datarefs.getWebrtc().push().name();remoteDataRef.child(_utils2.default.appInstanceId).set({ts:Webcom.ServerValue.TIMESTAMP,userId:me,peercoId:_peercoId,peercoRef:_peercoRef});var isAudioMute=mMutedStreams[streamId]&&mMutedStreams[streamId].audio,isVideoMute=mMutedStreams[streamId]&&mMutedStreams[streamId].video,mStackId=webrtcmngr.createWebrtc(remoteVid,appInstanceId,function(){},false,actionType,_peercoId,_peercoRef,isAudioMute,isVideoMute,getRemoteStreamCb);if(!remoteUnpublishedCb){remoteUnpublishedCb=function(snapshot){var removedStreamId=(0,_keys2.default)(snapshot)[0]+'_sub';if(roomWebrtcStacks[removedStreamId]){var i=0;while(i<roomWebrtcStacks[removedStreamId].length){webrtcmngr.closeWebrtc(roomWebrtcStacks[removedStreamId][i].stackId,false);i++}delete roomWebrtcStacks[removedStreamId]}};dataref.child('publishedMediaList').on('child_removed',remoteUnpublishedCb)}roomWebrtcStacks[streamStacksId].push({stackId:mStackId,isPublish:false,peercoId:_peercoId,peercoRef:_peercoRef});return streamId}function _unSubscribeFromStream(streamId){console.log('(ReachSDK::room['+roomId+']::unSubscribeFromStream)streamId '+streamId);var localDataRef=dataref.child('publishedMediaList').child(streamId),remoteDataRef=localDataRef.child('subscribersList'),streamStacksId=streamId+'_sub';remoteDataRef.child(_utils2.default.appInstanceId).remove();if(roomWebrtcStacks[streamStacksId]){var i=0;while(i<roomWebrtcStacks[streamStacksId].length){if(roomWebrtcStacks[streamStacksId][i]){webrtcmngr.closeWebrtc(roomWebrtcStacks[streamStacksId][i].stackId,false)}i++}delete roomWebrtcStacks[streamStacksId]}delete mMutedStreams[streamId]}function _getAvailableStreams(){console.log('(ReachSDK::room['+roomId+']::_getAvailableStreams)');return mAvailableStreams}function _getAvailableStream(streamId){console.log('(ReachSDK::room['+roomId+']::_getAvailableStream)streamId='+streamId);if(mAvailableStreams&&streamId){for(var i=mAvailableStreams.length-1;i>=0;i--){if(mAvailableStreams[i]&&(0,_keys2.default)(mAvailableStreams[i])[0]&&(0,_keys2.default)(mAvailableStreams[i])[0]===streamId){return mAvailableStreams[i]}}}return null}function _removeAllAvailableStreams(){console.log('(ReachSDK::room['+roomId+']::_removeAllAvailableStreams');mAvailableStreams=[]}function _muteAudioStream(streamId){if(!(streamId&&typeof streamId=='string')){console.error('(ReachSDK::room['+roomId+']::_muteAudioStream)parameter streamId is incorrect. Expecting non empty string');return}console.log('(ReachSDK::room['+roomId+']::_muteAudioStream)streamId='+streamId);if(!mMutedStreams[streamId]){mMutedStreams[streamId]={}}mMutedStreams[streamId].audio=true;if(roomWebrtcStacks){[roomWebrtcStacks[streamId+'_pub'],roomWebrtcStacks[streamId+'_sub']].forEach(function(stacks){if(stacks&&stacks.length>0){for(var i=stacks.length-1;i>=0;i--){webrtcmngr.muteAudioWebrtcStack(stacks[i].stackId)}}})}}function _unmuteAudioStream(streamId){if(!(streamId&&typeof streamId=='string')){console.error('(ReachSDK::room['+roomId+']::_unmuteAudioStream)parameter streamId is incorrect. Expecting non empty string');return}if(mMutedStreams[streamId]&&mMutedStreams[streamId].audio){mMutedStreams[streamId].audio=false}console.log('(ReachSDK::room['+roomId+']::_unmuteAudioStream)streamId='+streamId);if(roomWebrtcStacks){[roomWebrtcStacks[streamId+'_pub'],roomWebrtcStacks[streamId+'_sub']].forEach(function(stacks){if(stacks&&stacks.length>0){for(var i=stacks.length-1;i>=0;i--){webrtcmngr.unmuteAudioWebrtcStack(stacks[i].stackId)}}})}}function _muteVideoStream(streamId){if(!(streamId&&typeof streamId=='string')){console.error('(ReachSDK::room['+roomId+']::_muteVideoStream)parameter streamId is incorrect. Expecting non empty string');return}console.log('(ReachSDK::room['+roomId+']::_muteVideoStream)streamId='+streamId);if(!mMutedStreams[streamId]){mMutedStreams[streamId]={}}mMutedStreams[streamId].video=true;if(roomWebrtcStacks){[roomWebrtcStacks[streamId+'_pub'],roomWebrtcStacks[streamId+'_sub']].forEach(function(stacks){if(stacks&&stacks.length>0){for(var i=stacks.length-1;i>=0;i--){webrtcmngr.muteVideoWebrtcStack(stacks[i].stackId)}}})}}function _unmuteVideoStream(streamId){if(!(streamId&&typeof streamId=='string')){console.error('(ReachSDK::room['+roomId+']::_unmuteVideoStream)parameter streamId is incorrect. Expecting non empty string');return}if(mMutedStreams[streamId]&&mMutedStreams[streamId].video){mMutedStreams[streamId].video=false}console.log('(ReachSDK::room['+roomId+']::_unmuteVideoStream)streamId='+streamId);if(roomWebrtcStacks){[roomWebrtcStacks[streamId+'_pub'],roomWebrtcStacks[streamId+'_sub']].forEach(function(stacks){if(stacks&&stacks.length>0){for(var i=stacks.length-1;i>=0;i--){webrtcmngr.unmuteVideoWebrtcStack(stacks[i].stackId)}}})}}function _close(updateRoomStatusToClose){console.log('(ReachSDK::room['+roomId+']::_close)room '+roomId+', detroyRoom='+updateRoomStatusToClose);var participantListRef=dataref.child('participantList'),publishedMediaListRef=dataref.child('publishedMediaList');participantListRef.child(me+'/connected').set(false);(0,_keys2.default)(mStreams).forEach(_unPublishStream);mStreams=[];if(instantMessageListCb){dataref.child('instantMessageList').off('child_added',instantMessageListCb);instantMessageListCb=null}if(publishedMediaListCb){publishedMediaListRef.off('child_added',publishedMediaListCb);publishedMediaListCb=null}if(publishedMediaListCbForAvailableStream){publishedMediaListRef.off('child_added',publishedMediaListCbForAvailableStream);publishedMediaListCbForAvailableStream=null}if(unPublishedMediaListCb){publishedMediaListRef.off('child_removed',unPublishedMediaListCb);unPublishedMediaListCb=null}if(unPublishedMediaListCbForAvailableStream){publishedMediaListRef.off('child_removed',unPublishedMediaListCbForAvailableStream);unPublishedMediaListCbForAvailableStream=null}if(participantListJoinAddedCb){participantListRef.off('child_added',participantListJoinAddedCb);participantListJoinAddedCb=null}if(participantListJoinChangedCb){participantListRef.off('child_changed',participantListJoinChangedCb);participantListJoinChangedCb=null}if(participantListLeaveCb){participantListRef.off('child_changed',participantListLeaveCb);participantListLeaveCb=null}if(remoteUnpublishedCb){publishedMediaListRef.off('child_removed',remoteUnpublishedCb);remoteUnpublishedCb=null}(0,_keys2.default)(roomWebrtcStacks).forEach(function(streamStacksId){roomWebrtcStacks[streamStacksId].forEach(function(stack){if(stack){webrtcmngr.closeWebrtc(stack.stackId,stack.isPublish);webrtcmngr.clearWebrtcStacks(stack.stackId)}})});roomWebrtcStacks={};mMutedStreams=[];_removeAllAvailableStreams();if(updateRoomStatusToClose&&updateRoomStatusToClose===true){dataref.child('commonDataList/status').set(ROOM_STATUS_CLOSE)}}init();return {getRoomId:_getRoomId,getMe:_getMe,setOnParticipantJoin:_setOnParticipantJoin,setOnParticipantLeave:_setOnParticipantLeave,sendInstantMessage:_sendInstantMessage,setOnInstantMessage:_setOnInstantMessage,publishStream:_publishStream,setOnPublishedStream:_setOnPublishedStream,unPublishStream:_unPublishStream,setOnUnPublishedStream:_setOnUnPublishedStream,subscribeToStream:_subscribeToStream,unSubscribeFromStream:_unSubscribeFromStream,getAvailableStreams:_getAvailableStreams,getAvailableStream:_getAvailableStream,muteAudioStream:_muteAudioStream,unmuteAudioStream:_unmuteAudioStream,muteVideoStream:_muteVideoStream,unmuteVideoStream:_unmuteVideoStream,close:_close,on:function on(evt,p_cb){switch(evt){case 'instantMessage':_setOnInstantMessage(p_cb);break;case 'publishedStream':_setOnPublishedStream(p_cb);break;case 'unPublishedStream':_setOnUnPublishedStream(p_cb);break;case 'participantJoin':_setOnParticipantJoin(p_cb);break;case 'participantLeave':_setOnParticipantLeave(p_cb);break;default:console.err('(ReachSDK::room['+roomId+']::on)unsupported '+evt+' event');break;}}}};var _keys=__webpack_require__(10),_keys2=_interopRequireDefault(_keys),_stringify=__webpack_require__(22),_stringify2=_interopRequireDefault(_stringify),_actions=__webpack_require__(7),_actions2=_interopRequireDefault(_actions),_localstream=__webpack_require__(26),_localstream2=_interopRequireDefault(_localstream),_utils=__webpack_require__(24),_utils2=_interopRequireDefault(_utils);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}var ROOM_STATUS_CLOSE='CLOSE';

/***/ },
/* 26 */
/***/ function(module, exports) {

	'use strict';Object.defineProperty(exports,'__esModule',{value:true});var localstream=(function(){var localVideoStreams=[],localAudioStreams=[],localAudioVideoStreams=[],streamVideo=null,streamAudio=null,streamAudioVideo=null,listenersVideo=[],listenersAudio=[],listenersAudioVideo=[],mLocalStreamVideo=null,mLocalStreamAudio=null,mLocalStreamAudioVideo=null,initVideoProgress=false,initAudioProgress=false,initAudioVideoProgress=false;function _initVideo(callback){console.log('(ReachSDK::localstream::initVideo)');if(!initVideoProgress){initVideoProgress=true;navigator.getMedia=getUserMedia;mLocalStreamVideo=document.createElement('VIDEO');mLocalStreamVideo.muted=true;localVideoStreams.push(mLocalStreamVideo);if(streamVideo===null){navigator.getMedia({audio:false,video:true},function(s){streamVideo=s;localVideoStreams.forEach(function(localVideoStream){attachMediaStream(localVideoStream,streamVideo)});localVideoStreams=[];listenersVideo.forEach(function(listenerVideo){listenerVideo(streamVideo)});listenersVideo=[];initVideoProgress=false;if(callback){callback()}},function(error){console.error('Error on webrtcLocalStream - webkitGetUserMedia : error=');console.dir(error);initVideoProgress=false;if(callback){callback(error)}})}else {localVideoStreams.forEach(function(localVideoStream){attachMediaStream(localVideoStream,streamVideo)});localVideoStreams=[];listenersVideo.forEach(function(listenerVideo){listenerVideo(streamVideo)});listenersVideo=[];initVideoProgress=false}}}function _initAudio(callback){console.log('(ReachSDK::localstream::initAudio)');if(!initAudioProgress){initAudioProgress=true;navigator.getMedia=getUserMedia;mLocalStreamAudio=document.createElement('AUDIO');mLocalStreamAudio.muted=true;localAudioStreams.push(mLocalStreamAudio);if(streamAudio===null){navigator.getMedia({audio:true,video:false},function(s){streamAudio=s;localAudioStreams.forEach(function(localAudioStream){attachMediaStream(localAudioStream,streamAudio)});localAudioStreams=[];listenersAudio.forEach(function(listenerAudio){listenerAudio(streamAudio)});listenersAudio=[];initAudioProgress=false;if(callback){callback()}},function(error){console.error('Error on webrtcLocalStream - webkitGetUserMedia :error=');console.dir(error);initAudioProgress=false;if(callback){callback(error)}})}else {localAudioStreams.forEach(function(localAudioStream){attachMediaStream(localAudioStream,streamAudio)});localAudioStreams=[];listenersAudio.forEach(function(listenerAudio){listenerAudio(streamAudio)});listenersAudio=[];initAudioProgress=false}}}function _initAudioVideo(callback){console.log('(ReachSDK::localstream::initAudioVideo)');if(!initAudioVideoProgress){initAudioVideoProgress=true;navigator.getMedia=getUserMedia;mLocalStreamAudioVideo=document.createElement('AUDIOVIDEO');mLocalStreamAudioVideo.muted=true;localAudioVideoStreams.push(mLocalStreamAudioVideo);if(streamAudioVideo===null){navigator.getMedia({audio:true,video:true},function(s){streamAudioVideo=s;localAudioVideoStreams.forEach(function(localAudioVideoStream){attachMediaStream(localAudioVideoStream,streamAudioVideo)});localAudioVideoStreams=[];listenersAudioVideo.forEach(function(listenerAudioVideo){listenerAudioVideo(streamAudioVideo)});listenersAudioVideo=[];initAudioVideoProgress=false;if(callback){callback()}},function(error){console.error('(ReachSDK::localstream::initAudioVideo::Error on webrtcLocalStream - webkitGetUserMedia : error=');console.dir(error);initAudioVideoProgress=false;if(callback){callback(error)}})}else {localAudioVideoStreams.forEach(function(localAudioVideoStream){attachMediaStream(localAudioVideoStream,streamAudioVideo)});localAudioVideoStreams=[];listenersAudioVideo.forEach(function(listenerAudioVideo){listenerAudioVideo(streamAudioVideo)});listenersAudioVideo=[];initAudioVideoProgress=false}}}function _close(){console.log('(ReachSDK::localstream::close)');if(mLocalStreamVideo){detachMediaStream(mLocalStreamVideo);mLocalStreamVideo=null}if(streamAudioVideo){streamAudioVideo.stop();streamAudioVideo=null}if(streamVideo){streamVideo.stop();streamVideo=null}initVideoProgress=false;if(mLocalStreamAudio){detachMediaStream(mLocalStreamAudio);mLocalStreamAudio=null}if(streamAudio){streamAudio.stop();streamAudio=null}initAudioProgress=false;if(mLocalStreamAudioVideo){detachMediaStream(mLocalStreamAudioVideo);mLocalStreamAudioVideo=null}if(streamAudioVideo){streamAudioVideo.stop();streamAudioVideo=null}initAudioVideoProgress=false}return {getVideoStream:function getVideoStream(){return streamVideo},addVideoListener:function addVideoListener(cb){listenersVideo.push(cb)},initVideo:function initVideo(){_initVideo()},connectLocalVideoStream:function connectLocalVideoStream(videoElt,publishStreamCb,getLocalStreamCb){if(videoElt){videoElt.muted=true;if(streamVideo){console.log('(ReachSDK::localstream::connectLocalVideoStream)use existing streamVideo');attachMediaStream(videoElt,streamVideo);if(getLocalStreamCb&&typeof getLocalStreamCb=='function'){getLocalStreamCb(streamVideo)}}else {localVideoStreams.push(videoElt);if(getLocalStreamCb&&typeof getLocalStreamCb=='function'){listenersVideo.push(getLocalStreamCb)}_initVideo(publishStreamCb)}}else {if(!streamVideo){if(getLocalStreamCb&&typeof getLocalStreamCb=='function'){listenersVideo.push(getLocalStreamCb)}_initVideo(publishStreamCb)}else {if(getLocalStreamCb&&typeof getLocalStreamCb=='function'){getLocalStreamCb(streamVideo)}}}},getAudioStream:function getAudioStream(){return streamAudio},addAudioListener:function addAudioListener(cb){listenersAudio.push(cb)},initAudio:function initAudio(){_initAudio()},connectLocalAudioStream:function connectLocalAudioStream(AudioElt,publishStreamCb,getLocalStreamCb){if(AudioElt){AudioElt.muted=true;if(streamAudio){console.log('(ReachSDK::localstream::connectLocalAudioStream)use existing streamAudio');attachMediaStream(AudioElt,streamAudio);if(getLocalStreamCb&&typeof getLocalStreamCb=='function'){getLocalStreamCb(streamAudio)}}else {localAudioStreams.push(AudioElt);if(getLocalStreamCb&&typeof getLocalStreamCb=='function'){listenersAudio.push(getLocalStreamCb)}_initAudio(publishStreamCb)}}else {if(!streamAudio){if(getLocalStreamCb&&typeof getLocalStreamCb=='function'){listenersAudio.push(getLocalStreamCb)}_initAudio(publishStreamCb)}else {if(getLocalStreamCb&&typeof getLocalStreamCb=='function'){getLocalStreamCb(streamAudio)}}}},getAudioVideoStream:function getAudioVideoStream(){return streamAudioVideo},addAudioVideoListener:function addAudioVideoListener(cb){listenersAudioVideo.push(cb)},initAudioVideo:function initAudioVideo(){_initAudioVideo()},connectLocalAudioVideoStream:function connectLocalAudioVideoStream(AudioVideoElt,publishStreamCb,getLocalStreamCb){if(AudioVideoElt){AudioVideoElt.muted=true;if(streamAudioVideo){console.log('(ReachSDK::localstream::connectLocalAudioVideoStream)use existing streamAudioVideo');attachMediaStream(AudioVideoElt,streamAudioVideo);if(getLocalStreamCb){getLocalStreamCb(streamAudioVideo)}}else {localAudioVideoStreams.push(AudioVideoElt);if(getLocalStreamCb&&typeof getLocalStreamCb=='function'){listenersAudioVideo.push(getLocalStreamCb)}_initAudioVideo(publishStreamCb)}}else {if(!streamAudioVideo){if(getLocalStreamCb&&typeof getLocalStreamCb=='function'){listenersAudioVideo.push(getLocalStreamCb)}_initAudioVideo(publishStreamCb)}else {if(getLocalStreamCb){getLocalStreamCb(streamAudioVideo)}}}},close:function close(){_close()}}})();exports.default=localstream;

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';Object.defineProperty(exports,'__esModule',{value:true});var _utils=__webpack_require__(24),_utils2=_interopRequireDefault(_utils),_webrtc=__webpack_require__(28),_webrtc2=_interopRequireDefault(_webrtc),_localstream=__webpack_require__(26),_localstream2=_interopRequireDefault(_localstream);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}var webrtcmngr=function webrtcmngr(datarefs){var _this=this,webrtcStacks=[],virtualWebrtcStacks=[];function _createWebrtc(p_Vid,p_remoteAppInstId,p_onCloseCb,p_isPublish,p_actionType,p_peercoId,p_peercoRef,p_mutedAudio,p_muteVideo,p_getStreamCb){var webrtcStackId=p_peercoId,localDataRef=datarefs.getWebrtc().child(p_peercoRef+'/'+_utils2.default.appInstanceId),remoteDataRef=datarefs.getWebrtc().child(p_peercoRef+'/'+p_remoteAppInstId),virtualWebrtcStack=undefined;if(p_isPublish){virtualWebrtcStack={webRtcStackId:webrtcStackId,localVid:p_Vid}}else {virtualWebrtcStack={webRtcStackId:webrtcStackId,remoteVid:p_Vid}}var id=virtualWebrtcStacks.push(virtualWebrtcStack)-1;if(!webrtcStacks[webrtcStackId]){console.debug('ReachSDK::webrtcmngr::createWebrtc->create a new real webrtcStack');var webRtcStack=(0,_webrtc2.default)(this,p_isPublish,localDataRef,remoteDataRef,webrtcStackId,p_actionType,p_mutedAudio,p_muteVideo);webRtcStack.setOnClose(p_onCloseCb);if(p_isPublish){webrtcStacks[webrtcStackId]={stack:webRtcStack,isPublished:1,isSubscribed:0};webRtcStack.connectLocalStream(p_Vid,p_getStreamCb)}else {webrtcStacks[webrtcStackId]={stack:webRtcStack,isPublished:0,isSubscribed:1};webRtcStack.connectRemoteStream(p_Vid,p_getStreamCb)}}else {console.debug('ReachSDK::webrtcmngr::createWebrtc->use existing real webrtcStack');if(p_isPublish){webrtcStacks[webrtcStackId].isPublished++;webrtcStacks[webrtcStackId].stack.connectLocalStream(p_Vid,p_getStreamCb)}else {webrtcStacks[webrtcStackId].isSubscribed++;webrtcStacks[webrtcStackId].stack.connectRemoteStream(p_Vid,p_getStreamCb)}}console.debug('ReachSDK::webrtcmngr::createWebrtc->webrtcStack:'+webrtcStackId+' new isPublished count ='+webrtcStacks[webrtcStackId].isPublished+' new isSubscribed count ='+webrtcStacks[webrtcStackId].isSubscribed);return id}function _closeWebrtc(id,p_isUnPublish,callback){console.debug('ReachSDK::webrtcmngr::closeWebrtc->id='+id);if(!virtualWebrtcStacks[id]){console.warn('ReachSDK::webrtcmngr::closeWebrtc: virtualstack '+id+' not found');if(callback&&typeof callback=='function'){callback()}return false}var webrtcStackId=virtualWebrtcStacks[id].webRtcStackId;if(webrtcStackId&&webrtcStacks[webrtcStackId]){if(p_isUnPublish&&webrtcStacks[webrtcStackId].isPublished>0){webrtcStacks[webrtcStackId].isPublished--}else if(!p_isUnPublish&&webrtcStacks[webrtcStackId].isSubscribed>0){webrtcStacks[webrtcStackId].isSubscribed--}if(webrtcStacks[webrtcStackId].isPublished<1&&webrtcStacks[webrtcStackId].isSubscribed<1){console.debug('ReachSDK::webrtcmngr::closeWebrtc->destroy  real webrtcStack:'+webrtcStackId);webrtcStacks[webrtcStackId].stack.close(callback);webrtcStacks[webrtcStackId]=null}else {console.debug('ReachSDK::webrtcmngr::closeWebrtc->decrement  real webrtcStack:'+webrtcStackId+' new isPublished count ='+webrtcStacks[webrtcStackId].isPublished+' new isSubscribed count ='+webrtcStacks[webrtcStackId].isSubscribed);if(callback&&typeof callback=='function'){callback()}}}else {if(callback&&typeof callback=='function'){callback()}console.warn('ReachSDK::webrtcmngr::closeWebrtc cannot found real stack')}if(virtualWebrtcStacks[id].localVid){_localstream2.default.close();detachMediaStream(virtualWebrtcStacks[id].localVid)}if(virtualWebrtcStacks[id].remoteVid){detachMediaStream(virtualWebrtcStacks[id].remoteVid)}return true}function _clearWebrtcStacks(webrtcStackId){console.debug('ReachSDK::webrtcmngr::clearWebrtcStacks id='+webrtcStackId);if(webrtcStackId&&webrtcStacks&&webrtcStacks[webrtcStackId]){webrtcStacks[webrtcStackId]=null}return true}function _muteAudioWebrtcStack(virtualWebrtcStackId){console.log('(ReachSDK::webrtcmngr::muteAudioWebrtcStack) virtualWebrtcStackId='+virtualWebrtcStackId);if(virtualWebrtcStacks&&virtualWebrtcStacks[virtualWebrtcStackId]&&virtualWebrtcStacks[virtualWebrtcStackId].webRtcStackId){var webRtcStackId=virtualWebrtcStacks[virtualWebrtcStackId].webRtcStackId;console.log('(ReachSDK::webrtcmngr::muteAudioWebrtcStack) virtualWebrtcStackId='+virtualWebrtcStackId+' webRtcStackId='+webRtcStackId);if(webrtcStacks&&webrtcStacks[webRtcStackId]&&webrtcStacks[webRtcStackId].stack){webrtcStacks[webRtcStackId].stack.muteAudio()}else {console.warn('(ReachSDK::webrtcmngr::muteAudioWebrtcStack) webrtcStack='+webRtcStackId+' not found')}}else {console.warn('(ReachSDK::webrtcmngr::muteAudioWebrtcStack) virtualWebrtcStackId='+virtualWebrtcStackId+' not found')}}function _unmuteAudioWebrtcStack(virtualWebrtcStackId){console.log('(ReachSDK::webrtcmngr::_unmuteAudioWebrtcStack) virtualWebrtcStackId='+virtualWebrtcStackId);if(virtualWebrtcStacks&&virtualWebrtcStacks[virtualWebrtcStackId]&&virtualWebrtcStacks[virtualWebrtcStackId].webRtcStackId){var webRtcStackId=virtualWebrtcStacks[virtualWebrtcStackId].webRtcStackId;console.log('(ReachSDK::webrtcmngr::_unmuteAudioWebrtcStack) virtualWebrtcStackId='+virtualWebrtcStackId+',webRtcStackId='+webRtcStackId);if(webrtcStacks&&webrtcStacks[webRtcStackId]&&webrtcStacks[webRtcStackId].stack){webrtcStacks[webRtcStackId].stack.unmuteAudio()}else {console.warn('(ReachSDK::webrtcmngr::_unmuteAudioWebrtcStack) webrtcStack='+webRtcStackId+' not found')}}else {console.warn('(ReachSDK::webrtcmngr::_unmuteAudioWebrtcStack) virtualWebrtcStackId='+virtualWebrtcStackId+' not found')}}function _muteVideoWebrtcStack(virtualWebrtcStackId){console.log('(ReachSDK::webrtcmngr::muteAudioWebrtcStack) virtualWebrtcStackId='+virtualWebrtcStackId);if(virtualWebrtcStacks&&virtualWebrtcStacks[virtualWebrtcStackId]&&virtualWebrtcStacks[virtualWebrtcStackId].webRtcStackId){var webRtcStackId=virtualWebrtcStacks[virtualWebrtcStackId].webRtcStackId;console.log('(ReachSDK::webrtcmngr::muteAudioWebrtcStack) virtualWebrtcStackId='+virtualWebrtcStackId+' webRtcStackId='+webRtcStackId);if(webrtcStacks&&webrtcStacks[webRtcStackId]&&webrtcStacks[webRtcStackId].stack){webrtcStacks[webRtcStackId].stack.muteVideo()}else {console.warn('(ReachSDK::webrtcmngr::muteAudioWebrtcStack) webrtcStack='+webRtcStackId+' not found')}}else {console.warn('(ReachSDK::webrtcmngr::muteAudioWebrtcStack) virtualWebrtcStackId='+virtualWebrtcStackId+' not found')}}function _unmuteVideoWebrtcStack(virtualWebrtcStackId){console.log('(ReachSDK::webrtcmngr::_unmuteAudioWebrtcStack) virtualWebrtcStackId='+virtualWebrtcStackId);if(virtualWebrtcStacks&&virtualWebrtcStacks[virtualWebrtcStackId]&&virtualWebrtcStacks[virtualWebrtcStackId].webRtcStackId){var webRtcStackId=virtualWebrtcStacks[virtualWebrtcStackId].webRtcStackId;console.log('(ReachSDK::webrtcmngr::_unmuteAudioWebrtcStack) virtualWebrtcStackId='+virtualWebrtcStackId+', webRtcStackId='+webRtcStackId);if(webrtcStacks&&webrtcStacks[webRtcStackId]&&webrtcStacks[webRtcStackId].stack){webrtcStacks[webRtcStackId].stack.unmuteVideo()}else {console.warn('(ReachSDK::webrtcmngr::_unmuteAudioWebrtcStack) webrtcStack='+webRtcStackId+' not found')}}else {console.warn('(ReachSDK::webrtcmngr::_unmuteAudioWebrtcStack) virtualWebrtcStackId='+virtualWebrtcStackId+' not found')}}return {createWebrtc:function createWebrtc(p_Vid,p_remoteAppInstId,p_onCloseCb,p_isPublish,p_actionType,p_peercoId,p_mutedAudio,p_muteVideo,p_getStreamCb){return _createWebrtc.bind(_this)(p_Vid,p_remoteAppInstId,p_onCloseCb,p_isPublish,p_actionType,p_peercoId,p_mutedAudio,p_muteVideo,p_getStreamCb)},closeWebrtc:_closeWebrtc,clearWebrtcStacks:_clearWebrtcStacks,muteAudioWebrtcStack:_muteAudioWebrtcStack,unmuteAudioWebrtcStack:_unmuteAudioWebrtcStack,muteVideoWebrtcStack:_muteVideoWebrtcStack,unmuteVideoWebrtcStack:_unmuteVideoWebrtcStack}};exports.default=webrtcmngr;

/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';Object.defineProperty(exports,'__esModule',{value:true});var _stringify=__webpack_require__(22),_stringify2=_interopRequireDefault(_stringify),_actions=__webpack_require__(7),_actions2=_interopRequireDefault(_actions),_localstream=__webpack_require__(26),_localstream2=_interopRequireDefault(_localstream);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}var ICE_CONNECTION_STATE_DISCONNECTED='disconnected',ICE_CONNECTION_STATE_CONNECTED='connected',ICE_CONNECTION_STATE_COMPLETED='completed',ICE_CONNECTION_STATE_CHECKING='checking',ICE_CONNECTION_STATE_CLOSED='closed',ICE_CONNECTION_STATE_FAILED='failed',ICE_CONNECTION_STATE_OTHER='other',DEFAULT_ICE_CONFIG={iceServers:[{url:'turns:turn1.webcom.orange.com:443',username:'admin',credential:'webcom1234'},{url:'turn:turn2.webcom.orange.com:443',username:'admin',credential:'webcom1234'},{url:'turns:turn3.webcom.orange.com:443',username:'admin',credential:'webcom1234'}]},webrtc=function webrtc(p_webrtcmngr,p_isPublish,p_localDataRef,p_remoteDataRef,p_webrtcStackId,p_actionType,p_muteAudio,p_muteVideo){var webrtcmngr=p_webrtcmngr,stackId=new Date().getTime(),isPublish=p_isPublish,pc=null,localDataRef=p_localDataRef,remoteDataRef=p_remoteDataRef,iceCandidatesListCb=null,sdpOfferCb=null,sdpAnswerCb=null,remotedatarefCb=null,onCloseCb=null,webrtcStackId=p_webrtcStackId,actionType=p_actionType,config=null,myPeerConnection=null,myRTCSessionDescription=null,myRTCIceCandidate=null,localStreams=[],remoteStreams=[],remoteStreamsCb=[],receivedStream=null,sentStream=null,isClosed=false,closeInProgress=false,iceConnectionState=null,onCloseCb2=null,isAudioMute=false,isVideoMute=false;console.log('(ReachSDK::webrtc::)stackId=${stackId} isPublish=${isPublish},localDataRef=${localDataRef},remoteDataRef=${remoteDataRef})');var DtlsSrtpKeyAgreement={DtlsSrtpKeyAgreement:true},optional={optional:[DtlsSrtpKeyAgreement]},publisherMediaConstraints={mandatory:{OfferToReceiveAudio:false,OfferToReceiveVideo:false}},subscriberMediaConstraints={mandatory:{OfferToReceiveAudio:true,OfferToReceiveVideo:true}};function onError(e){console.log('(ReachSDK::webrtc::)stackId='+stackId+'error='+e);console.dir(e)}function getIceServersConfigFromServer(callbackOk,callbackKo){console.log('ReachSDK::webrtc::getIceServersConfigFromServer');if(localDataRef){localDataRef.root().child('config').once('value',function(snapshot){var _config=snapshot?snapshot.val():null;if(_config){if(typeof callbackOk=='function'){callbackOk(_config)}}else if(typeof callbackKo=='function'){callbackKo()}},function(error){if(typeof callbackKo=='function'){callbackKo(error)}})}else if(typeof callbackKo=='function'){callbackKo()}}function startListeningToRemoteIceCandidate(){remoteDataRef.child('iceCandidatesList').on('child_added',iceCandidatesListCb)}function stopListeningToRemoteIceCandidate(){remoteDataRef.child('iceCandidatesList').off('child_added',iceCandidatesListCb)}function _muteTracks(enabled,tracks){if(tracks){tracks.forEach(function(track){if(track){track.enabled=enabled}})}}function _muteAudioTracks(mute){isAudioMute=mute;var stream=isPublish&&sentStream?sentStream:!isPublish&&receivedStream?receivedStream:null;if(stream){_muteTracks(!isAudioMute,stream.getAudioTracks())}}function _muteAudio(){console.log('(ReachSDK::webrtc::_muteAudio)stackId='+stackId);_muteAudioTracks(true)}function _unmuteAudio(){console.log('(ReachSDK::webrtc::_unmuteAudio)stackId='+stackId);_muteAudioTracks(false)}function _muteVideoTracks(mute){isVideoMute=mute;var stream=isPublish&&sentStream?sentStream:!isPublish&&receivedStream?receivedStream:null;if(stream){_muteTracks(!isAudioMute,stream.getVideoTracks())}}function _muteVideo(){console.log('(ReachSDK::webrtc::_muteVideo)stackId='+stackId);_muteVideoTracks(true)}function _unmuteVideo(){console.log('(ReachSDK::webrtc::_unmuteVideo)stackId='+stackId);_muteVideoTracks(false)}function _initlocalStream(callback){console.log('(ReachSDK::webrtc::_initlocalStream)stackId='+stackId+' get local video stream and renders to local video');if(actionType){var initlocalStream=undefined;if(actionType===_actions2.default.ACTION_TYPE_VIDEO){initlocalStream=function(){console.log('(ReachSDK::webrtc::_initlocalStream)initlocalStream_video');if(_localstream2.default.getVideoStream()&&_localstream2.default.getVideoStream().clone&&typeof _localstream2.default.getVideoStream().clone=='function'){sentStream=_localstream2.default.getVideoStream().clone()}else {sentStream=_localstream2.default.getVideoStream()}if(isAudioMute){_muteAudio()}if(isVideoMute){_muteVideo()}pc.addStream(sentStream);for(var i=0;i<localStreams.length;i++){console.log('(ReachSDK::webrtc::_initlocalStream)stackId='+stackId+' rendering local video to '+localStreams[i].id);attachMediaStream(localStreams[i],_localstream2.default.getVideoStream())}if(callback&&typeof callback=='function'){callback()}};if(_localstream2.default.getVideoStream()){initlocalStream()}else {_localstream2.default.addVideoListener(initlocalStream);_localstream2.default.initVideo()}}else if(actionType===_actions2.default.ACTION_TYPE_AUDIO){initlocalStream=function(){console.log('(ReachSDK::webrtc::_initlocalStream)initlocalStream_audio');if(_localstream2.default.getAudioStream()&&_localstream2.default.getAudioStream().clone&&typeof _localstream2.default.getAudioStream().clone=='function'){sentStream=_localstream2.default.getAudioStream().clone()}else {sentStream=_localstream2.default.getAudioStream()}if(isAudioMute){_muteAudio()}if(isVideoMute){_muteVideo()}pc.addStream(sentStream);for(var i=0;i<localStreams.length;i++){console.log('(ReachSDK::webrtc::_initlocalStream)stackId='+stackId+' rendering local Audio to '+localStreams[i].id);attachMediaStream(localStreams[i],_localstream2.default.getAudioStream())}if(callback&&typeof callback=='function'){callback()}};if(_localstream2.default.getAudioStream()){initlocalStream()}else {_localstream2.default.addAudioListener(initlocalStream);_localstream2.default.initAudio()}}else if(actionType===_actions2.default.ACTION_TYPE_AUDIO_VIDEO){initlocalStream=function(){console.log('(ReachSDK::webrtc::_initlocalStream)initlocalStream_audio_video');if(_localstream2.default.getAudioVideoStream()&&_localstream2.default.getAudioVideoStream().clone&&typeof _localstream2.default.getAudioVideoStream().clone=='function'){sentStream=_localstream2.default.getAudioVideoStream().clone()}else {sentStream=_localstream2.default.getAudioVideoStream()}if(isAudioMute){_muteAudio()}if(isVideoMute){_muteVideo()}pc.addStream(sentStream);for(var i=0;i<localStreams.length;i++){console.log('(ReachSDK::webrtc::_initlocalStream)stackId='+stackId+' rendering local AudioVideo to '+localStreams[i].id);attachMediaStream(localStreams[i],_localstream2.default.getAudioVideoStream())}if(callback&&typeof callback=='function'){callback()}};if(_localstream2.default.getAudioVideoStream()){initlocalStream()}else {_localstream2.default.addAudioVideoListener(initlocalStream);_localstream2.default.initAudioVideo()}}}else {console.warn('(ReachSDK::webrtc::_initlocalStream)no actionType specified')}}function _initSdpCallbacks(){console.debug('(ReachSDK::webrtc::_initSdpCallbacks)stackId='+stackId);if(isPublish){if(sdpOfferCb){remoteDataRef.off('child_added',sdpOfferCb)}sdpAnswerCb=function(snapshot){if(!isClosed&&snapshot.name()==='sdpAnswer'){var data=snapshot.val();console.debug('(ReachSDK::webrtc::sdpAnswerCb)stackId='+stackId+'-received sdpAnswer: '+(0,_stringify2.default)(data));pc.setRemoteDescription(new myRTCSessionDescription(data),function(){console.debug('(ReachSDK::webrtc::sdpAnswerCb)stackId='+stackId+'-remote description set');startListeningToRemoteIceCandidate()},onError);remoteDataRef.off('child_added',sdpAnswerCb)}};remoteDataRef.on('child_added',sdpAnswerCb)}else {if(sdpAnswerCb){remoteDataRef.off('child_added',sdpAnswerCb)}sdpOfferCb=function(snapshot){if(!isClosed&&snapshot.name()==='sdpOffer'){var data=snapshot.val();console.debug('(ReachSDK::webrtc::sdpOfferCb)stackId='+stackId+'-received sdpOffer: '+(0,_stringify2.default)(data));pc.setRemoteDescription(new myRTCSessionDescription(data),function(){pc.createAnswer(function(description){console.log('(ReachSDK::webrtc::sdpOfferCb)stackId='+stackId+'-sending answer');pc.setLocalDescription(description,function(){console.debug('(ReachSDK::webrtc::sdpOfferCb)stackId='+stackId+'-set sdpAnswer in base : '+(0,_stringify2.default)(description));localDataRef.child('sdpAnswer').set(JSON.parse((0,_stringify2.default)(description)));startListeningToRemoteIceCandidate()},onError)},onError,subscriberMediaConstraints)},onError);remoteDataRef.off('child_added',sdpOfferCb)}};remoteDataRef.on('child_added',sdpOfferCb)}}function _closeSdpCallbacks(){if(sdpAnswerCb){remoteDataRef.off('child_added',sdpAnswerCb);sdpAnswerCb=null}if(sdpOfferCb){remoteDataRef.off('child_added',sdpOfferCb);sdpOfferCb=null}}function sendOffer(){console.log('(webrtc::sendOffer)stackid='+stackId+'-creating sdpOffer');pc.createOffer(function(description){pc.setLocalDescription(description,function(){console.debug('(ReachSDK::webrtc::createOffer)stackId='+stackId+'-set sdpOffer in base : '+(0,_stringify2.default)(description));localDataRef.child('sdpOffer').set(JSON.parse((0,_stringify2.default)(description)))},onError)},onError,publisherMediaConstraints)}function _close(callback){if(!closeInProgress&&!isClosed){closeInProgress=true;onCloseCb2=callback;console.debug('(ReachSDK::webrtc::_close)stackId='+stackId+'-closing webrtc stack');if(pc){pc.close()}if(remotedatarefCb){remoteDataRef.off('child_added',remotedatarefCb);remotedatarefCb=null}if(iceCandidatesListCb){stopListeningToRemoteIceCandidate();iceCandidatesListCb=null}_closeSdpCallbacks();for(var i=0;i<localStreams.length;i++){if(localStreams[i]){detachMediaStream(localStreams[i]);console.debug('(ReachSDK::webrtc::_close)stackId='+stackId+'-stopping local video to '+localStreams[i].id)}}for(var j=0;j<remoteStreams.length;j++){if(remoteStreams[j]){detachMediaStream(remoteStreams[j]);console.debug('(ReachSDK::webrtc::_close)stackId='+stackId+'-stopping remote vid to '+remoteStreams[j].id)}}isClosed=true;console.debug('(ReachSDK::webrtc::_close)stackId='+stackId+'-closing webrtc stack -> waiting for ICE_CONNECTION_STATE_DISCONNECTED');if(isClosed&&(iceConnectionState===ICE_CONNECTION_STATE_DISCONNECTED||iceConnectionState===ICE_CONNECTION_STATE_CLOSED||iceConnectionState===ICE_CONNECTION_STATE_FAILED)){console.debug('(ReachSDK::webrtc::_close)stackId='+stackId+'-closed webrtc stack complete');pc=null;closeInProgress=false;webrtcmngr.clearWebrtcStacks(webrtcStackId);if(onCloseCb2&&typeof onCloseCb2=='function'){onCloseCb2()}}}else {console.debug('(ReachSDK::webrtc::_close)stackId='+stackId+'-closing webrtc stack already in progress')}}function _connectLocalStream(videoElt,getStreamCb){if(actionType){if(actionType===_actions2.default.ACTION_TYPE_VIDEO){_localstream2.default.connectLocalVideoStream(videoElt,getStreamCb)}else if(actionType===_actions2.default.ACTION_TYPE_AUDIO){_localstream2.default.connectLocalAudioStream(videoElt,getStreamCb)}else if(actionType===_actions2.default.ACTION_TYPE_AUDIO_VIDEO){_localstream2.default.connectLocalAudioVideoStream(videoElt,getStreamCb)}}}function _connectRemoteStream(videoElt,getStreamCb){if(videoElt){if(receivedStream){attachMediaStream(videoElt,receivedStream);if(getStreamCb&&typeof getStreamCb=='function'){getStreamCb(receivedStream)}}else {remoteStreams.push(videoElt);if(getStreamCb&&typeof getStreamCb=='function'){remoteStreamsCb.push(getStreamCb)}}}else {if(receivedStream){if(getStreamCb&&typeof getStreamCb=='function'){getStreamCb(receivedStream)}}else {if(getStreamCb&&typeof getStreamCb=='function'){remoteStreamsCb.push(getStreamCb)}}}}function init_pc(){console.log('(ReachSDK::webrtc::init_pc)stackId='+stackId+'_config=',(0,_stringify2.default)(config));pc=new myPeerConnection(config,optional);pc.onicecandidate=function(e){if(e.candidate){console.log('(ReachSDK::webrtc::pc.onicecandidate)stackId='+stackId+' send ice candidate='+(0,_stringify2.default)(e.candidate));localDataRef.child('iceCandidatesList').push({label:e.candidate.sdpMLineIndex,id:e.candidate.sdpMid,candidate:e.candidate.candidate})}};pc.onaddstream=function(e){console.debug('(ReachSDK::webrtc::onaddstream)stackId='+stackId+'-stream:'+(0,_stringify2.default)(e.stream));if(e&&e.stream){receivedStream=e.stream;if(isAudioMute){_muteAudio()}if(isVideoMute){_muteVideo()}}};pc.oniceconnectionstatechange=function(){if(!!pc&&pc.iceConnectionState===ICE_CONNECTION_STATE_CHECKING){console.debug('(ReachSDK::webrtc::oniceconnectionstatechange)stackId='+stackId+'-checking');iceConnectionState=ICE_CONNECTION_STATE_CHECKING}else if(!!pc&&pc.iceConnectionState===ICE_CONNECTION_STATE_CONNECTED){iceConnectionState=ICE_CONNECTION_STATE_CONNECTED;console.debug('(ReachSDK::webrtc::oniceconnectionstatechange)stackId='+stackId+'-connected');if(receivedStream){remoteStreams.forEach(function(remoteStream){if(remoteStream){console.debug('(ReachSDK::webrtc::onaddstream)pc.onaddstream stackId='+stackId+'-rendering remote vid to '+remoteStream.id);attachMediaStream(remoteStream,receivedStream)}});remoteStreamsCb.forEach(function(remoteStreamCb){if(remoteStreamCb){remoteStreamCb(receivedStream)}});remoteStreamsCb=[]}stopListeningToRemoteIceCandidate()}else if(!!pc&&pc.iceConnectionState===ICE_CONNECTION_STATE_COMPLETED){iceConnectionState=ICE_CONNECTION_STATE_COMPLETED;console.debug('(ReachSDK::webrtc::oniceconnectionstatechange)stackId='+stackId+'-'+ICE_CONNECTION_STATE_COMPLETED);stopListeningToRemoteIceCandidate()}if(!!pc&&pc.iceConnectionState===ICE_CONNECTION_STATE_DISCONNECTED){iceConnectionState=ICE_CONNECTION_STATE_DISCONNECTED;console.log('(ReachSDK::webrtc::oniceconnectionstatechange)stackId='+stackId+'-remote disconnection, closing peer connection');_close()}else if(!!pc&&pc.iceConnectionState===ICE_CONNECTION_STATE_CLOSED){console.debug('(ReachSDK::webrtc::oniceconnectionstatechange)stackId='+stackId+'-closed');iceConnectionState=ICE_CONNECTION_STATE_CLOSED;_close()}else if(!!pc&&pc.iceConnectionState===ICE_CONNECTION_STATE_FAILED){console.debug('(ReachSDK::webrtc::oniceconnectionstatechange)stackId='+stackId+'-failed');iceConnectionState=ICE_CONNECTION_STATE_FAILED;_close()}else {if(pc){console.debug('(ReachSDK::webrtc::oniceconnectionstatechange)stackId='+stackId+'-'+pc.iceConnectionState)}else {console.debug('(ReachSDK::webrtc::oniceconnectionstatechange)stackId='+stackId+'-pc = null')}iceConnectionState=ICE_CONNECTION_STATE_OTHER}if(isClosed&&(iceConnectionState===ICE_CONNECTION_STATE_DISCONNECTED||iceConnectionState===ICE_CONNECTION_STATE_CLOSED||iceConnectionState===ICE_CONNECTION_STATE_FAILED)){console.debug('(ReachSDK::webrtc::_close)stackId='+stackId+'-closed webrtc stack complete');pc=null;closeInProgress=false;webrtcmngr.clearWebrtcStacks(webrtcStackId);if(onCloseCb&&typeof onCloseCb=='function'){onCloseCb()}if(onCloseCb2&&typeof onCloseCb2=='function'){onCloseCb2()}}};iceCandidatesListCb=function(snapshot){var data=snapshot.val(),candidate=new myRTCIceCandidate({sdpMLineIndex:data.label,candidate:data.candidate,sdpMid:data.id});console.log('(ReachSDK::webrtc::iceCandidatesListCb)stackId='+stackId+'received ice candidate='+(0,_stringify2.default)(candidate));pc.addIceCandidate(candidate)};if(isPublish){_initlocalStream(function(){_initSdpCallbacks();sendOffer()})}else {_initSdpCallbacks()}}(function(){console.log('(ReachSDK::webrtc::init)stackId='+stackId);if(typeof RTCPeerConnection==='function'){myPeerConnection=RTCPeerConnection}else {console.error('(ReachSDK::webrtc::init)stackId='+stackId+' error=Webrtc is not supported on this browser !');throw new Error('Webrtc is not supported on this browser !')}if(typeof RTCSessionDescription==='function'){myRTCSessionDescription=RTCSessionDescription}else {console.error('(ReachSDK::webrtc::init)stackId='+stackId+' error2=Webrtc is not supported on this browser !');throw new Error('Webrtc is not supported on this browser !')}if(typeof RTCIceCandidate==='function'){myRTCIceCandidate=RTCIceCandidate}else {console.error('(ReachSDK::webrtc::init)stackId='+stackId+' error3=Webrtc is not supported on this browser !');throw new Error('Webrtc is not supported on this browser !')}if(p_muteAudio){isAudioMute=true}if(p_muteVideo){isVideoMute=true}getIceServersConfigFromServer(function(_config){config=_config;console.log('(ReachSDK::webrtc::) use server config=',(0,_stringify2.default)(config));init_pc()},function(){if(typeof DEFAULT_ICE_CONFIG!=='undefined'){config=DEFAULT_ICE_CONFIG;console.log('(ReachSDK::webrtc::) use DEFAULT_ICE_CONFIG config=',(0,_stringify2.default)(config))}else {console.log('(ReachSDK::webrtc::) no ice  config')}init_pc()})})();return {setOnClose:function setOnClose(cb){onCloseCb=cb},close:function close(cb){console.debug('(ReachSDK::webrtc::_close)stackId='+stackId+'-close requested');_close(cb)},connectLocalStream:_connectLocalStream,connectRemoteStream:_connectRemoteStream,muteAudio:_muteAudio,unmuteAudio:_unmuteAudio,muteVideo:_muteVideo,unmuteVideo:_unmuteVideo}};exports.default=webrtc;

/***/ }
/******/ ])
});
;
//# sourceMappingURL=data:application/json;base64,